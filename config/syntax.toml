[JavaScript]
extensions = ["js"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Symbols (e.g. variable names)
  '[.a-zA-Z0-9_]+',
  # Two character operators
  '(&&|\|\||\+\+|--|\*\*)',
  # Single character operators
  '[=<>/*+?:;,-]',
  # Double-quoted strings
  '"((\\.)|[^"])*"',
  # Single quoted strings
  "'((\\\\')|[^'])*'",
  # Backtick strings
  '`((\\`)|[^`])*1`',
]
comment_patterns = [
  # Single line comments
  '//.*(\n|$)',
  # Multi-line comments
  '/\*(?s:.)*?\*/',
]
open_delimiter_pattern = '(\[|\{|\()'
close_delimiter_pattern = '(\]|\}|\))'

[JSON]
extensions = ["json"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Booleans
  '(true)|(false)|(null)',
  # Punctuation
  "[:,]",
  # Double-quoted strings
  '"((\\")|[^"])*"',
]
comment_patterns = []
open_delimiter_pattern = '(\[|\{)'
close_delimiter_pattern = '(\]|\})'

[CSS]
extensions = ["css"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Symbols (e.g. variable names)
  '[.a-zA-Z0-9_]+',
  # Punctuation
  '[:;]',
  # Double-quoted strings
  '"((\\.)|[^"])*"',
  # Single quoted strings
  "'((\\\\')|[^'])*'",
]
comment_patterns = [
  # Multi-line comments
  '/\*(?s:.)*?\*/',
]
open_delimiter_pattern = '(\[|\{|\()'
close_delimiter_pattern = '(\]|\}|\))'

["Emacs Lisp"]
extensions = ["el"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Symbols (e.g. variable names)
  '[a-zA-Z0-9_?:/*+=<>-]+',
  # Operators
  "[`',#.&@]",
  # Double-quoted strings
  '"((\\.)|[^"])*"',
]
comment_patterns = [
  ';.*',
]
open_delimiter_pattern = '(\[|\{|\()'
close_delimiter_pattern = '(\]|\}|\))'

[Scheme]
extensions = ["scm"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Symbols (e.g. variable names)
  '#?[a-zA-Z0-9_?:/*=-]+',
  # Operators
  "[`',#.]",
  # Double-quoted strings
  '"((\\")|[^"])*"',
]
comment_patterns = [
  ';.*',
]
open_delimiter_pattern = '(\[|\{|\()'
close_delimiter_pattern = '(\]|\}|\))'


[OCaml]
extensions = ["ml", "mli"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Symbols (e.g. variable names)
  '[.a-zA-Z0-9_]+',
  # Two character operators
  '(->|<-|:=|&&|\|\|)',
  # Single character operators
  "[?~=<>/*+,&|:;'#!-]",
  # Double-quoted strings
  '"((\\.)|[^"])*"',
]
comment_patterns = [
  # Multi-line comments
  '\(\*(?s:.)*?\*\)',
]
open_delimiter_pattern = '(\[|\{|\()'
close_delimiter_pattern = '(\]|\}|\))'

[Clojure]
extensions = ["clj"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Symbols (e.g. variable names)
  ':?[a-zA-Z0-9_>+=-]+',
  # Two character operators
  '(==)',
  # Single character operators
  "[`'~@&]",
  # Double-quoted strings
  '"((\\.)|[^"])*"',
]
comment_patterns = [
  ';.*',
]
open_delimiter_pattern = '(\[|\{|\()'
close_delimiter_pattern = '(\]|\}|\))'

[Rust]
extensions = ["rs"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Single quoted character 'a' or '\n', trying to avoid matching
  # lifetimes.
  "'..?'",
  # Lifetimes
  "'[a-z_]+",
  # Bindings in macros.
  "\\$[a-z_]+",
  # Symbols (e.g. variable names)
  '[a-zA-Z0-9_]+!?',
  # Two character operators
  '(::|&&|\|\||\.\.|=>|<=|>=|==|!=)',
  # Single character operators
  # | is a delimiter for lambdas, but also used in pattern matching.
  '[.&=<>/*+:;,|#!?$-]',
  # Double-quoted strings
  '"((\\.)|[^"])*"',
]
comment_patterns = [
  # Single line comments
  '//.*(\n|$)',
  # Multi-line comments
  '/\*(?s:.)*?\*/',
]
open_delimiter_pattern = '(\[|\{|\()'
close_delimiter_pattern = '(\]|\}|\))'

[Go]
extensions = ["go"]
atom_patterns = [
  # Numbers
  '[0-9]+',
  # Symbols (e.g. variable names)
  '[a-zA-Z0-9_]+!?',
  # Two character operators
  '(!=|:=|&&|\|\|)',
  # Single character operators
  '[.;:,=&!*+-]',
  # Double-quoted strings
  '"((\\.)|[^"])*"',
]
comment_patterns = [
  # Single line comments
  '//.*(\n|$)',
  # Multi-line comments
  '/\*(?s:.)*?\*/',
]
open_delimiter_pattern = '\[|\{|\('
close_delimiter_pattern = '\]|\}|\)'
