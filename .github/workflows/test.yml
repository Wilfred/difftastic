on: [push, pull_request]

name: Continuous integration

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        feature: ["default", "dl-parsers"]
    runs-on: ${{ matrix.os }}
    env:
      TS_PARSERS_PATH: ${{ github.workspace }}/vendor/build
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.57.0

      - name: Build shared libs
        if: matrix.feature == 'dl-parsers'
        run: |
          cmake -B ./vendor/build -S ./vendor -G 'Unix Makefiles'
          make -C ./vendor/build

      - name: Test pinned
        run: cargo test --features ${{ matrix.feature }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Test latest stable
        run: cargo +stable test --features ${{ matrix.feature }}

  # test_linux_arm64:
  #   name: Test Linux arm64 (build only)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: dtolnay/rust-toolchain@1.57.0
  #     - run: rustup target add aarch64-unknown-linux-gnu
  #     - run: sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
  #     - run: cargo build --target=aarch64-unknown-linux-gnu

  regression_test:
    name: Output Regression Test
    strategy:
      matrix:
        feature: ["default", "dl-parsers"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.57.0

      - name: Build shared libs
        if: matrix.feature == 'dl-parsers'
        run: |
          cmake -B ./vendor/build -S ./vendor -G 'Unix Makefiles'
          make -C ./vendor/build

      - name: Generate output for all sample files
        env:
          FEATURES: ${{ matrix.feature }}
        run: ./sample_files/compare_all.sh

      - name: Verify output is unchanged
        run: diff -C2 sample_files/compare.result sample_files/compare.expected

  package:
    name: Check Linux Packaging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.57.0
      - run: cargo package --allow-dirty

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.57.0
      - run: cargo fmt --all -- --check
