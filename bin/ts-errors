#!/usr/bin/env ruby
# frozen_string_literal: true

# Find errors in `tree-sitter parse` output and print it a format easily consumable
# by VSCode. The Hacklang parser already has an error format easily consumable by VSCode
# so we match that format.
#
#     $ hh_parse --show-file-name --full-fidelity-errors-all $@
#     examples/hack-sql-fake/src/QueryContext.php
#     (5,1)-(5,8) Some error
#     (10,3)-(10,6) Some error
#     examples/hack-sql-fake/src/SQLCommandProcessor.php
#     (2,3)-(2,4) Some error
#
#     $ tree-sitter parse $@ | bin/vscode-errors
#     examples/hack-json-schema/src/BaseValidator.php
#     (1,1)-(7,26) ERROR
#     (1,1)-(1,3) MISSING

errors = []

ARGF.each_line do |line|
  # file.hack    0 ms    (MISSING ";" [229, 19] - [229, 19])
  next if line !~ /\((ERROR|MISSING)(?: .*)? \[(\d+), (\d+)\] - \[(\d+), (\d+)\]/

  # Increment numbers to match VSCode's 1-indexing. Use Hack error format.
  errors << "(#{$2},#{$3})-(#{$4},#{$5}) #{$1}".gsub(/\d+/) { |_| _.to_i + 1 }

  # When `tree-sitter parse` has an error, it includes thle file name at the end of the output.
  next if line !~ /(^.*\.(php|hack))\s/

  puts $1

  errors.uniq.each { |_| puts _ }
  errors = []
end
