#!/usr/bin/env bash

set -e

while [[ $# -gt 0 ]]; do
  case $1 in
  --filter)
    filter=$2
    shift
    shift
    ;;
  --count)
    count=1
    shift
    ;;
  --name-only)
    name_only=1
    shift
    ;;
  *)
    break
    ;;
  esac
done

function filter-hack() {
  grep -E --color=never '.*\.(hack|php)$' | sort -u
}

function find-hack() {
  find -E "$1" -regex '.*\.(hack|php)$' | sort -u
}

function print-results() {
  if [[ "$count" -eq 1 ]]; then
    failures="$(cat /dev/stdin | filter-hack | wc -l | tr -d ' ')"

    # Very important
    if [[ "$filures" -eq 1 ]]; then
      echo "$failures failure"
    else
      echo "$failures failures"
    fi

  elif [[ "$name_only" -eq 1 ]]; then
    filter-hack
  else
    cat /dev/stdin
  fi
}

hhvm_failures="examples/hhvm-failures.txt"

hhvm_tests="examples/hhvm/hphp/hack/test"

# The HHVM repo has tests that verify intentional errors. We aren't doing that (yet).
# Filter out intentionally failing Hack files.
if ! test -f "$hhvm_failures"; then
  printf "\033[1mGetting known HHVM failures...\033[0m\n"

  find-hack $hhvm_tests |
    xargs -n 256 bin/hh-errors 2>/dev/null |
    filter-hack >$hhvm_failures

  echo "$(wc -l <$hhvm_failures) known HHVM failures"
fi

printf "\033[1mGetting Tree-sitter examples errors...\033[0m\n"

find-hack examples |
  grep -v 'examples/hhvm' |
  xargs bin/ts-errors |
  print-results

comm -13 <(sort $hhvm_failures) <(find-hack $hhvm_tests | grep -E "$filter") |
  xargs -n 256 bin/ts-errors |
  print-results
