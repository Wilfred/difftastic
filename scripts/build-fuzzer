#!/bin/bash
set -e

if [[ "$(uname -s)" != Linux ]]; then
    echo "Fuzzing is only supported on Linux"
    exit 1
fi

if [[ -z "$LIB_FUZZER_PATH" ]]; then
    echo "LIB_FUZZER_PATH not set"
    exit 1
fi

export CPLUS_INCLUDE_PATH="${CPLUS_INCLUDE_PATH:+${CPLUS_INCLUDE_PATH}:}/usr/include/c++/10"
export CPLUS_INCLUDE_PATH="${CPLUS_INCLUDE_PATH:+${CPLUS_INCLUDE_PATH}:}/usr/include/x86_64-linux-gnu/c++/10/"

CC=${CC:-clang}
CXX=${CXX:-clang++}
LINK=${LINK:-clang++}

default_fuzz_flags="-fsanitize=fuzzer,address,undefined"

CFLAGS=${CFLAGS:-"$default_fuzz_flags"}
CXXFLAGS=${CXXFLAGS:-"$default_fuzz_flags"}

export CFLAGS

echo "Building fuzzer..."
lang_dir="."

# The following assumes each language is implemented as src/parser.c plus an
# optional scanner in src/scanner.{c,cc}
objects=()

lang_scanner="src/scanner"
$CXX $CXXFLAGS -g -O1 "-I${lang_dir}/src" -c "${lang_scanner}.cc" -o "${lang_scanner}.o"
objects+=("${lang_scanner}.o")


# Compiling with -O0 speeds up the build dramatically
$CC $CFLAGS -g -O0 "-I${lang_dir}/src" "${lang_dir}/src/parser.c" -c -o "${lang_dir}/src/parser.o"
objects+=("${lang_dir}/src/parser.o")

cp "queries/highlights.scm" "out/elixir.scm"

# FIXME: We should extract the grammar name from grammar.js. Use the name of
# the directory instead. Also, the grammar name needs to be a valid C
# identifier so replace any '-' characters
$CXX $CXXFLAGS -std=c++11 -I ../tree-sitter/lib/include -D TS_LANG="tree_sitter_elixir" -D TS_LANG_QUERY_FILENAME="\"${ts_lang_query_filename}\"" \
     "test/fuzz/fuzzer.cc" "${objects[@]}" \
     ../tree-sitter/libtree-sitter.a "$LIB_FUZZER_PATH" \
     -o "out/elixir_fuzzer"

python test/fuzz/gen-dict.py "${lang_dir}/src/grammar.json" > "out/elixir.dict"
