============================================
Modules
============================================

mod english;

mod english {}

mod english {
    mod greetings {}
    mod farewells {}
}

pub mod english;

---

(source_file
  (mod_item (identifier))
  (mod_item (identifier))
  (mod_item (identifier)
    (mod_item (identifier))
    (mod_item (identifier)))
  (mod_item (visibility_modifier) (identifier)))

============================================
Extern crate declarations
============================================

extern crate std;

extern crate std as ruststd;

---

(source_file
  (extern_crate_declaration (identifier))
  (extern_crate_declaration (identifier) (identifier)))

============================================
Function declarations
============================================

fn main() {}

fn add(x: i32, y: i32) -> i32 {
    return x + y;
}

fn takes_slice(slice: &str) {
    println!("Got: {}", slice);
}

---

(source_file
  (function_item (identifier) (parameters) (block))
  (function_item (identifier)
    (parameters
      (identifier) (type_expression) (identifier) (type_expression))
    (type_expression)
    (block
      (return_expression (binary_expression (identifier) (identifier)))))
  (function_item (identifier)
    (parameters (identifier) (type_expression))
    (block (macro_invocation (identifier) (macro_arguments (string_literal) (identifier))))))

============================================
Use declarations
============================================

use abc;
use phrases::japanese;
use sayings::english::greetings;
use sayings::english::greetings as en_greetings ;
use phrases::english::{greetings,farewells};
use sayings::japanese::farewells::*;
pub use self::greetings::hello;
use sayings::english::{self, greetings as en_greetings, farewells as en_farewells};

---

(source_file
  (use_declaration (identifier))
  (use_declaration (path (identifier)) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (identifier) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (identifier) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (path (identifier)))
  (use_declaration (visibility_modifier) (path (self)) (path (identifier)) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (self) (identifier) (identifier) (identifier) (identifier)))

============================================
Variable bindings
============================================

let x;
let x = 42;
let x: i32;
let x: i8 = 42;
let mut x = 5;
let y: bool = false;

---

(source_file
  (let_declaration (identifier))
  (let_declaration (identifier) (number_literal))
  (let_declaration (identifier) (type_expression))
  (let_declaration (identifier) (type_expression) (number_literal))
  (let_declaration (mutable_specifier) (identifier) (number_literal))
  (let_declaration (identifier) (type_expression) (boolean_literal)))

============================================
Structs
============================================

struct Proton;
struct Electron {}
struct Point {x: i32, y: i32}
struct Color(i32, i32, i32);
struct Inches(i32);

---

(source_file
  (struct_item (identifier))
  (struct_item (identifier))
  (struct_item (identifier)
    (identifier) (type_expression)
    (identifier) (type_expression))
  (struct_item (identifier)
    (type_expression) (type_expression) (type_expression))
  (struct_item (identifier) (type_expression)))

============================================
Empty statements
============================================

fn main() {
    ;
}

---

(source_file
  (function_item (identifier) (parameters) (block
    (empty_statement))))
