================================================================================
keyword list
================================================================================

[
  version: "0.1.0",
  build_per_environment: true,
  build_path: "_build",
  lockfile: "mix.lock",
  deps_path: "deps",
  deps: deps,
  app: :mix_install,
  erlc_paths: ["src"],
  elixirc_paths: ["lib"],
  consolidate_protocols: false
]

--------------------------------------------------------------------------------

(program
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword
        (keyword_literal))
      (true)
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword
        (keyword_literal))
      (identifier)
      (keyword
        (keyword_literal))
      (atom
        (atom_literal))
      (keyword
        (keyword_literal))
      (list
        (string
          (string_start)
          (string_content)
          (string_end)))
      (keyword
        (keyword_literal))
      (list
        (string
          (string_start)
          (string_content)
          (string_end)))
      (keyword
        (keyword_literal))
      (false))))

================================================================================
heredoc
================================================================================

"""
a
"""

--------------------------------------------------------------------------------

(program
  (heredoc
    (heredoc_start)
    (heredoc_content)
    (heredoc_end)))

================================================================================
string
================================================================================

"abc"

--------------------------------------------------------------------------------

(program
  (string
    (string_start)
    (string_content)
    (string_end)))

================================================================================
interpolated string
================================================================================

"abc#{x+2}xyz"

--------------------------------------------------------------------------------

(program
  (string
    (string_start)
    (string_content)
    (interpolation
      (binary_op
        (identifier)
        (integer)))
    (string_content)
    (string_end)))

================================================================================
string escape sequence
================================================================================

"a\"quote\"b"

--------------------------------------------------------------------------------

(program
  (string
    (string_start)
    (string_content)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (string_content)
    (string_end)))

================================================================================
heredoc escape sequence
================================================================================

"""
a\"quote\"b
"""

--------------------------------------------------------------------------------

(program
  (heredoc
    (heredoc_start)
    (heredoc_content)
    (escape_sequence)
    (heredoc_content)
    (escape_sequence)
    (heredoc_content)
    (heredoc_end)))

================================================================================
atoms
================================================================================

:atom

--------------------------------------------------------------------------------

(program
  (atom
    (atom_literal)))

================================================================================
operator atom
================================================================================

[:@, :., :+, :-, :!, :^, :not, :~~~, :*, :/, :+, :-, :++, :--, :.., :..., :<>, :+++, :---, :^^^, :in, :not, :|>, :<<<, :>>>, :<<~, :~>>, :<~, :~>, :<~>, :<|>, :<, :>, :<=, :>=, :==, :!=, :=~, :===, :!==, :&&, :&&&, :and, :||, :|||, :=, :&, :=>, :|, :::, :when, :<-, :\\, :%, :%{}, :{}, :->, :<<>>]

--------------------------------------------------------------------------------

(program
  (list
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))
    (atom
      (atom_literal))))

================================================================================
single quote heredoc
================================================================================

'''
a"
'''

--------------------------------------------------------------------------------

(program
  (heredoc
    (heredoc_start)
    (heredoc_content)
    (heredoc_end)))

================================================================================
single quote string
================================================================================

'abc'

--------------------------------------------------------------------------------

(program
  (string
    (string_start)
    (string_content)
    (string_end)))

================================================================================
single quote interpolated string
================================================================================

'abc#{x+2}xyz'

--------------------------------------------------------------------------------

(program
  (string
    (string_start)
    (string_content)
    (interpolation
      (binary_op
        (identifier)
        (integer)))
    (string_content)
    (string_end)))

================================================================================
single quote string escape sequence
================================================================================

'a\'quote\'b'

--------------------------------------------------------------------------------

(program
  (string
    (string_start)
    (string_content)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (string_content)
    (string_end)))

================================================================================
char
================================================================================

?a

--------------------------------------------------------------------------------

(program
  (char))

================================================================================
char escaped
================================================================================

?\n

--------------------------------------------------------------------------------

(program
  (char))

================================================================================
interpolated atom
================================================================================

:"a#{i}b"

--------------------------------------------------------------------------------

(program
  (atom
    (atom_start)
    (atom_content)
    (interpolation
      (identifier))
    (atom_content)
    (atom_end)))

================================================================================
single quote interpolated atom
================================================================================

:'"a#{i}b'

--------------------------------------------------------------------------------

(program
  (atom
    (atom_start)
    (atom_content)
    (interpolation
      (identifier))
    (atom_content)
    (atom_end)))

================================================================================
keyword list with caps start
================================================================================

eval_binds(CONFIG: config, SCRIPT: script)

--------------------------------------------------------------------------------

(program
  (qualified_call
    (identifier)
    (arguments
      (keyword_list
        (keyword
          (keyword_literal))
        (identifier)
        (keyword
          (keyword_literal))
        (identifier)))))

================================================================================
operator keyword
================================================================================

[~~~: 1, &&&: 2, |||: 2, ^^^: 2, <<<: 2, >>>: 2]

--------------------------------------------------------------------------------

(program
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)
      (keyword
        (keyword_literal))
      (integer)
      (keyword
        (keyword_literal))
      (integer)
      (keyword
        (keyword_literal))
      (integer)
      (keyword
        (keyword_literal))
      (integer)
      (keyword
        (keyword_literal))
      (integer))))

================================================================================
string keyword
================================================================================

["a": 1, "b#{2}3": 2]

--------------------------------------------------------------------------------

(program
  (list
    (keyword_list
      (keyword
        (keyword_string
          (string_start)
          (string_content)
          (string_end)))
      (integer)
      (keyword
        (keyword_string
          (string_start)
          (string_content)
          (interpolation
            (integer))
          (string_content)
          (string_end)))
      (integer))))

================================================================================
single quote string keyword
================================================================================

['a': 1, 'b#{1}': 2]

--------------------------------------------------------------------------------

(program
  (list
    (keyword_list
      (keyword
        (keyword_string
          (string_start)
          (string_content)
          (string_end)))
      (integer)
      (keyword
        (keyword_string
          (string_start)
          (string_content)
          (interpolation
            (integer))
          (string_end)))
      (integer))))

================================================================================
hanging comma
================================================================================

[
  %{a: b,},
  %Struct{a: b,},
  {a, b,},
  [a: b,],
  <<a, b,>>,
]

--------------------------------------------------------------------------------

(program
  (list
    (map
      (keyword_list
        (keyword
          (keyword_literal))
        (identifier)))
    (struct
      (module)
      (keyword_list
        (keyword
          (keyword_literal))
        (identifier)))
    (tuple
      (identifier)
      (identifier))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (identifier)))
    (binary
      (identifier)
      (identifier))))

================================================================================
atom escape
================================================================================
:"a\'##{}"

--------------------------------------------------------------------------------

(program
  (atom
    (atom_start)
    (atom_content)
    (escape_sequence)
    (atom_content)
    (interpolation)
    (atom_end)))

================================================================================
heredoc escape
================================================================================

r"""
\["\$callers"
\$"#{}
\$"#
"""

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (heredoc
      (heredoc_start)
      (heredoc_content)
      (escape_sequence)
      (heredoc_content)
      (escape_sequence)
      (heredoc_content)
      (escape_sequence)
      (heredoc_content)
      (interpolation)
      (heredoc_content)
      (escape_sequence)
      (heredoc_content)
      (heredoc_end))))

================================================================================
multiline interpolation
================================================================================

raise ArgumentError,
        message:
          "the option #{option_name} need arguments. Be sure to pass arguments to option_#{prefix}#{
            option_name
          }(arg)"

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (module)
    (keyword_list
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (interpolation
          (identifier))
        (string_content)
        (interpolation
          (identifier))
        (interpolation
          (identifier))
        (string_content)
        (string_end)))))

================================================================================
keyword with special chars
================================================================================
[
 [_12: 0],
 [ola: 0],
 [ólá: 0],
 [ólá?: 0],
 [ólá!: 0],
 [ól@: 0],
 [ól@!: 0],
 [ó@@!: 0],
 [Ola: 0],
 [Ólá: 0],
 [ÓLÁ: 0],
 [ÓLÁ?: 0],
 [ÓLÁ!: 0],
 [ÓL@!: 0],
 [Ó@@!: 0],
 [こんにちは世界: 0],
]

--------------------------------------------------------------------------------

(program
  (list
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))
    (list
      (keyword_list
        (keyword
          (keyword_literal))
        (integer)))))

================================================================================
operator keyword
================================================================================

[
  when: "when",
  in: "in",
  not: "not",
  and: "and",
  or: "or",
]

--------------------------------------------------------------------------------

(program
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword
        (keyword_literal))
      (string
        (string_start)
        (string_content)
        (string_end)))))

================================================================================
string with #
================================================================================

"##{1}"

--------------------------------------------------------------------------------

(program
  (string
    (string_start)
    (string_content)
    (interpolation
      (integer))
    (string_end)))

================================================================================
linebreak followed by operator keyword
================================================================================

[
@: 1]

[
.: 1]

[
+: 1]

[
-: 1]

[
!: 1]

[
^: 1]

[
~~~: 1]

[
*: 1]

[
/: 1]

[
+: 1]

[
-: 1]

[
++: 1]

[
--: 1]

[
..: 1]

[
...: 1]

[
<>: 1]

[
+++: 1]

[
---: 1]

[
^^^: 1]

[
|>: 1]

[
<<<: 1]

[
>>>: 1]

[
<<~: 1]

[
~>>: 1]

[
<~: 1]

[
~>: 1]

[
<~>: 1]

[
<|>: 1]

[
<: 1]

[
>: 1]

[
<=: 1]

[
>=: 1]

[
==: 1]

[
!=: 1]

[
=~: 1]

[
===: 1]

[
!==: 1]

[
&&: 1]

[
&&&: 1]

[
||: 1]

[
|||: 1]

[
=: 1]

[
&: 1]

[
|: 1]

[
<-: 1]

[
when: 1]

[
or: 1]

[
and: 1]

[
not: 1]

[
in: 1]

--------------------------------------------------------------------------------

(program
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer)))
  (list
    (keyword_list
      (keyword
        (keyword_literal))
      (integer))))

================================================================================
escaped binary
================================================================================

"Interspersed \x{ff} codes \7 \8 \65 \016 and \t\s\\s\z\+ \\ escapes"

--------------------------------------------------------------------------------

(program
  (string
    (string_start)
    (string_content)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (escape_sequence)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (escape_sequence)
    (string_content)
    (escape_sequence)
    (string_content)
    (string_end)))
