================================================================================
pragma: inline
================================================================================

a = a
{-# inline a #-}

a = a
{-# inline conlike [1] a #-}
{-#INLINE [~2] a#-}

---

(module
 (function (variable) (exp_name (variable)))
 (pragma)
 (function (variable) (exp_name (variable)))
 (pragma)
 (pragma))


================================================================================
pragma: without module
================================================================================

{-# LANGUAGE LambdaCase #-}
{-# language ScopedTypeVariables, DataKinds #-}

---

(module (pragma) (pragma) (empty_file))

================================================================================
pragma: before module
================================================================================

{-# language LambdaCase #-}
{-# language ScopedTypeVariables, DataKinds #-}
module A where

---

(module
  (pragma)
  (pragma)
  (modid (constructor))
  (where))

================================================================================
pragma: instance
================================================================================

instance {-# overlappable #-} A where

---

(module (instance (pragma) (instance_head (class_name (type))) (where)))

================================================================================
pragma: multiline
================================================================================

module A where
{-# rules
      "a/a" [2] forall a . a a = a
  #-}

---

(module (modid (constructor)) (where) (pragma))
