==================
Multiplication expression
==================

45 * 3

---

(source_file (multiplicative_expression (integer_literal) (integer_literal)))

==================
Function calls
==================

print("Hello World!")
sum(1, 2)

---

(source_file
  (call_expression (simple_identifier)
    (call_suffix (value_arguments
      (value_argument (line_string_literal)))))
  (call_expression (simple_identifier)
    (call_suffix (value_arguments
      (value_argument (integer_literal))
      (value_argument (integer_literal))))))

==================
When expression
==================

val x = 1
val y = when(x){
        1 -> true
        2 -> false
    }

---

(source_file
  (property_declaration
    (variable_declaration (simple_identifier))
    (integer_literal))
  (property_declaration
    (variable_declaration (simple_identifier))
    (when_expression
      (when_subject (simple_identifier))
      (when_entry (when_condition (integer_literal))
        (control_structure_body (boolean_literal)))
      (when_entry (when_condition (integer_literal))
        (control_structure_body (boolean_literal))))))

==================
Expect as an expression
==================

val x = expect(1)

---
(source_file
   (property_declaration
     (variable_declaration (simple_identifier))
     (call_expression (simple_identifier)
        (call_suffix (value_arguments (value_argument (integer_literal)))))))

==================
Expect as a top-level expression
==================

expect(1)

---
(source_file
  (call_expression (simple_identifier)
    (call_suffix (value_arguments (value_argument (integer_literal))))))

==================
Expect as a platform modifier
==================

expect fun randomUUID(): String

---
(source_file
  (function_declaration
     (modifiers (platform_modifier))
     (simple_identifier)
     (user_type (type_identifier))))

==================
Less than for generics
==================

foo<Int>(1,2)
foo<Int>(1)

---
(source_file
  (call_expression (simple_identifier)
    (call_suffix
      (type_arguments (type_projection (user_type (type_identifier))))
      (value_arguments (value_argument (integer_literal))
                       (value_argument (integer_literal)))))
  (call_expression (simple_identifier)
    (call_suffix
      (type_arguments (type_projection (user_type (type_identifier))))
      (value_arguments (value_argument (integer_literal))))))


==================
Less than for comparison
==================

val x = a<b
val y = a>b
val z = a<b>c
// this is parsed as a generic, but could also be parsed as a comparison
val w = a<b>(c)
val a = a<2>(3)

---
(source_file
  (property_declaration (variable_declaration (simple_identifier))
     (comparison_expression (simple_identifier) (simple_identifier)))
  (property_declaration (variable_declaration (simple_identifier))
     (comparison_expression (simple_identifier) (simple_identifier)))
  (property_declaration (variable_declaration (simple_identifier))
     (comparison_expression
        (comparison_expression (simple_identifier) (simple_identifier))
        (simple_identifier)))
  (comment)
  (property_declaration (variable_declaration (simple_identifier))
    (call_expression (simple_identifier)
       (call_suffix
         (type_arguments (type_projection (user_type (type_identifier))))
       (value_arguments (value_argument (simple_identifier))))))
  (property_declaration (variable_declaration (simple_identifier))
      (comparison_expression
         (comparison_expression (simple_identifier) (integer_literal))
         (parenthesized_expression (integer_literal)))))
