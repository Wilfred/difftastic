========================================
dart if statements
========================================

if (z) return n;

---

(program
(if_statement
      (parenthesized_expression (identifier))
      (return_statement (identifier))))

=========================================
dart string literals
=========================================

get a => "";
get a => "\"";
get a => "This' is a string $mystring";
get a => '''This" is a
string ${mystring}''';
get a => 'Also a string';

---

(program
  (identifier) (function_body (string_literal))
  (identifier) (function_body (string_literal (escape_sequence)))
  (identifier) (function_body (string_literal (template_substitution (identifier))))
  (identifier) (function_body (string_literal (template_substitution (identifier))))
  (identifier) (function_body (string_literal)))

=========================================
dart string literals 2
=========================================

get a => "";
get a => "\"";
get a => """This' is a string $mystring""";
get a => '''This" is a $
string mystring''';
get a => '''Also a string''';

---

(program
  (identifier) (function_body (string_literal))
  (identifier) (function_body (string_literal (escape_sequence)))
  (identifier) (function_body (string_literal (template_substitution (identifier))))
    (identifier) (function_body (string_literal))
  (identifier) (function_body (string_literal)))
=========================================
dart string literals raw
=========================================

get a => "";
get a => r"\"";
get a => """This' is a string $mystring""";
get a => '''This" is a $
string mystring''';
get a => r'''Also a string''';

---

(program
 (identifier) (function_body  (string_literal))
  (identifier) (function_body (string_literal))
  (identifier) (function_body (string_literal (template_substitution (identifier))))
    (identifier) (function_body (string_literal))
  (identifier) (function_body (string_literal)))

==================================================
dart set literals
==================================================

class A {
  int b() {
    var c = {vala};
    var c = {vala: 'g'};
  }
}

---

(program
  (class_definition
    name: (identifier)
    body: (class_body
      (method_signature (function_signature
        (type_identifier)
        name: (identifier)
        (formal_parameter_list)))
        (function_body (block
          (local_variable_declaration
          (initialized_variable_definition

            (inferred_type)

              name: (identifier)
              value: (set_or_map_literal (identifier))
              ))
           (local_variable_declaration
           (initialized_variable_definition

              (inferred_type)
              name: (identifier)
              value: (set_or_map_literal (pair key: (identifier) value: (string_literal)))
           )
           ))
              ))))

==================================================
embedded control flow for collections
==================================================

class A {
  int b() {
    var c = {if (z) vala};
    var c = {vala: 'g'};
  }
}

---

(program
  (class_definition
    name: (identifier)
    body: (class_body
      (method_signature (function_signature
        (type_identifier)
        name: (identifier)
        (formal_parameter_list)))
        (function_body (block
          (local_variable_declaration
          (initialized_variable_definition
                      (inferred_type)
                        name: (identifier)
                        value: (set_or_map_literal (if_element
                        condition: (parenthesized_expression (identifier))
                        consequence: (identifier)
                        ))
          )
              )
           (local_variable_declaration
           (initialized_variable_definition
                        (inferred_type)
                         name: (identifier)
                         value: (set_or_map_literal (pair key: (identifier) value: (string_literal)))
           )
              ))
              )
              )))
===================
Positional Parameters
===================

class Beyonce {
  void calculateAnswer(double wingSpan, int numberOfEngines,
                       [double length, double grossTons]) {
      //do the calculation here
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list
          (formal_parameter (type_identifier) (identifier))
          (formal_parameter (type_identifier) (identifier))
          (optional_formal_parameters
          (formal_parameter (type_identifier) (identifier))
          (formal_parameter (type_identifier) (identifier))))))
        (function_body (block (comment))))))

==================================================
collection trailing commas
==================================================

final map = {"hello": "world",};
final set = {"hello", "world"};

---

(program 
  (local_variable_declaration (initialized_variable_definition (inferred_type) (identifier) 
    (set_or_map_literal (pair (string_literal) (string_literal))))) 
  (local_variable_declaration (initialized_variable_definition (inferred_type) (identifier) 
    (set_or_map_literal (string_literal) (string_literal)))))