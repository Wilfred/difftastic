================================================================================
case multi clause
================================================================================

case s do
  1 -> "a"
  2 -> "b"
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (stab_expression
        (bare_arguments
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
case single clause
================================================================================

case s do
  {a} -> "b"
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (tuple
            (identifier)))
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
case multi clause multi line body
================================================================================

case s do
  1 -> "a"
  2 ->
    a.call()
    5
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (stab_expression
        (bare_arguments
          (integer))
        (dot_call
          (identifier)
          (identifier)
          (arguments))
        (integer)))))

================================================================================
case with guards
================================================================================

case 1 do
 x when hd(x) -> "Won't match"
 x -> "Got " <> y
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (integer)
    (do_block
      (stab_expression
        (bare_arguments
          (binary_op
            (identifier)
            (call
              (identifier)
              (arguments
                (identifier)))))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (stab_expression
        (bare_arguments
          (identifier))
        (binary_op
          (string
            (string_start)
            (string_content)
            (string_end))
          (identifier))))))

================================================================================
case line break
================================================================================

case args do
  ["callers", callee] ->
    callers(callee, opts)

  ["graph"] ->
    graph(opts)
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (list
            (string
              (string_start)
              (string_content)
              (string_end))
            (identifier)))
        (call
          (identifier)
          (arguments
            (identifier)
            (identifier))))
      (stab_expression
        (bare_arguments
          (list
            (string
              (string_start)
              (string_content)
              (string_end))))
        (call
          (identifier)
          (arguments
            (identifier)))))))

================================================================================
case binary line break
================================================================================

case x do
  <<"sigil_", name>> when name >= ?A and name <= ?Z ->
    a
  <<"sigil_", name>> when name >= ?a and name <= ?z ->
    b
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (binary_op
            (binary
              (string
                (string_start)
                (string_content)
                (string_end))
              (identifier))
            (binary_op
              (binary_op
                (identifier)
                (char))
              (binary_op
                (identifier)
                (char)))))
        (identifier))
      (stab_expression
        (bare_arguments
          (binary_op
            (binary
              (string
                (string_start)
                (string_content)
                (string_end))
              (identifier))
            (binary_op
              (binary_op
                (identifier)
                (char))
              (binary_op
                (identifier)
                (char)))))
        (identifier)))))

================================================================================
case with unary ops
================================================================================

case order do
  1 -> and_op([%{field => %{"$gt" => value}} | acc])
  -1 -> and_op([%{field => %{"$lt" => value}} | acc])
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (integer))
        (call
          (identifier)
          (arguments
            (list
              (binary_op
                (map
                  (binary_op
                    (identifier)
                    (map
                      (binary_op
                        (string
                          (string_start)
                          (string_content)
                          (string_end))
                        (identifier)))))
                (identifier))))))
      (stab_expression
        (bare_arguments
          (unary_op
            (integer)))
        (call
          (identifier)
          (arguments
            (list
              (binary_op
                (map
                  (binary_op
                    (identifier)
                    (map
                      (binary_op
                        (string
                          (string_start)
                          (string_content)
                          (string_end))
                        (identifier)))))
                (identifier)))))))))

================================================================================
case multiline clause
================================================================================

case 1 do
  1 ->
    :ok = :ok
    foo

  [] ->
    2
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (integer)
    (do_block
      (stab_expression
        (bare_arguments
          (integer))
        (binary_op
          (atom
            (atom_literal))
          (atom
            (atom_literal)))
        (identifier))
      (stab_expression
        (bare_arguments
          (list))
        (integer)))))
