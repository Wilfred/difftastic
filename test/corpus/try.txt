================================================================================
try
================================================================================

try do
  do_something_that_may_fail(some_arg)
rescue
  ArgumentError ->
    IO.puts("Invalid argument given")
catch
  value ->
    IO.puts("Caught #{inspect(value)}")
else
  value ->
    IO.puts("Success! The result was #{inspect(value)}")
after
  IO.puts("This is printed regardless if it failed or succeeded")
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (call
        (identifier)
        (arguments
          (identifier)))
      (rescue_block
        (stab_expression
          (bare_arguments
            (module))
          (dot_call
            (module)
            (identifier)
            (arguments
              (string
                (string_start)
                (string_content)
                (string_end))))))
      (catch_block
        (stab_expression
          (bare_arguments
            (identifier))
          (dot_call
            (module)
            (identifier)
            (arguments
              (string
                (string_start)
                (string_content)
                (interpolation
                  (call
                    (identifier)
                    (arguments
                      (identifier))))
                (string_end))))))
      (else_block
        (stab_expression
          (bare_arguments
            (identifier))
          (dot_call
            (module)
            (identifier)
            (arguments
              (string
                (string_start)
                (string_content)
                (interpolation
                  (call
                    (identifier)
                    (arguments
                      (identifier))))
                (string_end))))))
      (after_block
        (dot_call
          (module)
          (identifier)
          (arguments
            (string
              (string_start)
              (string_content)
              (string_end))))))))

================================================================================
try with rescue only
================================================================================

try do
  UndefinedModule.undefined_function
rescue
  x in [UndefinedFunctionError] -> nil
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (dot_call
        (module)
        (identifier))
      (rescue_block
        (stab_expression
          (bare_arguments
            (binary_op
              (identifier)
              (list
                (module))))
          (nil))))))

================================================================================
try catch
================================================================================

try do
  exit(:shutdown)
catch
  :exit, value ->
    IO.puts("Exited with value #{inspect(value)}")
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (call
        (identifier)
        (arguments
          (atom
            (atom_literal))))
      (catch_block
        (stab_expression
          (bare_arguments
            (atom
              (atom_literal))
            (identifier))
          (dot_call
            (module)
            (identifier)
            (arguments
              (string
                (string_start)
                (string_content)
                (interpolation
                  (call
                    (identifier)
                    (arguments
                      (identifier))))
                (string_end)))))))))

================================================================================
try rescue else
================================================================================

try do
  1 / x
rescue
  ArithmeticError ->
    :infinity
else
  y when y < 1 and y > 5 ->
    :small
  _ ->
    :large
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (binary_op
        (integer)
        (identifier))
      (rescue_block
        (stab_expression
          (bare_arguments
            (module))
          (atom
            (atom_literal))))
      (else_block
        (stab_expression
          (bare_arguments
            (binary_op
              (identifier)
              (binary_op
                (binary_op
                  (identifier)
                  (integer))
                (binary_op
                  (identifier)
                  (integer)))))
          (atom
            (atom_literal)))
        (stab_expression
          (bare_arguments
            (identifier))
          (atom
            (atom_literal)))))))

================================================================================
try after
================================================================================

try do
  do_something_with("tmp/story.txt")
after
  File.rm("tmp/story.txt")
end

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    (do_block
      (call
        (identifier)
        (arguments
          (string
            (string_start)
            (string_content)
            (string_end))))
      (after_block
        (dot_call
          (module)
          (identifier)
          (arguments
            (string
              (string_start)
              (string_content)
              (string_end))))))))
