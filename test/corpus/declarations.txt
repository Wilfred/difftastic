===============
local variable
===============

class A {
  int b() {
    int c = 5;
  }
}

---

(program
  (class_definition
    name: (identifier)
    body: (class_body
      (method_signature (function_signature
         (type_identifier)
         name: (identifier)
         (formal_parameter_list))
        )
        (function_body (block
          (local_variable_declaration (initialized_variable_definition
          (type_identifier)
              name: (identifier)
              value: (decimal_integer_literal))))))))

===============================
single type import declaration
===============================

import 'package:dektor/catalog.dart';

---

(program (import_or_export (library_import (import_specification  (configurable_uri (uri (string_literal)))))))

===========================
type_import_on_declaraction
===========================

import 'package:dektor/catalog.dart';

---

(program (import_or_export (library_import (import_specification  (configurable_uri (uri (string_literal)))))))

=================================
single static import declaration
=================================

import 'package:dektor/catalog.dart';

---

(program (import_or_export (library_import (import_specification (configurable_uri (uri (string_literal)))))))

===================================
static import on demand declaration
===================================

import 'package:dektor/catalog.dart';

---

(program (import_or_export (library_import (import_specification  (configurable_uri (uri (string_literal)))))))

=================
class declaration
=================

class Point {
}

---

(program
  (class_definition
    (identifier)
      (class_body)))

=====================================================================
class declaration involving public, private, abstract and superclass
=====================================================================

class Point {
}

class Point {
}

abstract class ColoredPoint extends Point {
}

---

(program
  (class_definition  (identifier) (class_body))
  (class_definition  (identifier) (class_body))
  (class_definition (identifier) (superclass (type_identifier)) (class_body)))

==================================
class declaration with implements
==================================

 class Dog implements ISpeak {
}

---

(program
  (class_definition
     (identifier)
     (interfaces (type_identifier)) (class_body)))

============================
class declaration with body
============================

class Point {
  var x;
  var s = 'g';

  void bar() {
    x = 2;
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (declaration
        (inferred_type)
        (initialized_identifier_list (initialized_identifier (identifier))))
       (declaration
        (inferred_type)
        (initialized_identifier_list
        (initialized_identifier
                (identifier)
                (string_literal))))
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list)))
        (function_body
        (block
          (expression_statement
            (assignment_expression (assignable_expression (identifier)) (decimal_integer_literal))))))))

===================
method declaration
===================

class Beyonce {
  void calculateAnswer(double wingSpan, int numberOfEngines,
                       double length, double grossTons) {
      //do the calculation here
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list
          (formal_parameter (type_identifier) (identifier))
          (formal_parameter (type_identifier) (identifier))
          (formal_parameter (type_identifier) (identifier))
          (formal_parameter (type_identifier) (identifier))))
        )
        (function_body
        (block (comment))))))

========================
constructor declaration
========================

class Point {
  int x, y;
  Point(int x, int y) {
    this.x = x;
    this.y = y;
  }

  Point.json() {
    this(0, 0);
  }
  Point.json(this.x, this.y);
}

---

(program
  (class_definition
    name: (identifier)
    body: (class_body
      (declaration
        (type_identifier)
        (initialized_identifier_list
        (initialized_identifier (identifier))
        (initialized_identifier (identifier))
        )
        )
      (method_signature (constructor_signature
        name: (identifier)
        parameters: (formal_parameter_list
          (formal_parameter
             (type_identifier)
            name: (identifier))
          (formal_parameter
             (type_identifier)
            name: (identifier)))))
        (function_body
          (block (expression_statement (assignment_expression
            left: (assignable_expression
                    (this)
                (assignable_selector_part
                    (assignable_selector
                        (unconditional_assignable_selector (identifier))
                    )
                )
             )
            right: (identifier))
            )
          (expression_statement (assignment_expression
              left: (assignable_expression
                      (this)
                  (assignable_selector_part
                      (assignable_selector
                          (unconditional_assignable_selector (identifier))
                      )
                  )
               )
              right: (identifier))
          )
            ))
      (method_signature (constructor_signature
        name: (identifier)
        name: (identifier)
        parameters: (formal_parameter_list)))
        (function_body
            (block
                (expression_statement
                      (this)
                      (selector
                            (argument_part
                                    (arguments
                                        (decimal_integer_literal)
                                        (decimal_integer_literal)
                                    )
                            )
                      )

                )
            )
         )
      (declaration
          (constructor_signature
            name: (identifier)
            name: (identifier)
            parameters: (formal_parameter_list
                (formal_parameter (constructor_param (this) (identifier)))
                (formal_parameter (constructor_param (this) (identifier)))
            )
          )
      )
    )
  )
)

======================
object instantiation
======================

class Point {
  double Foo() {
    new BufferedWriter();
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (method_signature (function_signature
        (type_identifier)
        (identifier)
        (formal_parameter_list))
        )
        (function_body (block
          (expression_statement
            (new_expression
              (type_identifier)
              (arguments)))
          )))))

=====================
variable declaration
=====================

class JayZ {
  void Beyonce() {
    int blue_ivy_carter;
  }
}

---

(program
  (class_definition
    (identifier)
    (class_body
      (method_signature (function_signature
        (void_type)
        (identifier)
        (formal_parameter_list)))
        (function_body
        (block
          (local_variable_declaration (initialized_variable_definition
             (type_identifier)
              (identifier))))))))

=================
enum declaration
=================

enum HandSign {
   SCISSOR, PAPER, STONE
}

---

(program
  (enum_declaration
    name: (identifier)
    body: (enum_body
      (enum_constant name: (identifier))
      (enum_constant name: (identifier))
      (enum_constant name: (identifier)))))


=================
variable inferred type declaration
=================

var x = 0;
final y = 1.0;
const z = "100";

---

(program 
  (local_variable_declaration (initialized_variable_definition (inferred_type) (identifier) (decimal_integer_literal))) 
  (local_variable_declaration (initialized_variable_definition (inferred_type) (identifier) (decimal_floating_point_literal))) 
  (local_variable_declaration (initialized_variable_definition (inferred_type) (identifier) (string_literal))))