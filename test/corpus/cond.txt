================================================================================
cond multi clause
================================================================================

cond do
  1 -> "a"
  2 -> "b"
end

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (stab_expression
        (bare_arguments
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
cond single clause
================================================================================

cond do
  {a} -> "b"
end

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (tuple
            (identifier)))
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
cond multi clause multi line body
================================================================================

cond do
  1 -> "a"
  2 ->
    a.call()
    5
end

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (stab_expression
        (bare_arguments
          (integer))
        (dot_call
          (identifier)
          (function_identifier)
          (arguments))
        (integer)))))

================================================================================
cond with parens
================================================================================

cond do
  (negated = false) && :boolean in List.wrap(b) ->
    1
  true ->
    :unknown
end

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (do_block
      (stab_expression
        (bare_arguments
          (binary_op
            (block
              (binary_op
                (identifier)
                (false)))
            (binary_op
              (atom
                (atom_literal))
              (dot_call
                (module)
                (function_identifier)
                (arguments
                  (identifier))))))
        (integer))
      (stab_expression
        (bare_arguments
          (true))
        (atom
          (atom_literal))))))
