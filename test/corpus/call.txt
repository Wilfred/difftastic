================================================================================
module parens call
================================================================================

A.B.c("a")

--------------------------------------------------------------------------------

(program
  (dot_call
    (module)
    (function_identifier)
    (arguments
      (string
        (string_start)
        (string_content)
        (string_end)))))

================================================================================
bare keyword list
================================================================================

Module.func!(
  args,
  aliases: [r: :require, p: :parallel, e: :eval, c: :config],
  strict: [
    parallel: :boolean,
    require: :keep
  ]
)

--------------------------------------------------------------------------------

(program
  (dot_call
    (module)
    (function_identifier)
    (arguments
      (identifier)
      (keyword_list
        (keyword
          (keyword_literal))
        (list
          (keyword_list
            (keyword
              (keyword_literal))
            (atom
              (atom_literal))
            (keyword
              (keyword_literal))
            (atom
              (atom_literal))
            (keyword
              (keyword_literal))
            (atom
              (atom_literal))
            (keyword
              (keyword_literal))
            (atom
              (atom_literal))))
        (keyword
          (keyword_literal))
        (list
          (keyword_list
            (keyword
              (keyword_literal))
            (atom
              (atom_literal))
            (keyword
              (keyword_literal))
            (atom
              (atom_literal))))))))

================================================================================
local var call
================================================================================

a.()()

--------------------------------------------------------------------------------

(program
  (call
    (dot_call
      (remote_identifier)
      (arguments))
    (arguments)))

================================================================================
operator call
================================================================================

Kernel.+(1, 1)

--------------------------------------------------------------------------------

(program
  (dot_call
    (module)
    (function_identifier)
    (arguments
      (integer)
      (integer))))

================================================================================
reserved word call
================================================================================

a.and

--------------------------------------------------------------------------------

(program
  (dot_call
    (remote_identifier)
    (function_identifier)))

================================================================================
access call followed by dot call
================================================================================

cover[:tool].start(compile_path, cover)

--------------------------------------------------------------------------------

(program
  (dot_call
    (access_call
      (identifier)
      (atom
        (atom_literal)))
    (function_identifier)
    (arguments
      (identifier)
      (identifier))))

================================================================================
qualified call followed by dot call
================================================================================

quote do
  unquote(__MODULE__).profile(
    fn ->
      unquote(Code.string_to_quoted!(code_string))
    end,
    unquote(Macro.escape(Enum.map(opts, &parse_opt/1)))
  )
end

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (do_block
      (dot_call
        (call
          (function_identifier)
          (arguments
            (identifier)))
        (function_identifier)
        (arguments
          (anonymous_function
            (stab_expression
              (call
                (function_identifier)
                (arguments
                  (dot_call
                    (module)
                    (function_identifier)
                    (arguments
                      (identifier)))))))
          (call
            (function_identifier)
            (arguments
              (dot_call
                (module)
                (function_identifier)
                (arguments
                  (dot_call
                    (module)
                    (function_identifier)
                    (arguments
                      (identifier)
                      (unary_op
                        (binary_op
                          (identifier)
                          (integer))))))))))))))

================================================================================
keyword args
================================================================================

if true do
  raise Error, a: 1, b: 2, c: 3
end

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (true)
    (do_block
      (call
        (function_identifier)
        (module)
        (keyword_list
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer))))))

================================================================================
captured arg dot call
================================================================================

[1]
|> Enum.map(& &1.app)

--------------------------------------------------------------------------------

(program
  (binary_op
    (list
      (integer))
    (dot_call
      (module)
      (function_identifier)
      (arguments
        (unary_op
          (dot_call
            (unary_op
              (integer))
            (function_identifier)))))))

================================================================================
captured arg qualified dot call
================================================================================

Enum.reduce(funcs, result, & &1.(&2))

--------------------------------------------------------------------------------

(program
  (dot_call
    (module)
    (function_identifier)
    (arguments
      (identifier)
      (identifier)
      (unary_op
        (dot_call
          (unary_op
            (integer))
          (arguments
            (unary_op
              (integer))))))))

================================================================================
alias
================================================================================

alias ExUnit.{FailuresManifest, Test}

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (dot_call
      (module)
      (tuple
        (module)
        (module)))))

================================================================================
import
================================================================================

import Kernel, except: [@: 1, defmodule: 2, def: 1, def: 2, defp: 2, defmacro: 1, defmacro: 2, defmacrop: 2]

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (module)
    (keyword_list
      (keyword
        (keyword_literal))
      (list
        (keyword_list
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer)
          (keyword
            (keyword_literal))
          (integer))))))

================================================================================
capture mfa
================================================================================

&Kernel.is_atom/1

--------------------------------------------------------------------------------

(program
  (unary_op
    (binary_op
      (dot_call
        (module)
        (function_identifier))
      (integer))))

================================================================================
capture local
================================================================================

&local_function/1

--------------------------------------------------------------------------------

(program
  (unary_op
    (binary_op
      (identifier)
      (integer))))

================================================================================
anonymous capture
================================================================================

double = &(&1 * 2)

--------------------------------------------------------------------------------

(program
  (binary_op
    (identifier)
    (unary_op
      (block
        (binary_op
          (unary_op
            (integer))
          (integer))))))

================================================================================
operator capture
================================================================================

&>=/2

--------------------------------------------------------------------------------

(program
  (unary_op
    (binary_op
      (integer))))

================================================================================
string dot call
================================================================================

:erlang."=<"(left, right)

--------------------------------------------------------------------------------

(program
  (dot_call
    (atom
      (atom_literal))
    (string
      (string_start)
      (string_content)
      (string_end))
    (arguments
      (identifier)
      (identifier))))

================================================================================
macro call
================================================================================

h(== / 2)

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (arguments
      (binary_op
        (integer)))))

================================================================================
pin on %
================================================================================

assert_diff(
  %^type{age: ^age, name: "john"} = %User{name: "john", age: 33},
  [],
  pins
)

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (arguments
      (binary_op
        (struct
          (identifier)
          (keyword_list
            (keyword
              (keyword_literal))
            (unary_op
              (identifier))
            (keyword
              (keyword_literal))
            (string
              (string_start)
              (string_content)
              (string_end))))
        (struct
          (module)
          (keyword_list
            (keyword
              (keyword_literal))
            (string
              (string_start)
              (string_content)
              (string_end))
            (keyword
              (keyword_literal))
            (integer))))
      (list)
      (identifier))))

================================================================================
range call
================================================================================

assert (1..3).last == 3

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (binary_op
      (dot_call
        (paren_expr
          (binary_op
            (integer)
            (integer)))
        (function_identifier))
      (integer))))

================================================================================
atom on %
================================================================================

%:"Elixir.Module.Types.PatternTest.Struct"{}

--------------------------------------------------------------------------------

(program
  (struct
    (atom
      (atom_start)
      (atom_content)
      (atom_end))))

================================================================================
map call
================================================================================

%{foo: :bar}.foo

--------------------------------------------------------------------------------

(program
  (dot_call
    (map
      (keyword_list
        (keyword
          (keyword_literal))
        (atom
          (atom_literal))))
    (function_identifier)))

================================================================================
quoted struct
================================================================================

quote do
  %unquote(User){foo: 1}
end

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (do_block
      (struct
        (call
          (function_identifier)
          (arguments
            (module)))
        (keyword_list
          (keyword
            (keyword_literal))
          (integer))))))

================================================================================
chained string qualified call
================================================================================

Macro.to_string(quote(do: Foo."bar baz"().""())) == ~s/Foo."bar baz"().""()/

--------------------------------------------------------------------------------

(program
  (binary_op
    (dot_call
      (module)
      (function_identifier)
      (arguments
        (call
          (function_identifier)
          (arguments
            (keyword_list
              (keyword
                (keyword_literal))
              (dot_call
                (dot_call
                  (module)
                  (string
                    (string_start)
                    (string_content)
                    (string_end))
                  (arguments))
                (string
                  (string_start)
                  (string_end))
                (arguments)))))))
    (sigil
      (sigil_start)
      (sigil_content)
      (sigil_end))))

================================================================================
integer call
================================================================================

1.(1, 2, 3)

--------------------------------------------------------------------------------

(program
  (dot_call
    (integer)
    (arguments
      (integer)
      (integer)
      (integer))))

================================================================================
string dot call without args
================================================================================

inspect(&__MODULE__."weirdly named/fun-"/0)

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (arguments
      (unary_op
        (binary_op
          (dot_call
            (remote_identifier)
            (string
              (string_start)
              (string_content)
              (string_end)))
          (integer))))))

================================================================================
capture operator
================================================================================

is_function(&and/2)

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (arguments
      (unary_op
        (binary_op
          (integer))))))

================================================================================
escaped newline
================================================================================

a \
b

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (identifier)))

================================================================================
anonymous function call
================================================================================

Enum.join(" ")
|> fn(command) -> "MIX_ENV=test #{command}" end.()

--------------------------------------------------------------------------------

(program
  (binary_op
    (dot_call
      (module)
      (function_identifier)
      (arguments
        (string
          (string_start)
          (string_content)
          (string_end))))
    (dot_call
      (anonymous_function
        (stab_expression
          (bare_arguments
            (block
              (identifier)))
          (string
            (string_start)
            (string_content)
            (interpolation
              (identifier))
            (string_end))))
      (arguments))))

================================================================================
captured operator call
================================================================================

[&Kernel.<=/2, &Kernel.>=/2, &Kernel.</2, &Kernel.>/2]

--------------------------------------------------------------------------------

(program
  (list
    (unary_op
      (binary_op
        (dot_call
          (module)
          (function_identifier))
        (integer)))
    (unary_op
      (binary_op
        (dot_call
          (module)
          (function_identifier))
        (integer)))
    (unary_op
      (binary_op
        (dot_call
          (module)
          (function_identifier))
        (integer)))
    (unary_op
      (binary_op
        (dot_call
          (module)
          (function_identifier))
        (integer)))))

================================================================================
struct call
================================================================================

%Inspect.Opts{}.width

--------------------------------------------------------------------------------

(program
  (dot_call
    (struct
      (module))
    (function_identifier)))

================================================================================
bare keyword hanging comma
================================================================================

call(a: a, b: b,
)

--------------------------------------------------------------------------------

(program
  (call
    (function_identifier)
    (arguments
      (keyword_list
        (keyword
          (keyword_literal))
        (identifier)
        (keyword
          (keyword_literal))
        (identifier)))))

================================================================================
newline before dot
================================================================================

IO
  .inspect("hello")

--------------------------------------------------------------------------------

(program
  (dot_call
    (module)
    (function_identifier)
    (arguments
      (string
        (string_start)
        (string_content)
        (string_end)))))

================================================================================
newline after dot
================================================================================

IO.
  inspect("hello")

--------------------------------------------------------------------------------

(program
  (dot_call
    (module)
    (function_identifier)
    (arguments
      (string
        (string_start)
        (string_content)
        (string_end)))))
