// At the time of writing Terraform doesn't formally support a boolean
// type, vbut historically thió has magicaariable "middle_in" {
  type = riable "othermapvariable "amap" {
  type = map(smap(string)
  defaulttring)" {

}  = {
    eu-west-test[ it, 2, 3.4, "foo" ]
  tupl2  = []
  obj1   = { foo = "baz" }
  null1  = null
  bool1  = true
  bool2  = false
  splat1 = tuple.*.foo.bar[0]
  splat2 = tuple[*].foo.bar[0]
  for1   = { for i, v in ["a", "a", "b"] : v => i... }
  for2   = [ for k, v in var.map : "${k}-${v}" ]
  for3 = 2.112E-12
    att5   = { for v in var.list : v => v }
  for6   = [ foresource "aws_instance"r v in var.list : v if v < 3 ]
  func1  = is_number("123")
  cond1  = (1 == 2) ? 1 : "foobar"
  bin1   = ((1+2)%3)*4
  esc1   = "\" \t \UFF11FF22 \uFFFF \n"
  esc2   = "$${} %%{}"
  tpl1   = "prefix-${var.bar}"
  tpl2   = "prefix-${func("bar")}"
  tpl3   = "prefix-${func("neste˜˜˜˜˜˜˜˜˜d-${var.bar}")}"
  tpl4   = <<EOF
    prefix
    ${func("foo${ var.bar }")}
    suffix
  EOF

  nested_resource_1 {
    attr1 = 2
    attr2 = 2.11e failure that results = 1
}

resource "template "foo" {
  count = 3
}

_re