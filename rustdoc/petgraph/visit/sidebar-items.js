window.SIDEBAR_ITEMS = {"enum":[["Control","Control flow for `depth_first_search` callbacks."],["DfsEvent","A depth first search (DFS) visitor event."]],"fn":[["depth_first_search","A recursive depth first search."]],"struct":[["Bfs","A breadth first search (BFS) of a graph."],["Dfs","Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in preorder (when they are first discovered)."],["DfsPostOrder","Visit nodes in a depth-first-search (DFS) emitting nodes in postorder (each node after all its descendants have been emitted)."],["EdgeFiltered","An edge-filtering graph adaptor."],["EdgeFilteredEdges","A filtered edges iterator."],["EdgeFilteredNeighbors","A filtered neighbors iterator."],["EdgeFilteredNeighborsDirected","A filtered neighbors-directed iterator."],["NodeFiltered","A node-filtering graph adaptor."],["NodeFilteredEdgeReferences","A filtered edges iterator."],["NodeFilteredEdges","A filtered edges iterator."],["NodeFilteredNeighbors","A filtered neighbors iterator."],["NodeFilteredNodes","A filtered node references iterator."],["Reversed","An edge-reversing graph adaptor."],["ReversedEdgeReference","A reversed edge reference"],["ReversedEdgeReferences","A reversed edge references iterator."],["ReversedEdges","A reversed edges iterator."],["Time","Strictly monotonically increasing event time for a depth first search."],["Topo","A topological order traversal for a graph."],["WalkerIter","A walker and its context wrapped into an iterator."]],"trait":[["ControlFlow","Control flow for callbacks."],["Data","Define associated data for nodes and edges"],["EdgeCount","A graph with a known edge count."],["EdgeIndexable","The graph’s `NodeId`s map to indices"],["EdgeRef","An edge reference."],["FilterEdge","A graph filter for edges"],["FilterNode","A graph filter for nodes."],["GetAdjacencyMatrix","Create or access the adjacency matrix of a graph."],["GraphBase","Base graph trait: defines the associated node identifier and edge identifier types."],["GraphProp","Edge kind property (directed or undirected edges)"],["GraphRef","A copyable reference to a graph."],["IntoEdgeReferences","Access to the sequence of the graph’s edges"],["IntoEdges","Access to the edges of each node."],["IntoEdgesDirected","Access to all edges of each node, in the specified direction."],["IntoNeighbors","Access to the neighbors of each node"],["IntoNeighborsDirected","Access to the neighbors of each node, through incoming or outgoing edges."],["IntoNodeIdentifiers","Access to the sequence of the graph’s `NodeId`s."],["IntoNodeReferences","Access to the sequence of the graph’s nodes"],["NodeCompactIndexable","The graph’s `NodeId`s map to indices, in a range without holes."],["NodeCount","A graph with a known node count."],["NodeIndexable","The graph’s `NodeId`s map to indices"],["NodeRef","A node reference."],["VisitMap","A mapping for storing the visited status for NodeId `N`."],["Visitable","A graph that can create a map that tracks the visited status of its nodes."],["Walker","A walker is a traversal state, but where part of the traversal information is supplied manually to each next call."]]};