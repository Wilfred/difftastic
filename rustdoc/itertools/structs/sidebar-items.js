window.SIDEBAR_ITEMS = {"struct":[["Batching","A “meta iterator adaptor”. Its closure receives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element."],["Chunk","An iterator for the elements in a single chunk."],["Chunks","An iterator that yields the Chunk iterators."],["CircularTupleWindows","An iterator over all windows, wrapping back to the first elements when the window would otherwise exceed the length of the iterator, producing tuples of a specific size."],["Combinations","An iterator to iterate through all the `k`-length combinations in an iterator."],["CombinationsWithReplacement","An iterator to iterate through all the `n`-length combinations in an iterator, with replacement."],["ConsTuples","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`."],["ExactlyOneError","Iterator returned for the error case of `IterTools::exactly_one()` This iterator yields exactly the same elements as the input iterator."],["FilterMapOk","An iterator adapter to filter and apply a transformation on values within a nested `Result::Ok`."],["FilterOk","An iterator adapter to filter values within a nested `Result::Ok`."],["FlattenOk","An iterator adaptor that flattens `Result::Ok` values and allows `Result::Err` values through unchanged."],["Format","Format all iterator elements lazily, separated by `sep`."],["FormatWith","Format all iterator elements lazily, separated by `sep`."],["Group","An iterator for the elements in a single group."],["GroupBy","`GroupBy` is the storage for the lazy grouping operation."],["GroupingMap","`GroupingMap` is an intermediate struct for efficient group-and-fold operations. It groups elements by their key and at the same time fold each group using some aggregating operation."],["Groups","An iterator that yields the Group iterators."],["Interleave","An iterator adaptor that alternates elements from two iterators until both run out."],["InterleaveShortest","An iterator adaptor that alternates elements from the two iterators until one of them runs out."],["IntersperseWith","An iterator adaptor to insert a particular value created by a function between each element of the adapted iterator."],["IntoChunks","`ChunkLazy` is the storage for a lazy chunking operation."],["Iterate","An iterator that infinitely applies function to value and yields results."],["KMergeBy","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function."],["MergeBy","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted."],["MergeJoinBy","An iterator adaptor that merge-joins items from the two base iterators in ascending order."],["MultiPeek","See [`multipeek()`] for more information."],["MultiProduct","An iterator adaptor that iterates over the cartesian product of multiple iterators of type `I`."],["PadUsing","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure."],["PeekNth","See [`peek_nth()`] for more information."],["PeekingTakeWhile","An iterator adaptor that takes items while a closure returns `true`."],["Permutations","An iterator adaptor that iterates through all the `k`-permutations of the elements from an iterator."],["Positions","An iterator adapter to get the positions of each element that matches a predicate."],["Powerset","An iterator to iterate through the powerset of the elements from an iterator."],["ProcessResults","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`."],["Product","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`."],["PutBack","An iterator adaptor that allows putting back a single item to the front of the iterator."],["PutBackN","An iterator adaptor that allows putting multiple items in front of the iterator."],["RcIter","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait."],["RepeatCall","See `repeat_call` for more information."],["RepeatN","An iterator that produces n repetitions of an element."],["Step","An iterator adaptor that steps a number elements in the base iterator for each iteration."],["TakeWhileInclusive","An iterator adaptor that consumes elements while the given predicate is `true`, including the element for which the predicate first returned `false`."],["TakeWhileRef","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`."],["Tee","One half of an iterator pair where both return the same elements."],["TupleBuffer","An iterator over a incomplete tuple."],["TupleCombinations","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size."],["TupleWindows","An iterator over all contiguous windows that produces tuples of a specific size."],["Tuples","An iterator that groups the items in tuples of a specific size."],["Unfold","See `unfold` for more information."],["Unique","An iterator adapter to filter out duplicate elements."],["UniqueBy","An iterator adapter to filter out duplicate elements."],["Update","An iterator adapter to apply a mutating function to each element before yielding it."],["WhileSome","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered."],["WithPosition","An iterator adaptor that wraps each element in an [`Position`]."],["Zip","See [`multizip`] for more information."],["ZipEq","An iterator which iterates two other iterators simultaneously"],["ZipLongest","An iterator which iterates two other iterators simultaneously"]],"type":[["Coalesce","An iterator adaptor that may join together adjacent elements."],["Dedup","An iterator adaptor that removes repeated duplicates."],["DedupBy","An iterator adaptor that removes repeated duplicates, determining equality using a comparison function."],["DedupByWithCount","An iterator adaptor that removes repeated duplicates, while keeping a count of how many repeated elements were present. This will determine equality using a comparison function."],["DedupWithCount","An iterator adaptor that removes repeated duplicates, while keeping a count of how many repeated elements were present."],["Duplicates","An iterator adapter to filter out duplicate elements."],["DuplicatesBy","An iterator adapter to filter for duplicate elements."],["GroupingMapBy","`GroupingMapBy` is an intermediate struct for efficient group-and-fold operations."],["Intersperse","An iterator adaptor to insert a particular value between each element of the adapted iterator."],["KMerge","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted."],["MapInto","An iterator adapter to apply `Into` conversion to each element."],["MapOk","An iterator adapter to apply a transformation within a nested `Result::Ok`."],["MapResults","See [`MapOk`]."],["Merge","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted."]]};