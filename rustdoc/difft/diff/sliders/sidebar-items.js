window.SIDEBAR_ITEMS = {"fn":[["distance_between","Return the distance between two syntax nodes, as a tuple of number of lines and number of columns."],["fix_all_nested_sliders","Correct sliders in middle insertions."],["fix_all_sliders",""],["fix_all_sliders_one_step",""],["fix_nested_slider_prefer_inner","When we see code of the form `old1(novel(old2()))`, prefer treating the inner delimiter as novel, so `novel(...)` in this example."],["fix_nested_slider_prefer_outer","When we see code of the form `(old-1 (novel (old-2)))`, prefer treating the outer delimiter as novel, so `(novel ...)` in this example."],["fix_sliders","For every sequence of novel nodes, if it’s a potential slider, change which nodes are marked as novel if it produces a sequence of nodes that are closer together."],["is_novel_deep",""],["novel_regions_after_unchanged","Return the start and end indexes of sequences of novel nodes that occur after unchanged nodes."],["novel_regions_before_unchanged","Return the start and end indexes of sequences of novel nodes that occur before unchanged nodes."],["prefer_outer_delimiter","Should nester slider correction prefer the inner or outer delimiter?"],["push_unchanged_to_ancestor","Given a nested list where the root delimiters are novel but the inner list’s delimiters are unchanged, mark the root list as unchanged instead."],["push_unchanged_to_descendant","Given a nested list where the root delimiters are unchanged but the inner list’s delimiters are novel, mark the inner list as unchanged instead."],["slide_to_next_node","If the next node is unchanged, matches the beginning of the region, and has a smaller text distance, mark it as novel."],["slide_to_prev_node","If the previous node is unchanged, matches the end of the region, and has a smaller text distance, mark it as novel."],["unchanged_descendants","Find the unchanged descendants of `nodes`."],["unchanged_descendants_for_outer_slider","Nested sliders require a single unchanged descendant whose delimiters we can slide."]]};