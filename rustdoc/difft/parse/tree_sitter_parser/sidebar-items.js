window.SIDEBAR_ITEMS = {"constant":[["OCAML_ATOM_NODES",""]],"fn":[["all_syntaxes_from_cursor","Convert all the tree-sitter nodes at this level to difftastic syntax nodes."],["atom_from_cursor","Convert the tree-sitter node at `cursor` to a difftastic atom."],["child_tokens",""],["comment_positions",""],["find_delim_positions","Are any of the children of the node at `cursor` delimiters? Return their indexes if so."],["from_language",""],["list_from_cursor","Convert the tree-sitter node at `cursor` to a difftastic list node."],["parse","Parse `src` with tree-sitter and convert to difftastic Syntax."],["parse_subtrees","Find any nodes that can be parsed as other languages (e.g. JavaScript embedded in HTML), and return a map of their node IDs mapped to parsed trees. Every time we see such a node, we will ignore it and recurse into the root node of the given tree instead."],["print_cursor",""],["print_tree",""],["syntax_from_cursor","Convert the tree-sitter node at `cursor` to a difftastic syntax node."],["to_syntax",""],["to_syntax_with_limit",""],["to_tree","Parse `src` with tree-sitter."],["to_tree_with_limit",""],["tree_highlights","Calculate which tree-sitter node IDs should have which syntax highlighting."],["tree_sitter_ada",""],["tree_sitter_apex",""],["tree_sitter_bash",""],["tree_sitter_c",""],["tree_sitter_c_sharp",""],["tree_sitter_clojure",""],["tree_sitter_cmake",""],["tree_sitter_commonlisp",""],["tree_sitter_cpp",""],["tree_sitter_css",""],["tree_sitter_dart",""],["tree_sitter_elisp",""],["tree_sitter_elixir",""],["tree_sitter_elm",""],["tree_sitter_elvish",""],["tree_sitter_erlang",""],["tree_sitter_gleam",""],["tree_sitter_go",""],["tree_sitter_hack",""],["tree_sitter_hare",""],["tree_sitter_haskell",""],["tree_sitter_hcl",""],["tree_sitter_html",""],["tree_sitter_janet_simple",""],["tree_sitter_java",""],["tree_sitter_javascript",""],["tree_sitter_json",""],["tree_sitter_julia",""],["tree_sitter_kotlin",""],["tree_sitter_latex",""],["tree_sitter_lua",""],["tree_sitter_make",""],["tree_sitter_newick",""],["tree_sitter_nix",""],["tree_sitter_objc",""],["tree_sitter_ocaml",""],["tree_sitter_ocaml_interface",""],["tree_sitter_pascal",""],["tree_sitter_perl",""],["tree_sitter_php",""],["tree_sitter_python",""],["tree_sitter_qmljs",""],["tree_sitter_r",""],["tree_sitter_racket",""],["tree_sitter_ruby",""],["tree_sitter_rust",""],["tree_sitter_scala",""],["tree_sitter_scheme",""],["tree_sitter_scss",""],["tree_sitter_smali",""],["tree_sitter_solidity",""],["tree_sitter_sql",""],["tree_sitter_swift",""],["tree_sitter_toml",""],["tree_sitter_tsx",""],["tree_sitter_typescript",""],["tree_sitter_vhdl",""],["tree_sitter_xml",""],["tree_sitter_yaml",""],["tree_sitter_zig",""]],"struct":[["ExceededByteLimit",""],["ExceededParseErrorLimit",""],["HighlightedNodeIds",""],["TreeSitterConfig","Configuration for a tree-sitter parser."],["TreeSitterSubLanguage","A language may contain certain nodes that are in other languages and should be parsed as such (e.g. HTML `<script>` nodes containing JavaScript). This contains how to identify such nodes, and what languages we should parse them as."]]};