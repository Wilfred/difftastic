(function() {var type_impls = {
"petgraph":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#164-556\">source</a><a href=\"#impl-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#170-172\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>GraphMap</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#175-181\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(nodes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, edges: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>GraphMap</code> with estimated capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#184-186\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Return the current node and edge capacity of the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#199-201\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.is_directed\" class=\"fn\">is_directed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether the graph has directed edges.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#222-228\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.from_edges\" class=\"fn\">from_edges</a>&lt;I&gt;(iterable: I) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,\n    I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E, NodeId = N&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>GraphMap</code> from an iterable of edges.</p>\n<p>Node values are taken directly from the list.\nEdge weights <code>E</code> may either be specified in the list,\nor they are filled with default values.</p>\n<p>Nodes are inserted automatically to match the edges.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>petgraph::graphmap::UnGraphMap;\n\n<span class=\"comment\">// Create a new undirected GraphMap.\n// Use a type hint to have `()` be the edge weight type.\n</span><span class=\"kw\">let </span>gr = UnGraphMap::&lt;<span class=\"kw\">_</span>, ()&gt;::from_edges(<span class=\"kw-2\">&amp;</span>[\n    (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">2</span>), (<span class=\"number\">0</span>, <span class=\"number\">3</span>),\n    (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">3</span>),\n    (<span class=\"number\">2</span>, <span class=\"number\">3</span>),\n]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_count\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#231-233\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.node_count\" class=\"fn\">node_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of nodes in the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_count\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#236-238\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.edge_count\" class=\"fn\">edge_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of edges in the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#241-244\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all nodes and edges</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#247-250\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.add_node\" class=\"fn\">add_node</a>(&amp;mut self, n: N) -&gt; N</h4></section></summary><div class=\"docblock\"><p>Add node <code>n</code> to the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#255-272\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.remove_node\" class=\"fn\">remove_node</a>(&amp;mut self, n: N) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return <code>true</code> if node <code>n</code> was removed.</p>\n<p>Computes in <strong>O(V)</strong> time, due to the removal of edges with other nodes.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#275-277\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.contains_node\" class=\"fn\">contains_node</a>(&amp;self, n: N) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return <code>true</code> if the node is contained in the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#300-318\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.add_edge\" class=\"fn\">add_edge</a>(&amp;mut self, a: N, b: N, weight: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;E&gt;</h4></section></summary><div class=\"docblock\"><p>Add an edge connecting <code>a</code> and <code>b</code> to the graph, with associated\ndata <code>weight</code>. For a directed graph, the edge is directed from <code>a</code>\nto <code>b</code>.</p>\n<p>Inserts nodes <code>a</code> and/or <code>b</code> if they aren’t already part of the graph.</p>\n<p>Return <code>None</code> if the edge did not previously exist, otherwise,\nthe associated data is updated and the old value is returned\nas <code>Some(old_weight)</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Create a GraphMap with directed edges, and add one edge to it\n</span><span class=\"kw\">use </span>petgraph::graphmap::DiGraphMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = DiGraphMap::new();\ng.add_edge(<span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(g.node_count(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(g.edge_count(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(g.contains_edge(<span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>));\n<span class=\"macro\">assert!</span>(!g.contains_edge(<span class=\"string\">\"y\"</span>, <span class=\"string\">\"x\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#363-373\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.remove_edge\" class=\"fn\">remove_edge</a>(&amp;mut self, a: N, b: N) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;E&gt;</h4></section></summary><div class=\"docblock\"><p>Remove edge from <code>a</code> to <code>b</code> from the graph and return the edge weight.</p>\n<p>Return <code>None</code> if the edge didn’t exist.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Create a GraphMap with undirected edges, and add and remove an edge.\n</span><span class=\"kw\">use </span>petgraph::graphmap::UnGraphMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = UnGraphMap::new();\ng.add_edge(<span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, -<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>edge_data = g.remove_edge(<span class=\"string\">\"y\"</span>, <span class=\"string\">\"x\"</span>);\n<span class=\"macro\">assert_eq!</span>(edge_data, <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(g.edge_count(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#376-378\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.contains_edge\" class=\"fn\">contains_edge</a>(&amp;self, a: N, b: N) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return <code>true</code> if the edge connecting <code>a</code> with <code>b</code> is contained in the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nodes\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#383-387\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.nodes\" class=\"fn\">nodes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.Nodes.html\" title=\"struct petgraph::graphmap::Nodes\">Nodes</a>&lt;'_, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Nodes&lt;&#39;_, N&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over the nodes of the graph.</p>\n<p>Iterator element type is <code>N</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neighbors\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#396-404\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.neighbors\" class=\"fn\">neighbors</a>(&amp;self, a: N) -&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.Neighbors.html\" title=\"struct petgraph::graphmap::Neighbors\">Neighbors</a>&lt;'_, N, Ty&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Neighbors&lt;&#39;_, N, Ty&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all nodes with an edge starting from <code>a</code>.</p>\n<ul>\n<li><code>Directed</code>: Outgoing edges from <code>a</code>.</li>\n<li><code>Undirected</code>: All edges from or to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>N</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neighbors_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#416-426\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.neighbors_directed\" class=\"fn\">neighbors_directed</a>(\n    &amp;self,\n    a: N,\n    dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>\n) -&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.NeighborsDirected.html\" title=\"struct petgraph::graphmap::NeighborsDirected\">NeighborsDirected</a>&lt;'_, N, Ty&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"NeighborsDirected&lt;&#39;_, N, Ty&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all neighbors that have an edge between them and\n<code>a</code>, in the specified direction.\nIf the graph’s edges are undirected, this is equivalent to <em>.neighbors(a)</em>.</p>\n<ul>\n<li><code>Directed</code>, <code>Outgoing</code>: All edges from <code>a</code>.</li>\n<li><code>Directed</code>, <code>Incoming</code>: All edges to <code>a</code>.</li>\n<li><code>Undirected</code>: All edges from or to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>N</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#436-442\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.edges\" class=\"fn\">edges</a>(&amp;self, a: N) -&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.Edges.html\" title=\"struct petgraph::graphmap::Edges\">Edges</a>&lt;'_, N, E, Ty&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Edges&lt;&#39;_, N, E, Ty&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of target nodes with an edge starting from <code>a</code>,\npaired with their respective edge weights.</p>\n<ul>\n<li><code>Directed</code>: Outgoing edges from <code>a</code>.</li>\n<li><code>Undirected</code>: All edges from or to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>(N, N, &amp;E)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#456-463\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.edges_directed\" class=\"fn\">edges_directed</a>(\n    &amp;self,\n    a: N,\n    dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>\n) -&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.EdgesDirected.html\" title=\"struct petgraph::graphmap::EdgesDirected\">EdgesDirected</a>&lt;'_, N, E, Ty&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EdgesDirected&lt;&#39;_, N, E, Ty&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of target nodes with an edge starting from <code>a</code>,\npaired with their respective edge weights.</p>\n<ul>\n<li><code>Directed</code>, <code>Outgoing</code>: All edges from <code>a</code>.</li>\n<li><code>Directed</code>, <code>Incoming</code>: All edges to <code>a</code>.</li>\n<li><code>Undirected</code>, <code>Outgoing</code>: All edges connected to <code>a</code>, with <code>a</code> being the source of each\nedge.</li>\n<li><code>Undirected</code>, <code>Incoming</code>: All edges connected to <code>a</code>, with <code>a</code> being the target of each\nedge.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>(N, N, &amp;E)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weight\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#467-469\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.edge_weight\" class=\"fn\">edge_weight</a>(&amp;self, a: N, b: N) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;E</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a reference to the edge weight connecting <code>a</code> with <code>b</code>, or\n<code>None</code> if the edge does not exist in the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weight_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#473-475\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.edge_weight_mut\" class=\"fn\">edge_weight_mut</a>(&amp;mut self, a: N, b: N) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut E</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a mutable reference to the edge weight connecting <code>a</code> with <code>b</code>, or\n<code>None</code> if the edge does not exist in the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#480-485\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.all_edges\" class=\"fn\">all_edges</a>(&amp;self) -&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.AllEdges.html\" title=\"struct petgraph::graphmap::AllEdges\">AllEdges</a>&lt;'_, N, E, Ty&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"AllEdges&lt;&#39;_, N, E, Ty&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over all edges of the graph with their weight in arbitrary order.</p>\n<p>Iterator element type is <code>(N, N, &amp;E)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all_edges_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#491-496\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.all_edges_mut\" class=\"fn\">all_edges_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.AllEdgesMut.html\" title=\"struct petgraph::graphmap::AllEdgesMut\">AllEdgesMut</a>&lt;'_, N, E, Ty&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"AllEdgesMut&lt;&#39;_, N, E, Ty&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over all edges of the graph in arbitrary order, with a mutable reference\nto their weight.</p>\n<p>Iterator element type is <code>(N, N, &amp;mut E)</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_graph\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#509-524\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.into_graph\" class=\"fn\">into_graph</a>&lt;Ix&gt;(self) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a <code>Graph</code> that corresponds to this <code>GraphMap</code>.</p>\n<ol>\n<li>Note that node and edge indices in the <code>Graph</code> have nothing in common\nwith the <code>GraphMap</code>s node weights <code>N</code>. The node weights <code>N</code> are used as\nnode weights in the resulting <code>Graph</code>, too.</li>\n<li>Note that the index type is user-chosen.</li>\n</ol>\n<p>Computes in <strong>O(|V| + |E|)</strong> time (average).</p>\n<p><strong>Panics</strong> if the number of nodes or edges does not fit with\nthe resulting graph’s index type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_graph\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#533-555\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graphmap/struct.GraphMap.html#tymethod.from_graph\" class=\"fn\">from_graph</a>&lt;Ix&gt;(graph: <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;) -&gt; Self<div class=\"where\">where\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates a <code>GraphMap</code> that corresponds to the given <code>Graph</code>.</p>\n<p><strong>Warning</strong>: Nodes with the same weight are merged and only the last parallel edge\nis kept. Node and edge indices of the <code>Graph</code> are lost. Only use this function\nif the node weights are distinct and there are no parallel edges.</p>\n<p>Computes in <strong>O(|V| + |E|)</strong> time (average).</p>\n</div></details></div></details>",0,"petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodeIndexable-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1098-1119\">source</a><a href=\"#impl-NodeIndexable-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.NodeIndexable.html\" title=\"trait petgraph::visit::NodeIndexable\">NodeIndexable</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1103-1105\">source</a><a href=\"#method.node_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.node_bound\" class=\"fn\">node_bound</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return an upper bound of the node indices in the graph\n(suitable for the size of a bitmap).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1106-1109\">source</a><a href=\"#method.to_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.to_index\" class=\"fn\">to_index</a>(&amp;self, ix: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert <code>a</code> to an integer index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1110-1118\">source</a><a href=\"#method.from_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.from_index\" class=\"fn\">from_index</a>(&amp;self, ix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a></h4></section></summary><div class='docblock'>Convert <code>i</code> to a node index. <code>i</code> must be a valid value in the graph.</div></details></div></details>","NodeIndexable","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeCount-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1209-1218\">source</a><a href=\"#impl-EdgeCount-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.EdgeCount.html\" title=\"trait petgraph::visit::EdgeCount\">EdgeCount</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1215-1217\">source</a><a href=\"#method.edge_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeCount.html#tymethod.edge_count\" class=\"fn\">edge_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the number of edges in the graph.</div></details></div></details>","EdgeCount","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#894-902\">source</a><a href=\"#impl-Default-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Create a new empty <code>GraphMap</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#899-901\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visitable-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1034-1046\">source</a><a href=\"#impl-Visitable-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.Visitable.html\" title=\"trait petgraph::visit::Visitable\">Visitable</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Map\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Map\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Visitable.html#associatedtype.Map\" class=\"associatedtype\">Map</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/collections/hash/set/struct.HashSet.html\" title=\"struct std::collections::hash::set::HashSet\">HashSet</a>&lt;N&gt;</h4></section></summary><div class='docblock'>The associated map type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1040-1042\">source</a><a href=\"#method.visit_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.Visitable.html#tymethod.visit_map\" class=\"fn\">visit_map</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/std/collections/hash/set/struct.HashSet.html\" title=\"struct std::collections::hash::set::HashSet\">HashSet</a>&lt;N&gt;</h4></section></summary><div class='docblock'>Create a new visitor map</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1043-1045\">source</a><a href=\"#method.reset_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.Visitable.html#tymethod.reset_map\" class=\"fn\">reset_map</a>(&amp;self, map: &amp;mut Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Visitable.html#associatedtype.Map\" title=\"type petgraph::visit::Visitable::Map\">Map</a>)</h4></section></summary><div class='docblock'>Reset the visitor map (and resize to new size of graph if needed)</div></details></div></details>","Visitable","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodeCount-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1088-1096\">source</a><a href=\"#impl-NodeCount-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.NodeCount.html\" title=\"trait petgraph::visit::NodeCount\">NodeCount</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.node_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1093-1095\">source</a><a href=\"#method.node_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeCount.html#tymethod.node_count\" class=\"fn\">node_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></div></details>","NodeCount","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CItem%3E-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#559-575\">source</a><a href=\"#impl-FromIterator%3CItem%3E-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Item&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;Item&gt; for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    Item: <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E, NodeId = N&gt;,\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Create a new <code>GraphMap</code> from an iterable of edges.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#565-574\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iterable: I) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = Item&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<Item>","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromElements-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#355-367\">source</a><a href=\"#impl-FromElements-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/data/trait.FromElements.html\" title=\"trait petgraph::data::FromElements\">FromElements</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_elements\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#360-366\">source</a><a href=\"#method.from_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.FromElements.html#method.from_elements\" class=\"fn\">from_elements</a>&lt;I&gt;(iterable: I) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"petgraph/data/enum.Element.html\" title=\"enum petgraph::data::Element\">Element</a>&lt;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>, Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>&gt;&gt;,</div></h4></section></div></details>","FromElements","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CItem%3E-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#580-599\">source</a><a href=\"#impl-Extend%3CItem%3E-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Item&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;Item&gt; for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    Item: <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E, NodeId = N&gt;,\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Extend the graph from an iterable of edges.</p>\n<p>Nodes are inserted automatically to match the edges.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#586-598\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iterable: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = Item&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<Item>","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Data-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1025-1032\">source</a><a href=\"#impl-Data-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.Data.html\" title=\"trait petgraph::visit::Data\">Data</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.NodeWeight\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.NodeWeight\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" class=\"associatedtype\">NodeWeight</a> = N</h4></section><section id=\"associatedtype.EdgeWeight\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.EdgeWeight\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" class=\"associatedtype\">EdgeWeight</a> = E</h4></section></div></details>","Data","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<section id=\"impl-NodeCompactIndexable-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1121-1126\">source</a><a href=\"#impl-NodeCompactIndexable-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.NodeCompactIndexable.html\" title=\"trait petgraph::visit::NodeCompactIndexable\">NodeCompactIndexable</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section>","NodeCompactIndexable","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Build-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#189-220\">source</a><a href=\"#impl-Build-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/data/trait.Build.html\" title=\"trait petgraph::data::Build\">Build</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.add_node\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#194-196\">source</a><a href=\"#method.add_node\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#tymethod.add_node\" class=\"fn\">add_node</a>(&amp;mut self, weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_edge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#197-210\">source</a><a href=\"#method.add_edge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#method.add_edge\" class=\"fn\">add_edge</a>(\n    &amp;mut self,\n    a: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    b: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a>&gt;</h4></section></summary><div class='docblock'>Add a new edge. If parallel edges (duplicate) are not allowed and\nthe edge already exists, return <code>None</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_edge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#211-219\">source</a><a href=\"#method.update_edge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#tymethod.update_edge\" class=\"fn\">update_edge</a>(\n    &amp;mut self,\n    a: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    b: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>\n) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a></h4></section></summary><div class='docblock'>Add or update the edge from <code>a</code> to <code>b</code>. Return the id of the affected\nedge.</div></details></div></details>","Build","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Create-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#244-252\">source</a><a href=\"#impl-Create-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/data/trait.Create.html\" title=\"trait petgraph::data::Create\">Create</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.with_capacity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#249-251\">source</a><a href=\"#method.with_capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Create.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(nodes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, edges: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></div></details>","Create","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C(N,+N)%3E-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#867-878\">source</a><a href=\"#impl-Index%3C(N,+N)%3E-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(N, N)</a>&gt; for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Index <code>GraphMap</code> by node pairs to access edge weights.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = E</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#873-877\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(N, N)</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;E</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<(N, N)>","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#67-71\">source</a><a href=\"#impl-Debug-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#68-70\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#60\">source</a><a href=\"#impl-Clone-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Ty: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#60\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeIndexable-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1150-1173\">source</a><a href=\"#impl-EdgeIndexable-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.EdgeIndexable.html\" title=\"trait petgraph::visit::EdgeIndexable\">EdgeIndexable</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1155-1157\">source</a><a href=\"#method.edge_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.edge_bound\" class=\"fn\">edge_bound</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return an upper bound of the edge indices in the graph\n(suitable for the size of a bitmap).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1159-1162\">source</a><a href=\"#method.to_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.to_index\" class=\"fn\">to_index</a>(&amp;self, ix: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert <code>a</code> to an integer index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1164-1172\">source</a><a href=\"#method.from_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.from_index\" class=\"fn\">from_index</a>(&amp;self, ix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a></h4></section></summary><div class='docblock'>Convert <code>i</code> to an edge index. <code>i</code> must be a valid value in the graph.</div></details></div></details>","EdgeIndexable","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GraphProp-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1048-1054\">source</a><a href=\"#impl-GraphProp-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GraphProp.html\" title=\"trait petgraph::visit::GraphProp\">GraphProp</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.EdgeType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.EdgeType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphProp.html#associatedtype.EdgeType\" class=\"associatedtype\">EdgeType</a> = Ty</h4></section></summary><div class='docblock'>The kind of edges in the graph.</div></details><section id=\"method.is_directed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/visit/mod.rs.html#329-331\">source</a><a href=\"#method.is_directed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GraphProp.html#method.is_directed\" class=\"fn\">is_directed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></div></details>","GraphProp","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C(N,+N)%3E-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#881-891\">source</a><a href=\"#impl-IndexMut%3C(N,+N)%3E-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(N, N)</a>&gt; for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"petgraph/graphmap/trait.NodeTrait.html\" title=\"trait petgraph::graphmap::NodeTrait\">NodeTrait</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Index <code>GraphMap</code> by node pairs to access edge weights.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#886-890\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(N, N)</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut E</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<(N, N)>","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetAdjacencyMatrix-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1221-1233\">source</a><a href=\"#impl-GetAdjacencyMatrix-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GetAdjacencyMatrix.html\" title=\"trait petgraph::visit::GetAdjacencyMatrix\">GetAdjacencyMatrix</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h3></section></summary><div class=\"docblock\"><p>The <code>GraphMap</code> keeps an adjacency matrix internally.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.AdjMatrix\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.AdjMatrix\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#associatedtype.AdjMatrix\" class=\"associatedtype\">AdjMatrix</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The associated adjacency matrix type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.adjacency_matrix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1228\">source</a><a href=\"#method.adjacency_matrix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.adjacency_matrix\" class=\"fn\">adjacency_matrix</a>(&amp;self)</h4></section></summary><div class='docblock'>Create the adjacency matrix</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_adjacent\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1230-1232\">source</a><a href=\"#method.is_adjacent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.is_adjacent\" class=\"fn\">is_adjacent</a>(&amp;self, _: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, a: N, b: N) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Return true if there is an edge from <code>a</code> to <code>b</code>, false otherwise. <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.is_adjacent\">Read more</a></div></details></div></details>","GetAdjacencyMatrix","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GraphBase-for-GraphMap%3CN,+E,+Ty%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graphmap.rs.html#1017-1023\">source</a><a href=\"#impl-GraphBase-for-GraphMap%3CN,+E,+Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GraphBase.html\" title=\"trait petgraph::visit::GraphBase\">GraphBase</a> for <a class=\"struct\" href=\"petgraph/graphmap/struct.GraphMap.html\" title=\"struct petgraph::graphmap::GraphMap\">GraphMap</a>&lt;N, E, Ty&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.NodeId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.NodeId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" class=\"associatedtype\">NodeId</a> = N</h4></section></summary><div class='docblock'>node identifier</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.EdgeId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.EdgeId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" class=\"associatedtype\">EdgeId</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(N, N)</a></h4></section></summary><div class='docblock'>edge identifier</div></details></div></details>","GraphBase","petgraph::graphmap::UnGraphMap","petgraph::graphmap::DiGraphMap"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()