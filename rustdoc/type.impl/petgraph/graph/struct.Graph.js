(function() {var type_impls = {
"petgraph":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Graph%3CN,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#453-465\">source</a><a href=\"#impl-Graph%3CN,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, <a class=\"enum\" href=\"petgraph/enum.Directed.html\" title=\"enum petgraph::Directed\">Directed</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#458-464\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>Graph</code> with directed edges.</p>\n<p>This is a convenience method. Use <code>Graph::with_capacity</code> or <code>Graph::default</code> for\na constructor that is generic in all the type parameters of <code>Graph</code>.</p>\n</div></details></div></details>",0,"petgraph::graph_impl::DiGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Graph%3CN,+E,+Undirected%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#467-479\">source</a><a href=\"#impl-Graph%3CN,+E,+Undirected%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, <a class=\"enum\" href=\"petgraph/enum.Undirected.html\" title=\"enum petgraph::Undirected\">Undirected</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_undirected\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#472-478\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.new_undirected\" class=\"fn\">new_undirected</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>Graph</code> with undirected edges.</p>\n<p>This is a convenience method. Use <code>Graph::with_capacity</code> or <code>Graph::default</code> for\na constructor that is generic in all the type parameters of <code>Graph</code>.</p>\n</div></details></div></details>",0,"petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#481-1461\">source</a><a href=\"#impl-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#487-493\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(nodes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, edges: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>Graph</code> with estimated capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_count\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#498-500\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.node_count\" class=\"fn\">node_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of nodes (vertices) in the graph.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_count\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#505-507\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edge_count\" class=\"fn\">edge_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of edges in the graph.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#511-513\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.is_directed\" class=\"fn\">is_directed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether the graph has directed edges or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#523-533\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.add_node\" class=\"fn\">add_node</a>(&amp;mut self, weight: N) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;</h4></section></summary><div class=\"docblock\"><p>Add a node (also called vertex) with associated data <code>weight</code> to the graph.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n<p>Return the index of the new node.</p>\n<p><strong>Panics</strong> if the Graph is at the maximum number of nodes for its index\ntype (N/A if usize).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_weight\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#539-541\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.node_weight\" class=\"fn\">node_weight</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;N</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the weight for node <code>a</code>.</p>\n<p>If node <code>a</code> doesn’t exist in the graph, return <code>None</code>.\nAlso available with indexing syntax: <code>&amp;graph[a]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_weight_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#547-549\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.node_weight_mut\" class=\"fn\">node_weight_mut</a>(&amp;mut self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut N</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the weight for node <code>a</code>, mutably.</p>\n<p>If node <code>a</code> doesn’t exist in the graph, return <code>None</code>.\nAlso available with indexing syntax: <code>&amp;mut graph[a]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#564-588\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.add_edge\" class=\"fn\">add_edge</a>(\n    &amp;mut self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    weight: E\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;</h4></section></summary><div class=\"docblock\"><p>Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated\ndata <code>weight</code>.</p>\n<p>Return the index of the new edge.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n<p><strong>Panics</strong> if any of the nodes don’t exist.<br>\n<strong>Panics</strong> if the Graph is at the maximum number of edges for its index\ntype (N/A if usize).</p>\n<p><strong>Note:</strong> <code>Graph</code> allows adding parallel (“duplicate”) edges. If you want\nto avoid this, use <a href=\"#method.update_edge\"><code>.update_edge(a, b, weight)</code></a> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#599-607\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.update_edge\" class=\"fn\">update_edge</a>(\n    &amp;mut self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    weight: E\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;</h4></section></summary><div class=\"docblock\"><p>Add or update an edge from <code>a</code> to <code>b</code>.\nIf the edge already exists, its weight is updated.</p>\n<p>Return the index of the affected edge.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of edges\nconnected to <code>a</code> (and <code>b</code>, if the graph edges are undirected).</p>\n<p><strong>Panics</strong> if any of the nodes doesn’t exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weight\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#613-615\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edge_weight\" class=\"fn\">edge_weight</a>(&amp;self, e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;E</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the weight for edge <code>e</code>.</p>\n<p>If edge <code>e</code> doesn’t exist in the graph, return <code>None</code>.\nAlso available with indexing syntax: <code>&amp;graph[e]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weight_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#621-623\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edge_weight_mut\" class=\"fn\">edge_weight_mut</a>(&amp;mut self, e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut E</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the weight for edge <code>e</code>, mutably.</p>\n<p>If edge <code>e</code> doesn’t exist in the graph, return <code>None</code>.\nAlso available with indexing syntax: <code>&amp;mut graph[e]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_endpoints\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#628-632\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edge_endpoints\" class=\"fn\">edge_endpoints</a>(\n    &amp;self,\n    e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Access the source and target nodes for <code>e</code>.</p>\n<p>If edge <code>e</code> doesn’t exist in the graph, return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#646-689\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.remove_node\" class=\"fn\">remove_node</a>(&amp;mut self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>Remove <code>a</code> from the graph if it exists, and return its weight.\nIf it doesn’t exist in the graph, return <code>None</code>.</p>\n<p>Apart from <code>a</code>, this invalidates the last node index in the graph\n(that node will adopt the removed node index). Edge indices are\ninvalidated as they would be following the removal of each edge\nwith an endpoint in <code>a</code>.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of affected\nedges, including <em>n</em> calls to <code>.remove_edge()</code> where <em>n</em> is the number\nof edges with an endpoint in <code>a</code>, and including the edges with an\nendpoint in the displaced node.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#735-747\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.remove_edge\" class=\"fn\">remove_edge</a>(&amp;mut self, e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;E&gt;</h4></section></summary><div class=\"docblock\"><p>Remove an edge and return its edge weight, or <code>None</code> if it didn’t exist.</p>\n<p>Apart from <code>e</code>, this invalidates the last edge index in the graph\n(that edge will adopt the removed edge index).</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the size of four particular edge lists, for\nthe vertices of <code>e</code> and the vertices of another affected edge.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neighbors\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#779-781\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.neighbors\" class=\"fn\">neighbors</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Neighbors.html\" title=\"struct petgraph::graph::Neighbors\">Neighbors</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Neighbors&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all nodes with an edge starting from <code>a</code>.</p>\n<ul>\n<li><code>Directed</code>: Outgoing edges from <code>a</code>.</li>\n<li><code>Undirected</code>: All edges from or to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>NodeIndex&lt;Ix&gt;</code>.</p>\n<p>Use <a href=\"struct.Neighbors.html#method.detach\"><code>.neighbors(a).detach()</code></a> to get a neighbor walker that does\nnot borrow from the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neighbors_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#802-810\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.neighbors_directed\" class=\"fn\">neighbors_directed</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Neighbors.html\" title=\"struct petgraph::graph::Neighbors\">Neighbors</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Neighbors&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all neighbors that have an edge between them and\n<code>a</code>, in the specified direction.\nIf the graph’s edges are undirected, this is equivalent to <em>.neighbors(a)</em>.</p>\n<ul>\n<li><code>Directed</code>, <code>Outgoing</code>: All edges from <code>a</code>.</li>\n<li><code>Directed</code>, <code>Incoming</code>: All edges to <code>a</code>.</li>\n<li><code>Undirected</code>: All edges from or to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>NodeIndex&lt;Ix&gt;</code>.</p>\n<p>For a <code>Directed</code> graph, neighbors are listed in reverse order of their\naddition to the graph, so the most recently added edge’s neighbor is\nlisted first. The order in an <code>Undirected</code> graph is arbitrary.</p>\n<p>Use <a href=\"struct.Neighbors.html#method.detach\"><code>.neighbors_directed(a, dir).detach()</code></a> to get a neighbor walker that does\nnot borrow from the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neighbors_undirected\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#826-835\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.neighbors_undirected\" class=\"fn\">neighbors_undirected</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Neighbors.html\" title=\"struct petgraph::graph::Neighbors\">Neighbors</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Neighbors&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all neighbors that have an edge between them and\n<code>a</code>, in either direction.\nIf the graph’s edges are undirected, this is equivalent to <em>.neighbors(a)</em>.</p>\n<ul>\n<li><code>Directed</code> and <code>Undirected</code>: All edges from or to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>NodeIndex&lt;Ix&gt;</code>.</p>\n<p>Use <a href=\"struct.Neighbors.html#method.detach\"><code>.neighbors_undirected(a).detach()</code></a> to get a neighbor walker that does\nnot borrow from the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#844-846\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edges\" class=\"fn\">edges</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Edges.html\" title=\"struct petgraph::graph::Edges\">Edges</a>&lt;'_, E, Ty, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Edges&lt;&#39;_, E, Ty, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all edges of <code>a</code>.</p>\n<ul>\n<li><code>Directed</code>: Outgoing edges from <code>a</code>.</li>\n<li><code>Undirected</code>: All edges connected to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>EdgeReference&lt;E, Ix&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#859-870\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edges_directed\" class=\"fn\">edges_directed</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Edges.html\" title=\"struct petgraph::graph::Edges\">Edges</a>&lt;'_, E, Ty, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Edges&lt;&#39;_, E, Ty, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all edges of <code>a</code>, in the specified direction.</p>\n<ul>\n<li><code>Directed</code>, <code>Outgoing</code>: All edges from <code>a</code>.</li>\n<li><code>Directed</code>, <code>Incoming</code>: All edges to <code>a</code>.</li>\n<li><code>Undirected</code>, <code>Outgoing</code>: All edges connected to <code>a</code>, with <code>a</code> being the source of each\nedge.</li>\n<li><code>Undirected</code>, <code>Incoming</code>: All edges connected to <code>a</code>, with <code>a</code> being the target of each\nedge.</li>\n</ul>\n<p>Produces an empty iterator if the node <code>a</code> doesn’t exist.<br>\nIterator element type is <code>EdgeReference&lt;E, Ix&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges_connecting\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#878-888\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edges_connecting\" class=\"fn\">edges_connecting</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.EdgesConnecting.html\" title=\"struct petgraph::graph::EdgesConnecting\">EdgesConnecting</a>&lt;'_, E, Ty, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EdgesConnecting&lt;&#39;_, E, Ty, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over all the edges connecting <code>a</code> and <code>b</code>.</p>\n<ul>\n<li><code>Directed</code>: Outgoing edges from <code>a</code>.</li>\n<li><code>Undirected</code>: All edges connected to <code>a</code>.</li>\n</ul>\n<p>Iterator element type is <code>EdgeReference&lt;E, Ix&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#894-896\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.contains_edge\" class=\"fn\">contains_edge</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Lookup if there is an edge from <code>a</code> to <code>b</code>.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of edges\nconnected to <code>a</code> (and <code>b</code>, if the graph edges are undirected).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#902-911\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.find_edge\" class=\"fn\">find_edge</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Lookup an edge from <code>a</code> to <code>b</code>.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of edges\nconnected to <code>a</code> (and <code>b</code>, if the graph edges are undirected).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_edge_undirected\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#935-944\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.find_edge_undirected\" class=\"fn\">find_edge_undirected</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;, <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Lookup an edge between <code>a</code> and <code>b</code>, in either direction.</p>\n<p>If the graph is undirected, then this is equivalent to <code>.find_edge()</code>.</p>\n<p>Return the edge index and its directionality, with <code>Outgoing</code> meaning\nfrom <code>a</code> to <code>b</code> and <code>Incoming</code> the reverse,\nor <code>None</code> if the edge does not exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.externals\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#975-981\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.externals\" class=\"fn\">externals</a>(&amp;self, dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Externals.html\" title=\"struct petgraph::graph::Externals\">Externals</a>&lt;'_, N, Ty, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Externals&lt;&#39;_, N, Ty, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over either the nodes without edges to them\n(<code>Incoming</code>) or from them (<code>Outgoing</code>).</p>\n<p>An <em>internal</em> node has both incoming and outgoing edges.\nThe nodes in <code>.externals(Incoming)</code> are the source nodes and\n<code>.externals(Outgoing)</code> are the sinks of the graph.</p>\n<p>For a graph with undirected edges, both the sinks and the sources are\njust the nodes without edges.</p>\n<p>The whole iteration computes in <strong>O(|V|)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_indices\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#995-1000\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.node_indices\" class=\"fn\">node_indices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndices.html\" title=\"struct petgraph::graph::NodeIndices\">NodeIndices</a>&lt;Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"NodeIndices&lt;Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over the node indices of the graph.</p>\n<p>For example, in a rare case where a graph algorithm were not applicable,\nthe following code will iterate through all nodes to find a\nspecific index:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>index = g.node_indices().find(|i| g[<span class=\"kw-2\">*</span>i] == <span class=\"string\">\"book\"</span>).unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_weights_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1006-1010\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.node_weights_mut\" class=\"fn\">node_weights_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.NodeWeightsMut.html\" title=\"struct petgraph::graph::NodeWeightsMut\">NodeWeightsMut</a>&lt;'_, N, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"NodeWeightsMut&lt;&#39;_, N, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator yielding mutable access to all node weights.</p>\n<p>The order in which weights are yielded matches the order of their\nnode indices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_weights\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1016-1020\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.node_weights\" class=\"fn\">node_weights</a>(&amp;self) -&gt; NodeWeights&lt;'_, N, Ix&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator yielding immutable access to all node weights.</p>\n<p>The order in which weights are yielded matches the order of their\nnode indices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_indices\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1023-1028\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edge_indices\" class=\"fn\">edge_indices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndices.html\" title=\"struct petgraph::graph::EdgeIndices\">EdgeIndices</a>&lt;Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EdgeIndices&lt;Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over the edge indices of the graph</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_references\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1033-1037\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edge_references\" class=\"fn\">edge_references</a>(&amp;self) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.EdgeReferences.html\" title=\"struct petgraph::graph::EdgeReferences\">EdgeReferences</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EdgeReferences&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Create an iterator over all edges, in indexed order.</p>\n<p>Iterator element type is <code>EdgeReference&lt;E, Ix&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weights\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1043-1047\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edge_weights\" class=\"fn\">edge_weights</a>(&amp;self) -&gt; EdgeWeights&lt;'_, E, Ix&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator yielding immutable access to all edge weights.</p>\n<p>The order in which weights are yielded matches the order of their\nedge indices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weights_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1052-1056\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.edge_weights_mut\" class=\"fn\">edge_weights_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.EdgeWeightsMut.html\" title=\"struct petgraph::graph::EdgeWeightsMut\">EdgeWeightsMut</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EdgeWeightsMut&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator yielding mutable access to all edge weights.</p>\n<p>The order in which weights are yielded matches the order of their\nedge indices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_nodes\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1062-1064\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.raw_nodes\" class=\"fn\">raw_nodes</a>(&amp;self) -&gt; &amp;[<a class=\"struct\" href=\"petgraph/graph/struct.Node.html\" title=\"struct petgraph::graph::Node\">Node</a>&lt;N, Ix&gt;]</h4></section></summary><div class=\"docblock\"><p>Access the internal node array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1067-1069\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.raw_edges\" class=\"fn\">raw_edges</a>(&amp;self) -&gt; &amp;[<a class=\"struct\" href=\"petgraph/graph/struct.Edge.html\" title=\"struct petgraph::graph::Edge\">Edge</a>&lt;E, Ix&gt;]</h4></section></summary><div class=\"docblock\"><p>Access the internal edge array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_nodes_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1073-1075\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.into_nodes_edges\" class=\"fn\">into_nodes_edges</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.Node.html\" title=\"struct petgraph::graph::Node\">Node</a>&lt;N, Ix&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.Edge.html\" title=\"struct petgraph::graph::Edge\">Edge</a>&lt;E, Ix&gt;&gt;)</h4></section></summary><div class=\"docblock\"><p>Convert the graph into a vector of Nodes and a vector of Edges</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1078-1090\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.first_edge\" class=\"fn\">first_edge</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Accessor for data structure internals: the first edge in the given direction.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1093-1105\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.next_edge\" class=\"fn\">next_edge</a>(\n    &amp;self,\n    e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;,\n    dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Accessor for data structure internals: the next edge for the given direction.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_twice_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1140-1163\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.index_twice_mut\" class=\"fn\">index_twice_mut</a>&lt;T, U&gt;(\n    &amp;mut self,\n    i: T,\n    j: U\n) -&gt; (&amp;mut &lt;Self as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a>, &amp;mut &lt;Self as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a>)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;U&gt;,\n    T: <a class=\"trait\" href=\"petgraph/graph/trait.GraphIndex.html\" title=\"trait petgraph::graph::GraphIndex\">GraphIndex</a>,\n    U: <a class=\"trait\" href=\"petgraph/graph/trait.GraphIndex.html\" title=\"trait petgraph::graph::GraphIndex\">GraphIndex</a>,</div></h4></section></summary><div class=\"docblock\"><p>Index the <code>Graph</code> by two indices, any combination of\nnode or edge indices is fine.</p>\n<p><strong>Panics</strong> if the indices are equal or if they are out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>petgraph::{Graph, Incoming};\n<span class=\"kw\">use </span>petgraph::visit::Dfs;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>gr = Graph::new();\n<span class=\"kw\">let </span>a = gr.add_node(<span class=\"number\">0.</span>);\n<span class=\"kw\">let </span>b = gr.add_node(<span class=\"number\">0.</span>);\n<span class=\"kw\">let </span>c = gr.add_node(<span class=\"number\">0.</span>);\ngr.add_edge(a, b, <span class=\"number\">3.</span>);\ngr.add_edge(b, c, <span class=\"number\">2.</span>);\ngr.add_edge(c, b, <span class=\"number\">1.</span>);\n\n<span class=\"comment\">// walk the graph and sum incoming edges into the node weight\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dfs = Dfs::new(<span class=\"kw-2\">&amp;</span>gr, a);\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(node) = dfs.next(<span class=\"kw-2\">&amp;</span>gr) {\n    <span class=\"comment\">// use a walker -- a detached neighbors iterator\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>edges = gr.neighbors_directed(node, Incoming).detach();\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(edge) = edges.next_edge(<span class=\"kw-2\">&amp;</span>gr) {\n        <span class=\"kw\">let </span>(nw, ew) = gr.index_twice_mut(node, edge);\n        <span class=\"kw-2\">*</span>nw += <span class=\"kw-2\">*</span>ew;\n    }\n}\n\n<span class=\"comment\">// check the result\n</span><span class=\"macro\">assert_eq!</span>(gr[a], <span class=\"number\">0.</span>);\n<span class=\"macro\">assert_eq!</span>(gr[b], <span class=\"number\">4.</span>);\n<span class=\"macro\">assert_eq!</span>(gr[c], <span class=\"number\">2.</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1166-1177\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.reverse\" class=\"fn\">reverse</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Reverse the direction of all edges</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1180-1183\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all nodes and edges</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1186-1191\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.clear_edges\" class=\"fn\">clear_edges</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all edges</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1194-1196\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Return the current node and edge capacity of the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_nodes\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1202-1204\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.reserve_nodes\" class=\"fn\">reserve_nodes</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more nodes to be inserted in\nthe graph. Graph may reserve more space to avoid frequent reallocations.</p>\n<p><strong>Panics</strong> if the new capacity overflows <code>usize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1210-1212\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.reserve_edges\" class=\"fn\">reserve_edges</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more edges to be inserted in\nthe graph. Graph may reserve more space to avoid frequent reallocations.</p>\n<p><strong>Panics</strong> if the new capacity overflows <code>usize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact_nodes\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1221-1223\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.reserve_exact_nodes\" class=\"fn\">reserve_exact_nodes</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for exactly <code>additional</code> more nodes to be\ninserted in the graph. Does nothing if the capacity is already\nsufficient.</p>\n<p>Prefer <code>reserve_nodes</code> if future insertions are expected.</p>\n<p><strong>Panics</strong> if the new capacity overflows <code>usize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1232-1234\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.reserve_exact_edges\" class=\"fn\">reserve_exact_edges</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for exactly <code>additional</code> more edges to be\ninserted in the graph.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Prefer <code>reserve_edges</code> if future insertions are expected.</p>\n<p><strong>Panics</strong> if the new capacity overflows <code>usize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit_nodes\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1237-1239\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.shrink_to_fit_nodes\" class=\"fn\">shrink_to_fit_nodes</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the underlying nodes collection as much as possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1242-1244\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.shrink_to_fit_edges\" class=\"fn\">shrink_to_fit_edges</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the underlying edges collection as much as possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1247-1250\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the graph as much as possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_nodes\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1259-1270\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.retain_nodes\" class=\"fn\">retain_nodes</a>&lt;F&gt;(&amp;mut self, visit: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.Frozen.html\" title=\"struct petgraph::graph::Frozen\">Frozen</a>&lt;'_, Self&gt;, <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Keep all nodes that return <code>true</code> from the <code>visit</code> closure,\nremove the others.</p>\n<p><code>visit</code> is provided a proxy reference to the graph, so that\nthe graph can be walked and associated data modified.</p>\n<p>The order nodes are visited is not specified.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1279-1290\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.retain_edges\" class=\"fn\">retain_edges</a>&lt;F&gt;(&amp;mut self, visit: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.Frozen.html\" title=\"struct petgraph::graph::Frozen\">Frozen</a>&lt;'_, Self&gt;, <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Keep all edges that return <code>true</code> from the <code>visit</code> closure,\nremove the others.</p>\n<p><code>visit</code> is provided a proxy reference to the graph, so that\nthe graph can be walked and associated data modified.</p>\n<p>The order edges are visited is not specified.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1309-1319\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.from_edges\" class=\"fn\">from_edges</a>&lt;I&gt;(iterable: I) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,\n    I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E&gt;,\n    &lt;I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a> as <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"petgraph/trait.IntoWeightedEdge.html#associatedtype.NodeId\" title=\"type petgraph::IntoWeightedEdge::NodeId\">NodeId</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;&gt;,\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>Graph</code> from an iterable of edges.</p>\n<p>Node weights <code>N</code> are set to default values.\nEdge weights <code>E</code> may either be specified in the list,\nor they are filled with default values.</p>\n<p>Nodes are inserted automatically to match the edges.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>petgraph::Graph;\n\n<span class=\"kw\">let </span>gr = Graph::&lt;(), i32&gt;::from_edges(<span class=\"kw-2\">&amp;</span>[\n    (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">2</span>), (<span class=\"number\">0</span>, <span class=\"number\">3</span>),\n    (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">3</span>),\n    (<span class=\"number\">2</span>, <span class=\"number\">3</span>),\n]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_with_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1328-1348\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.extend_with_edges\" class=\"fn\">extend_with_edges</a>&lt;I&gt;(&amp;mut self, iterable: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,\n    I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E&gt;,\n    &lt;I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a> as <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"petgraph/trait.IntoWeightedEdge.html#associatedtype.NodeId\" title=\"type petgraph::IntoWeightedEdge::NodeId\">NodeId</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;&gt;,\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Extend the graph from an iterable of edges.</p>\n<p>Node weights <code>N</code> are set to default values.\nEdge weights <code>E</code> may either be specified in the list,\nor they are filled with default values.</p>\n<p>Nodes are inserted automatically to match the edges.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1355-1375\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.map\" class=\"fn\">map</a>&lt;'a, F, G, N2, E2&gt;(\n    &amp;'a self,\n    node_map: F,\n    edge_map: G\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N2, E2, Ty, Ix&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;'a N</a>) -&gt; N2,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;'a E</a>) -&gt; E2,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>Graph</code> by mapping node and\nedge weights to new values.</p>\n<p>The resulting graph has the same structure and the same\ngraph indices as <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1389-1417\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.filter_map\" class=\"fn\">filter_map</a>&lt;'a, F, G, N2, E2&gt;(\n    &amp;'a self,\n    node_map: F,\n    edge_map: G\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N2, E2, Ty, Ix&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;'a N</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;N2&gt;,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;'a E</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;E2&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>Graph</code> by mapping nodes and edges.\nA node or edge may be mapped to <code>None</code> to exclude it from\nthe resulting graph.</p>\n<p>Nodes are mapped first with the <code>node_map</code> closure, then\n<code>edge_map</code> is called for the edges that have not had any endpoint\nremoved.</p>\n<p>The resulting graph has the structure of a subgraph of the original graph.\nIf no nodes are removed, the resulting graph has compatible node\nindices; if neither nodes nor edges are removed, the result has\nthe same graph indices as <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_edge_type\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1423-1432\">source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/graph/struct.Graph.html#tymethod.into_edge_type\" class=\"fn\">into_edge_type</a>&lt;NewTy&gt;(self) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, NewTy, Ix&gt;<div class=\"where\">where\n    NewTy: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,</div></h4></section></summary><div class=\"docblock\"><p>Convert the graph into either undirected or directed. No edge adjustments\nare done, so you may want to go over the result to remove or add edges.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details></div></details>",0,"petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodeIndexable-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2183-2200\">source</a><a href=\"#impl-NodeIndexable-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.NodeIndexable.html\" title=\"trait petgraph::visit::NodeIndexable\">NodeIndexable</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2189-2191\">source</a><a href=\"#method.node_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.node_bound\" class=\"fn\">node_bound</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return an upper bound of the node indices in the graph\n(suitable for the size of a bitmap).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2193-2195\">source</a><a href=\"#method.to_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.to_index\" class=\"fn\">to_index</a>(&amp;self, ix: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert <code>a</code> to an integer index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2197-2199\">source</a><a href=\"#method.from_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.from_index\" class=\"fn\">from_index</a>(&amp;self, ix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a></h4></section></summary><div class='docblock'>Convert <code>i</code> to a node index. <code>i</code> must be a valid value in the graph.</div></details></div></details>","NodeIndexable","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Data-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#73-79\">source</a><a href=\"#impl-Data-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.Data.html\" title=\"trait petgraph::visit::Data\">Data</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.NodeWeight\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.NodeWeight\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" class=\"associatedtype\">NodeWeight</a> = N</h4></section><section id=\"associatedtype.EdgeWeight\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.EdgeWeight\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" class=\"associatedtype\">EdgeWeight</a> = E</h4></section></div></details>","Data","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeIndexable-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2379-2395\">source</a><a href=\"#impl-EdgeIndexable-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.EdgeIndexable.html\" title=\"trait petgraph::visit::EdgeIndexable\">EdgeIndexable</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2384-2386\">source</a><a href=\"#method.edge_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.edge_bound\" class=\"fn\">edge_bound</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return an upper bound of the edge indices in the graph\n(suitable for the size of a bitmap).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2388-2390\">source</a><a href=\"#method.to_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.to_index\" class=\"fn\">to_index</a>(&amp;self, ix: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert <code>a</code> to an integer index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2392-2394\">source</a><a href=\"#method.from_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.from_index\" class=\"fn\">from_index</a>(&amp;self, ix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a></h4></section></summary><div class='docblock'>Convert <code>i</code> to an edge index. <code>i</code> must be a valid value in the graph.</div></details></div></details>","EdgeIndexable","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#364-382\">source</a><a href=\"#impl-Clone-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"docblock\"><p>The resulting cloned graph has the same graph indices as <code>self</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#369-375\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#377-381\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeCount-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2243-2252\">source</a><a href=\"#impl-EdgeCount-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.EdgeCount.html\" title=\"trait petgraph::visit::EdgeCount\">EdgeCount</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2249-2251\">source</a><a href=\"#method.edge_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeCount.html#tymethod.edge_count\" class=\"fn\">edge_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the number of edges in the graph.</div></details></div></details>","EdgeCount","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CNodeIndex%3CIx%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1868-1876\">source</a><a href=\"#impl-IndexMut%3CNodeIndex%3CIx%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Index the <code>Graph</code> by <code>NodeIndex</code> to access node weights.</p>\n<p><strong>Panics</strong> if the node doesn’t exist.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1873-1875\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut N</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<NodeIndex<Ix>>","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CNodeIndex%3CIx%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1854-1863\">source</a><a href=\"#impl-Index%3CNodeIndex%3CIx%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Index the <code>Graph</code> by <code>NodeIndex</code> to access node weights.</p>\n<p><strong>Panics</strong> if the node doesn’t exist.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = N</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1860-1862\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;N</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<NodeIndex<Ix>>","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Create-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#222-230\">source</a><a href=\"#impl-Create-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.Create.html\" title=\"trait petgraph::data::Create\">Create</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.with_capacity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#227-229\">source</a><a href=\"#method.with_capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Create.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(nodes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, edges: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></div></details>","Create","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visitable-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2138-2152\">source</a><a href=\"#impl-Visitable-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.Visitable.html\" title=\"trait petgraph::visit::Visitable\">Visitable</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Map\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Map\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Visitable.html#associatedtype.Map\" class=\"associatedtype\">Map</a> = <a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a></h4></section></summary><div class='docblock'>The associated map type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2144-2146\">source</a><a href=\"#method.visit_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.Visitable.html#tymethod.visit_map\" class=\"fn\">visit_map</a>(&amp;self) -&gt; <a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a></h4></section></summary><div class='docblock'>Create a new visitor map</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2148-2151\">source</a><a href=\"#method.reset_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.Visitable.html#tymethod.reset_map\" class=\"fn\">reset_map</a>(&amp;self, map: &amp;mut Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Visitable.html#associatedtype.Map\" title=\"type petgraph::visit::Visitable::Map\">Map</a>)</h4></section></summary><div class='docblock'>Reset the visitor map (and resize to new size of graph if needed)</div></details></div></details>","Visitable","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<section id=\"impl-NodeCompactIndexable-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2202-2207\">source</a><a href=\"#impl-NodeCompactIndexable-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.NodeCompactIndexable.html\" title=\"trait petgraph::visit::NodeCompactIndexable\">NodeCompactIndexable</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section>","NodeCompactIndexable","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataMapMut-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#94-105\">source</a><a href=\"#impl-DataMapMut-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.DataMapMut.html\" title=\"trait petgraph::data::DataMapMut\">DataMapMut</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.node_weight_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#99-101\">source</a><a href=\"#method.node_weight_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.DataMapMut.html#tymethod.node_weight_mut\" class=\"fn\">node_weight_mut</a>(&amp;mut self, id: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>&gt;</h4></section><section id=\"method.edge_weight_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#102-104\">source</a><a href=\"#method.edge_weight_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.DataMapMut.html#tymethod.edge_weight_mut\" class=\"fn\">edge_weight_mut</a>(&amp;mut self, id: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>&gt;</h4></section></div></details>","DataMapMut","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CEdgeIndex%3CIx%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1895-1903\">source</a><a href=\"#impl-IndexMut%3CEdgeIndex%3CIx%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Index the <code>Graph</code> by <code>EdgeIndex</code> to access edge weights.</p>\n<p><strong>Panics</strong> if the edge doesn’t exist.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1900-1902\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut E</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<EdgeIndex<Ix>>","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodeCount-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2173-2181\">source</a><a href=\"#impl-NodeCount-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.NodeCount.html\" title=\"trait petgraph::visit::NodeCount\">NodeCount</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.node_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2178-2180\">source</a><a href=\"#method.node_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeCount.html#tymethod.node_count\" class=\"fn\">node_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></div></details>","NodeCount","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CEdgeIndex%3CIx%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1881-1890\">source</a><a href=\"#impl-Index%3CEdgeIndex%3CIx%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Index the <code>Graph</code> by <code>EdgeIndex</code> to access edge weights.</p>\n<p><strong>Panics</strong> if the edge doesn’t exist.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = E</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1887-1889\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;E</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<EdgeIndex<Ix>>","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetAdjacencyMatrix-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/traits_graph.rs.html#16-42\">source</a><a href=\"#impl-GetAdjacencyMatrix-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GetAdjacencyMatrix.html\" title=\"trait petgraph::visit::GetAdjacencyMatrix\">GetAdjacencyMatrix</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"docblock\"><p>The adjacency matrix for <strong>Graph</strong> is a bitmap that’s computed by\n<code>.adjacency_matrix()</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.AdjMatrix\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.AdjMatrix\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#associatedtype.AdjMatrix\" class=\"associatedtype\">AdjMatrix</a> = <a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a></h4></section></summary><div class='docblock'>The associated adjacency matrix type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.adjacency_matrix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/traits_graph.rs.html#23-35\">source</a><a href=\"#method.adjacency_matrix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.adjacency_matrix\" class=\"fn\">adjacency_matrix</a>(&amp;self) -&gt; <a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a></h4></section></summary><div class='docblock'>Create the adjacency matrix</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_adjacent\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/traits_graph.rs.html#37-41\">source</a><a href=\"#method.is_adjacent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.is_adjacent\" class=\"fn\">is_adjacent</a>(\n    &amp;self,\n    matrix: &amp;<a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a>,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Return true if there is an edge from <code>a</code> to <code>b</code>, false otherwise. <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.is_adjacent\">Read more</a></div></details></div></details>","GetAdjacencyMatrix","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#384-426\">source</a><a href=\"#impl-Debug-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#391-425\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GraphProp-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2154-2160\">source</a><a href=\"#impl-GraphProp-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GraphProp.html\" title=\"trait petgraph::visit::GraphProp\">GraphProp</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.EdgeType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.EdgeType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphProp.html#associatedtype.EdgeType\" class=\"associatedtype\">EdgeType</a> = Ty</h4></section></summary><div class='docblock'>The kind of edges in the graph.</div></details><section id=\"method.is_directed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/visit/mod.rs.html#329-331\">source</a><a href=\"#method.is_directed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GraphProp.html#method.is_directed\" class=\"fn\">is_directed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></div></details>","GraphProp","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CStableGraph%3CN,+E,+Ty,+Ix%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1268-1296\">source</a><a href=\"#impl-From%3CStableGraph%3CN,+E,+Ty,+Ix%3E%3E-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Convert a <code>StableGraph</code> into a <code>Graph</code></p>\n<p>Computes in <strong>O(|V| + |E|)</strong> time.</p>\n<p>This translates the stable graph into a graph with node and edge indices in\na compact interval without holes (like <code>Graph</code>s always are).</p>\n<p>Only if the stable graph had no vacancies after deletions (if node bound was\nequal to node count, and the same for edges), would the resulting graph have\nthe same node and edge indices as the input.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1273-1295\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(graph: <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<StableGraph<N, E, Ty, Ix>>","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1906-1914\">source</a><a href=\"#impl-Default-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"docblock\"><p>Create a new empty <code>Graph</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#1911-1913\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GraphBase-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/mod.rs.html#2130-2136\">source</a><a href=\"#impl-GraphBase-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GraphBase.html\" title=\"trait petgraph::visit::GraphBase\">GraphBase</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.NodeId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.NodeId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" class=\"associatedtype\">NodeId</a> = <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;</h4></section></summary><div class='docblock'>node identifier</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.EdgeId\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.EdgeId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" class=\"associatedtype\">EdgeId</a> = <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;</h4></section></summary><div class='docblock'>edge identifier</div></details></div></details>","GraphBase","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Build-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#135-159\">source</a><a href=\"#impl-Build-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.Build.html\" title=\"trait petgraph::data::Build\">Build</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.add_node\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#140-142\">source</a><a href=\"#method.add_node\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#tymethod.add_node\" class=\"fn\">add_node</a>(&amp;mut self, weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_edge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#143-150\">source</a><a href=\"#method.add_edge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#method.add_edge\" class=\"fn\">add_edge</a>(\n    &amp;mut self,\n    a: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    b: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a>&gt;</h4></section></summary><div class='docblock'>Add a new edge. If parallel edges (duplicate) are not allowed and\nthe edge already exists, return <code>None</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_edge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#151-158\">source</a><a href=\"#method.update_edge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#tymethod.update_edge\" class=\"fn\">update_edge</a>(\n    &amp;mut self,\n    a: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    b: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>\n) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a></h4></section></summary><div class='docblock'>Add or update the edge from <code>a</code> to <code>b</code>. Return the id of the affected\nedge.</div></details></div></details>","Build","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataMap-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#81-92\">source</a><a href=\"#impl-DataMap-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.DataMap.html\" title=\"trait petgraph::data::DataMap\">DataMap</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.node_weight\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#86-88\">source</a><a href=\"#method.node_weight\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.DataMap.html#tymethod.node_weight\" class=\"fn\">node_weight</a>(&amp;self, id: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>&gt;</h4></section><section id=\"method.edge_weight\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#89-91\">source</a><a href=\"#method.edge_weight\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.DataMap.html#tymethod.edge_weight\" class=\"fn\">edge_weight</a>(&amp;self, id: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>&gt;</h4></section></div></details>","DataMap","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromElements-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#325-337\">source</a><a href=\"#impl-FromElements-for-Graph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.FromElements.html\" title=\"trait petgraph::data::FromElements\">FromElements</a> for <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_elements\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#330-336\">source</a><a href=\"#method.from_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.FromElements.html#method.from_elements\" class=\"fn\">from_elements</a>&lt;I&gt;(iterable: I) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"petgraph/data/enum.Element.html\" title=\"enum petgraph::data::Element\">Element</a>&lt;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>, Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>&gt;&gt;,</div></h4></section></div></details>","FromElements","petgraph::graph_impl::DiGraph","petgraph::graph_impl::UnGraph"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()