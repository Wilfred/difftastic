============================================
statement
============================================

extends fun c(self: SomeMessage, ): Int {
    let a: map<Int, Int> = null;
    let b: Int = 10;

    {}
    {
        let c: Int = 20;
        c = 15;
    }

    self.description = "Tact is awesome!";
    a.asCell()!!.toString();
    b += 32;

    if (true) {}
    if (false) {}
    else {}

    if (false) {}
    else if (true) {}

    while (false) {}

    repeat (5) {}

    do {}
    until (false);

    try {}
    try {} catch (e) {}

    foreach (k, v in a) {}
    foreach (_, _ in self.m) {}

    0;
    return 0 // optional trailing/last semicolon
}

---

(source_file
  (global_function
    attributes: (function_attributes)
    name: (identifier)
    parameters: (parameter_list
      (parameter
        name: (identifier)
        type: (type_identifier)))
    result: (type_identifier)
    body: (function_body
      (let_statement
        name: (identifier)
        type: (map_type
          key: (type_identifier)
          value: (type_identifier))
        value: (null))
      (let_statement
        name: (identifier)
        type: (type_identifier)
        value: (integer))
      (block_statement)
      (block_statement
        (let_statement
          name: (identifier)
          type: (type_identifier)
          value: (integer))
        (assignment_statement
            left: (identifier)
            right: (integer)))
      (assignment_statement
        left: (field_access_expression
          object: (self)
          name: (identifier))
        right: (string))
      (expression_statement
        (method_call_expression
          object: (non_null_assert_expression
            argument: (method_call_expression
              object: (identifier)
              name: (identifier)
              arguments: (argument_list)))
          name: (identifier)
          arguments: (argument_list)))
      (augmented_assignment_statement
        left: (identifier)
        right: (integer))
      (if_statement
        condition: (boolean)
        consequence: (block_statement))
      (if_statement
        condition: (boolean)
        consequence: (block_statement)
        alternative: (else_clause
          (block_statement)))
      (if_statement
        condition: (boolean)
        consequence: (block_statement)
        alternative: (else_clause
          (if_statement
            condition: (boolean)
            consequence: (block_statement))))
      (while_statement
        condition: (boolean)
        body: (block_statement))
      (repeat_statement
        condition: (integer)
        body: (block_statement))
      (do_until_statement
        body: (block_statement)
        condition: (boolean))
      (try_statement
        body: (block_statement))
      (try_statement
        body: (block_statement)
        handler: (catch_clause
          name: (identifier)
          body: (block_statement)))
      (foreach_statement
        key: (identifier)
        value: (identifier)
        map: (identifier)
        body: (block_statement))
      (foreach_statement
        key: (identifier)
        value: (identifier)
        map: (field_access_expression
          object: (self)
          name: (identifier))
        body: (block_statement))
      (expression_statement
        (integer))
      (return_statement
        (integer))
      (comment)
)))
