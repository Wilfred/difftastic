=====================================
Single
=====================================

match x:
    1: pass
    _: pass
    TYPE_ARRAY:
        pass
    var new_var:
        pass

---

(source
  (match_statement (identifier) (match_body
    (pattern_section (integer) (body (pass_statement)))
    (pattern_section (identifier) (body (pass_statement)))
    (pattern_section (identifier) (body (pass_statement)))
    (pattern_section (pattern_binding (identifier)) (body (pass_statement)))
  )))

=====================================
Multiple
=====================================

match x:
    _:
        pass
    1, 2, 3: pass

---

(source
  (match_statement (identifier) (match_body
    (pattern_section (identifier) (body (pass_statement)))
    (pattern_section (integer) (integer) (integer)
      (body (pass_statement)))
  )))

=====================================
Arrays
=====================================

match x:
    []: pass
    [1, 3, "test", null]:
        pass
    [var start, _]: pass
    [42, ..]:
        pass

---

(source
  (match_statement (identifier) (match_body
    (pattern_section (array) (body (pass_statement)))
    (pattern_section
      (array (integer) (integer) (string) (null))
      (body (pass_statement)))
    (pattern_section
      (array (pattern_binding (identifier)) (identifier))
      (body (pass_statement)))
    (pattern_section
      (array (integer) (pattern_open_ending))
      (body (pass_statement)))
  )))

=====================================
Dicts
=====================================

match x:
    {}: pass
    {"name": "Dennis"}: pass
    {"name": "Dennis", "age": var age}: pass
    {"key": "godotisawesome", ..}: pass

---

(source
  (match_statement (identifier) (match_body
    (pattern_section (dictionary) (body (pass_statement)))
    (pattern_section
      (dictionary (pair (string) (string)))
      (body (pass_statement)))
    (pattern_section
      (dictionary
        (pair (string) (string))
        (pair (string) (pattern_binding (identifier))))
      (body (pass_statement)))
    (pattern_section
      (dictionary
        (pair (string) (string))
        (pattern_open_ending))
      (body (pass_statement)))
  )))

=====================================
Expressions
=====================================

match x:
  Hello.World: pass
  Hello.World(): pass
  function(): pass
  Color().a: pass
  [var hello, _, ..]: pass

---

(source
  (match_statement (identifier) (match_body
    (pattern_section
      (attribute (identifier) (identifier))
      (body (pass_statement)))
    (pattern_section
      (attribute (identifier) (attribute_call (identifier) (arguments)))
        (body (pass_statement)))
    (pattern_section
      (call (identifier) (arguments))
      (body (pass_statement)))
    (pattern_section
      (attribute
        (call (identifier) (arguments))
        (identifier))
      (body (pass_statement)))
    (pattern_section
      (array
        (pattern_binding (identifier))
        (identifier)
        (pattern_open_ending))
      (body (pass_statement))))))

============================================
Match: conditional expression, annotation, and call
============================================

match get_value():
	result if run_check() else fallback:
		@warning_ignore("test")
		handle_value()

---

(source
  (match_statement
    value: (call
      (identifier)
      arguments: (arguments))
    body: (match_body
      (pattern_section
        (conditional_expression
          left: (identifier)
          condition: (call
            (identifier)
            arguments: (arguments))
          right: (identifier))
        body: (body
          (annotation
            (identifier)
            arguments: (arguments
              (string)))
          (expression_statement
            (call
              (identifier)
              arguments: (arguments))))))))

============================================
Match: Simple conditional expression
============================================

match 0:
	0 if true else 2:
		pass

---

(source
  (match_statement
    value: (integer)
    body: (match_body
      (pattern_section
        (conditional_expression
          left: (integer)
          condition: (true)
          right: (integer))
        body: (body
          (pass_statement))))))

============================================
Match: Nested conditional expressions with identifiers
============================================

match value:
	x if condition else y:
		print("matched")
	a if b else c if d else e:
		print("complex ternary")

---

(source
  (match_statement
    value: (identifier)
    body: (match_body
      (pattern_section
        (conditional_expression
          left: (identifier)
          condition: (identifier)
          right: (identifier))
        body: (body
          (expression_statement
            (call
              (identifier)
              arguments: (arguments
                (string))))))
      (pattern_section
        (conditional_expression
          left: (identifier)
          condition: (identifier)
          right: (conditional_expression
            left: (identifier)
            condition: (identifier)
            right: (identifier)))
        body: (body
          (expression_statement
            (call
              (identifier)
              arguments: (arguments
                (string)))))))))

============================================
Match: Annotations within match statements
============================================

match 1:
	_:
		print(0)
	@warning_ignore("unreachable_pattern")
	1:
		print(1)

---

(source
  (match_statement
    value: (integer)
    body: (match_body
      (pattern_section
        (identifier)
        body: (body
          (expression_statement
            (call
              (identifier)
              arguments: (arguments
                (integer))))))
      (annotation
          (identifier)
          arguments: (arguments
            (string)))
      (pattern_section
        (integer)
        body: (body
          (expression_statement
            (call
              (identifier)
              arguments: (arguments
                (integer)))))))))
