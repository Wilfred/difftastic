=====================================
Ternary Expression
=====================================

class Foo {
  void Test() {
    x ? "foo" : "bar";
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (conditional_expression
            (identifier_name)
            (string_literal)
            (string_literal))))))))

=====================================
Binary Expressions
=====================================

class Foo {
  void Test() {
    x == y;
    1 + 2;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (binary_expression
            (identifier_name)
            (identifier_name)))
        (expression_statement
          (binary_expression
            (integer_literal)
            (integer_literal))))))))

=====================================
Prefix-Unary Expressions
=====================================

class Foo {
  void Test() {
    ++x;
    --y;
    typeof(x);
    sizeof(y);
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (unary_expression
            (identifier_name)))
        (expression_statement
          (unary_expression
            (identifier_name)))
        (expression_statement
          (unary_expression
          (parenthesized_expression
            (identifier_name))))
        (expression_statement
          (unary_expression
            (parenthesized_expression
              (identifier_name)))))))))

============================
Anonymous object creation with empty body
============================

void b() {
  var x = new { 
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression))))))))

============================
Anonymous object creation with single unnamed
============================

void b() {
  var x = new { 
    args
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression (identifier_name)))))))))

============================
Anonymous object creation with single named
============================

void b() {
  var x = new { 
    test = "This"
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression
                (assignment_expression
                  (identifier_name)
                  (assignment_operator)
                  (string_literal))))))))))

============================
Checked expressions
============================

void b() {
  var three = checked(1 + 2);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (checked_expression
                (binary_expression
                  (integer_literal)
                  (integer_literal))))))))))

============================
Object creation expressions
============================

void b() {
  new C.D(1, "hi");
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement
        (object_creation_expression
          (qualified_name (identifier_name) (identifier_name))
          (argument_list (integer_literal) (string_literal)))))))

============================
Implicit array creation
============================

void b() {
  var z = new [] { 1, 2, 3 };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (implicit_array_creation_expression
                (integer_literal)
                (integer_literal)
                (integer_literal)))))))))