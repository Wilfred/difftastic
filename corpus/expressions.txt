===
standalone assignment expression
===

x = 3;

---

(program
  (assignment_expression
    (lhs (identifier))
      (integer_literal (decimal_integer_literal))))

===
standalone binary expression
===

a > b;
a < b;
a == b;
a >= b;
a <= b;
a != b;
a && b;
a || b;
a & b;
a | b;
a ^ b;
a % b;
a << b;
a >> b;
a >>> b;
3 + 2;
3 - 2;
3 * 2;
9 / 3;

---

(program
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (integer_literal (decimal_integer_literal)) (integer_literal (decimal_integer_literal)))
  (binary_expression (integer_literal (decimal_integer_literal)) (integer_literal (decimal_integer_literal)))
  (binary_expression (integer_literal (decimal_integer_literal)) (integer_literal (decimal_integer_literal)))
  (binary_expression (integer_literal (decimal_integer_literal)) (integer_literal (decimal_integer_literal))))

============================
if statements
============================

if (x)
  y;

---

(program
  (if_then_else_statement
      (identifier) (identifier)))

============================
if statements with braces
============================

if (x) {
  y;
}

---

(program
  (if_then_else_statement
    (identifier) (block (identifier))))

============================
if statements with assignment without braces
============================

if (x = 3)
  y = 2;

---

(program
  (if_then_else_statement
    (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal)))
      (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal)))))

============================
if statements with assignment with braces
============================

if (x = 3) {
  y = 2;
}

---

(program
  (if_then_else_statement
    (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal)))
      (block
        (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal))))))

===
if statement without braces and one assignment in the then
===

if (x)
  y = 3;

---

(program
  (if_then_else_statement
    (identifier) (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal)))))

===
if then else statement
===

if (x = 3) {
  y = 9;
} else {
  y = 0;
}

---

(program
  (if_then_else_statement
    (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal)))
     (block (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal))))
     (block (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal))))))

===
nested if then else statements
===

if (a)
  if (b)
    c();
  else
    d();

---

(program
  (if_then_else_statement
    (identifier)
    (if_then_else_statement
      (identifier)
      (method_invocation (identifier))
      (method_invocation (identifier)))))

===
if-then shorthand
===

max = (a > b) ? a : b;

---

(program
  (assignment_expression (lhs (identifier))
    (ternary_expression
      (binary_expression (identifier) (identifier)) (identifier) (identifier))))

===
for statement
===

class ForDemo {
    public static void main(String[] args){
         for(int i=1; i<11; i++){
              System.out.println("Count is: " + i);
         }
    }
}

---

(program (class_declaration (identifier) (class_body (method_declaration (modifier) (modifier) (method_header (void_type) (method_declarator (identifier) (formal_parameter (array_type (type_identifier) (dims)) (variable_declarator_id (identifier))))) (method_body (block (for_statement (basic_for_statement (for_init (local_variable_declaration (integral_type) (variable_declarator_list (variable_declarator (variable_declarator_id (identifier)) (integer_literal (decimal_integer_literal)))))) (binary_expression (identifier) (integer_literal (decimal_integer_literal))) (update_expression (identifier)) (block (method_invocation (scoped_identifier (identifier) (identifier)) (identifier) (argument_list (binary_expression (string_literal) (identifier)))))))))))))

===
while statement
===

class WhileDemo {
    public static void main(String[] args){
        int count = 1;
        while (count < 11) {
            System.out.println("Count is: " + count);
            count++;
        }
    }
}

---

 (program
  (class_declaration
    (identifier)
    (class_body
      (method_declaration
        (modifier)
        (modifier)
        (method_header
          (void_type)
          (method_declarator
            (identifier)
            (formal_parameter
              (array_type
              (type_identifier)
                (dims))
              (variable_declarator_id
                (identifier)))))
        (method_body
          (block
            (local_variable_declaration_statement
              (local_variable_declaration
                (integral_type)
                  (variable_declarator_list
                    (variable_declarator
                      (variable_declarator_id
                        (identifier))
                      (integer_literal
                        (decimal_integer_literal))))))
                (while_statement
                  (binary_expression
                    (identifier)
                    (integer_literal
                      (decimal_integer_literal)))
                  (block
                    (method_invocation
                      (scoped_identifier
                        (identifier) (identifier))
                      (identifier)
                      (argument_list
                        (binary_expression
                          (string_literal)
                          (identifier))))
                    (update_expression
                      (identifier))))))))))

===
try-with-resources statements
===

try (FileInputStream input = new FileInputStream("file.txt")) {
  int data = input.read();
}

---

(program (try_statement (try_with_resources_statement (resource_specification (resource (type_identifier) (variable_declarator_id (identifier)) (class_instance_creation_expression (unqualified_class_instance_creation_expression (type_identifier) (argument_list (string_literal)))))) (block (local_variable_declaration_statement (local_variable_declaration (integral_type) (variable_declarator_list (variable_declarator (variable_declarator_id (identifier)) (method_invocation (identifier) (identifier))))))))))

===
assignment
===

class Beyonce {
  public void four() {
    x = 1;
  }
}


---

(program (class_declaration (identifier) (class_body (method_declaration (modifier) (method_header (void_type) (method_declarator (identifier))) (method_body (block (assignment_expression (lhs (identifier)) (integer_literal (decimal_integer_literal)))))))))

===
return statement
===

return x;
return x * y;
return x + 2;
return fire(x);

---

(program
  (return_statement (identifier))
  (return_statement (binary_expression (identifier) (identifier)))
  (return_statement (binary_expression (identifier) (integer_literal (decimal_integer_literal))))
  (return_statement (method_invocation (identifier) (argument_list (identifier)))))

===
normal_annotation
===

@SuppressWarnings(value = "unchecked")
@GwtCompatible(emulated = true)
class Duck {

}

---

(program
  (class_declaration
    (modifier
      (normal_annotation
        (identifier)
        (element_value_pair_list
          (element_value_pair
            (identifier)
            (element_value
              (string_literal))))))
    (modifier
      (normal_annotation
        (identifier)
        (element_value_pair_list
          (element_value_pair
            (identifier)
            (element_value
              (boolean_literal (true)))))))
    (identifier)
    (class_body)))

===
marker annotation
===

@Override
class Quack {
  @bar
  public void foo() {

  }
}

---

(program (class_declaration (modifier (marker_annotation (identifier))) (identifier) (class_body (method_declaration (modifier (marker_annotation (identifier))) (modifier) (method_header (void_type) (method_declarator (identifier))) (method_body (block))))))

===
single element annotation
===

@Duck(waddle.swim)
@SuppressWarnings("unchecked")
class Quack {

}

---

(program (class_declaration (modifier (single_element_annotation (identifier) (element_value (scoped_identifier (identifier) (identifier))))) (modifier (single_element_annotation (identifier) (element_value (string_literal)))) (identifier) (class_body)))

===
lambda expression
===

class LambdaTest {
    void singleton() {
        version -> create;
    }
}

---

(program (class_declaration (identifier) (class_body (method_declaration (method_header (void_type) (method_declarator (identifier))) (method_body (block (lambda_expression (identifier) (lambda_body (identifier))))))))) 

===
switch statement
===

public class SwitchDemo {
    public static void main(String[] args) {

        int destinysChild = 2;
        String destinysChildString;
        switch (destinysChild) {
            case 1:  destinysChildString = "Beyonce";
                     break;
            case 2:  destinysChildString = "Kelly";
                     break;
            case 3:  destinysChildString = "Michelle";
                     break;
            default: destinysChildString = "Invalid";
                     break;
        }
        System.out.println(destinysChildString);
    }
}

---

(program (class_declaration (modifier) (identifier) (class_body (method_declaration (modifier) (modifier) (method_header (void_type) (method_declarator (identifier) (formal_parameter (array_type (type_identifier) (dims)) (variable_declarator_id (identifier))))) (method_body (block (local_variable_declaration_statement (local_variable_declaration (integral_type) (variable_declarator_list (variable_declarator (variable_declarator_id (identifier)) (integer_literal (decimal_integer_literal)))))) (local_variable_declaration_statement (local_variable_declaration (type_identifier) (variable_declarator_list (variable_declarator (variable_declarator_id (identifier)))))) (switch_statement (identifier) (switch_block (switch_label (integer_literal (decimal_integer_literal))) (assignment_expression (lhs (identifier)) (string_literal)) (break_statement) (switch_label (integer_literal (decimal_integer_literal))) (assignment_expression (lhs (identifier)) (string_literal)) (break_statement) (switch_label (integer_literal (decimal_integer_literal))) (assignment_expression (lhs (identifier)) (string_literal)) (break_statement) (switch_label) (assignment_expression (lhs (identifier)) (string_literal)) (break_statement))) (method_invocation (scoped_identifier (identifier) (identifier)) (identifier) (argument_list (identifier)))))))))

===
type arguments
===

class Box <T> {
  private T theObject;
  public Box( T arg) { theObject = arg; }
  // more code
}

---

(program
  (class_declaration
    (identifier)
      (type_parameters
        (type_parameter
          (identifier)))
    (class_body
      (field_declaration
        (modifier)
          (type_identifier)
          (variable_declarator_list
            (variable_declarator
              (variable_declarator_id
                (identifier)))))
          (constructor_declaration
            (modifier)
              (constructor_declarator
                (identifier)
                  (formal_parameter
                    (type_identifier)
                    (variable_declarator_id
                      (identifier))))
              (constructor_body
                (assignment_expression
                  (lhs (identifier))
                    (identifier))))
          (comment))))

===
wildcard
===

class WildcardDemo {
  List<? extends B> a;
}

---

(program
  (class_declaration
    (identifier)
      (class_body
        (field_declaration
          (generic_type
            (type_identifier)
              (type_argument
                (wildcard
                  (type_identifier))))
            (variable_declarator_list
              (variable_declarator
                (variable_declarator_id
                  (identifier))))))))

===
type arguments with generic types
===

class someClass <T> {
  public List<T> someMethod() {
     List< T > list = Collections.< T >emptyList();
     return list;
  }
  public static <S> void anotherMethod(S arg) {
     List< S > list = Collections.< S >emptyList();
  }
}

---

(program
  (class_declaration
    (identifier)
    (type_parameters
      (type_parameter
        (identifier)))
      (class_body
        (method_declaration
          (modifier)
            (method_header
              (generic_type
                (type_identifier)
                  (type_argument
                    (type_identifier)))
              (method_declarator
                (identifier)))
            (method_body
              (block
                (binary_expression
                  (binary_expression
                    (identifier)
                    (identifier))
                  (assignment_expression
                    (lhs
                      (identifier))
                      (method_invocation
                        (identifier)
                          (type_argument
                            (type_identifier))
                          (identifier))))
                            (return_statement
                              (identifier)))))
        (method_declaration
          (modifier)
          (modifier)
            (method_header
              (type_parameters
                (type_parameter
                  (identifier)))
              (void_type)
                (method_declarator
                  (identifier)
                    (formal_parameter
                      (type_identifier)
                        (variable_declarator_id
                          (identifier)))))
            (method_body
              (block
                (binary_expression
                  (binary_expression
                    (identifier)
                    (identifier))
                  (assignment_expression
                    (lhs
                      (identifier))
                    (method_invocation
                      (identifier)
                        (type_argument
                          (type_identifier))
                      (identifier))))))))))

===
empty type arguments
===

Box<Integer> integerBox = new Box<>();

---

(program (binary_expression (binary_expression (identifier) (identifier)) (assignment_expression (lhs (identifier)) (class_instance_creation_expression (unqualified_class_instance_creation_expression (generic_type (type_identifier)))))))
