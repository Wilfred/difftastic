=====================================
Ternary Expression
=====================================

class Foo {
  void Test() {
    x ? "foo" : "bar";
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (conditional_expression
            (identifier_name)
            (string_literal)
            (string_literal))))))))

=====================================
Binary Expressions
=====================================

class Foo {
  void Test() {
    x == y;
    1 + 2;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (binary_expression
            (identifier_name)
            (identifier_name)))
        (expression_statement
          (binary_expression
            (integer_literal)
            (integer_literal))))))))

=====================================
Prefix-Unary Expressions
=====================================

class Foo {
  void Test() {
    ++x;
    --y;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (prefix_unary_expression
            (identifier_name)))
        (expression_statement
          (prefix_unary_expression
            (identifier_name))))))))

============================
Anonymous object creation with empty body
============================

void b() {
  var x = new {
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression))))))))

============================
Anonymous object creation with single unnamed
============================

void b() {
  var x = new {
    args
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression (identifier_name)))))))))

============================
Anonymous object creation with single named
============================

void b() {
  var x = new {
    test = "This"
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression
                (assignment_expression
                  (identifier_name)
                  (assignment_operator)
                  (string_literal))))))))))

============================
Checked expressions
============================

void b() {
  var three = checked(1 + 2);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (checked_expression
                (binary_expression
                  (integer_literal)
                  (integer_literal))))))))))

============================
Object creation expressions
============================

void b() {
  new C.D(1, "hi");
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement
        (object_creation_expression
          (qualified_name (identifier_name) (identifier_name))
          (argument_list (integer_literal) (string_literal)))))))

============================
Anonymous method expressions
============================

void a() {
  delegate(int a) {
    return a;
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement
        (anonymous_method_expression
          (parameter_list (parameter (predefined_type) (identifier_name)))
          (block
            (return_statement (identifier_name))))))))

============================
Implicit array creation
============================

void b() {
  var z = new [] { 1, 2, 3 };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (implicit_array_creation_expression
                (integer_literal)
                (integer_literal)
                (integer_literal)))))))))

============================
Stackalloc implicit array
============================

void b() {
  var z = stackalloc [] { 1, 2, 3 };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (implicit_stack_alloc_array_creation_expression
                (integer_literal)
                (integer_literal)
                (integer_literal)))))))))

============================
Makeref
============================

void b() {
  var gp = __makeref(g);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (make_ref_expression
                (identifier_name)))))))))

============================
Postfix unary
============================

void b() {
  a--;
  a++;
  var b=a!;
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement (postfix_unary_expression (identifier_name)))
      (expression_statement (postfix_unary_expression (identifier_name)))
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (postfix_unary_expression
                (identifier_name)))))))))

============================
__reftype
============================

void b() {
  var z = __reftype(g);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (ref_type_expression
                (identifier_name)))))))))

============================
__refvalue
============================

void b() {
  var z = __refvalue(g, int);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (ref_value_expression
                (identifier_name)
                (predefined_type)))))))))

============================
sizeof
============================

void b() {
  var z = sizeof(int);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (size_of_expression
                (predefined_type)))))))))

============================
typeof
============================

void b() {
  var z = typeof(int);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (type_of_expression
                (predefined_type)))))))))

============================
switch expression
============================

void b() {
  var r = operation switch {
      1 => "one",
      2 => "two",
      _ => "more"
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (identifier_name)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (switch_expression
                (identifier_name)
                (switch_expression_arm
                  (constant_pattern (integer_literal))
                  (string_literal))
                (switch_expression_arm
                  (constant_pattern (integer_literal))
                  (string_literal))
                (switch_expression_arm
                  (discard_pattern)
                  (string_literal))))))))))

=====================================
await Expression
=====================================

class Foo {
  void Test() {
    await x;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (await_expression
            (identifier_name))))))))
