============================================
Strings
============================================

"A string with \"double\" and 'single' quotes";
'A string with "double" and \'single\' quotes';
'\\'
"\\"

----

(program
  (expression_statement (string))
  (expression_statement (string))
  (expression_statement (string))
  (expression_statement (string)))

============================================
Template strings
============================================

`one line`;
`multi
  line`;

`multi
  ${2 + 2}
  hello
  ${1 + 1, 2 + 2}
  line`;

`$$$$`;
`$$$$${ 1 }`;

`\ `

`The command \`git ${args.join(' ')}\` exited with an unexpected code: ${exitCode}. The caller should either handle this error, or expect that exit code.`

----

(program
  (expression_statement (template_string))
  (expression_statement (template_string))
  (expression_statement (template_string
    (template_substitution
      (binary_expression (number) (number)))
    (template_substitution (sequence_expression
      (binary_expression (number) (number))
      (binary_expression (number) (number))))))
  (expression_statement (template_string))
  (expression_statement (template_string
    (template_substitution (number))))
	(expression_statement (template_string))
  (expression_statement (template_string
    (template_substitution (call_expression
      (member_expression (identifier) (property_identifier))
      (arguments (string))))
    (template_substitution (identifier)))))

============================================
Function calls with template strings
============================================

f `hello`;

---

(program
  (expression_statement (call_expression (identifier) (template_string))))

============================================
Numbers
============================================

101;
3.14;
3.14e+1;
0x1ABCDEFabcdef;
0o7632157312;
0b1010101001;
1e+3;

---

(program
  (expression_statement (number))
  (expression_statement (number))
  (expression_statement (number))
  (expression_statement (number))
  (expression_statement (number))
  (expression_statement (number))
  (expression_statement (number)))

============================================
Variables
============================================

theVar;
theVar2;
$_;

---

(program
  (expression_statement (identifier))
  (expression_statement (identifier))
  (expression_statement (identifier)))

============================================
Multi-line variable declarations
============================================

var a = b
  , c = d
  , e = f;

---

(program
  (variable_declaration
    (variable_declarator (identifier) (identifier))
    (variable_declarator (identifier) (identifier))
    (variable_declarator (identifier) (identifier))))

============================================
Booleans
============================================

this;
null;
undefined;
true;
false;

---

(program
  (expression_statement (this_expression))
  (expression_statement (null))
  (expression_statement (undefined))
  (expression_statement (true))
  (expression_statement (false)))

============================================
Regexps
============================================

/one\\/;
/one/g;
/one/i;
/one/gim;
/on\/e/gim;
/on[^/]afe/gim;

---

(program
  (expression_statement (regex))
  (expression_statement (regex))
  (expression_statement (regex))
  (expression_statement (regex))
  (expression_statement (regex))
  (expression_statement (regex)))

============================================
Objects
============================================

{};
{ a: "b" };
{ c: "d", "e": f, 1: 2 };
{
  g: h
}

---

(program
  (expression_statement (object))
  (expression_statement (object
    (pair (property_identifier) (string))))
  (expression_statement (object
    (pair (property_identifier) (string))
    (pair (string) (identifier))
    (pair (number) (number))))
  (expression_statement (object
    (pair (property_identifier) (identifier)))))

============================================
Objects with shorthand properties
============================================

x = {a, b, get};
y = {a,};

---

(program
  (expression_statement (assignment_expression
    (identifier)
    (object (shorthand_property_identifier) (shorthand_property_identifier) (shorthand_property_identifier))))
  (expression_statement (assignment_expression
    (identifier)
    (object (shorthand_property_identifier)))))

============================================
Objects with method definitions
============================================

{
  foo: true,

  add(a, b) {
    return a + b;
  },

  get bar() { return c; },

  set bar(a) { c = a; },

  *barGenerator() { yield c; },

  get() { return 1; }
};

---

(program
  (expression_statement (object
    (pair (property_identifier) (true))
    (method_definition
      (property_identifier)
      (formal_parameters (identifier) (identifier))
      (statement_block
        (return_statement (binary_expression (identifier) (identifier)))))
    (method_definition
      (property_identifier)
      (formal_parameters)
      (statement_block
        (return_statement (identifier))))
    (method_definition
      (property_identifier)
      (formal_parameters (identifier))
      (statement_block
        (expression_statement (assignment_expression (identifier) (identifier)))))
    (method_definition
      (property_identifier)
      (formal_parameters)
      (statement_block
        (expression_statement (yield_expression (identifier)))))
    (method_definition
      (property_identifier)
      (formal_parameters)
      (statement_block
        (return_statement (number)))))))

============================================
Objects with reserved words for keys
============================================

{
  get: function () {},

  set: function () {},

  static: true,

  async: true
};

---

(program
  (expression_statement (object
    (pair
      (property_identifier)
      (function (formal_parameters) (statement_block)))
    (pair
      (property_identifier)
      (function (formal_parameters) (statement_block)))
    (pair (property_identifier) (true))
    (pair (property_identifier) (true)))))

============================================
Classes
============================================

class Foo {
  static one(a) { return a; };
  two(b) { return b; }
  three(c) { return c; }
}

class Foo extends require('another-class') {
  constructor() {
    super()
  }
}

---

(program
  (class
    (identifier)
    (class_body
      (method_definition
        (property_identifier)
        (formal_parameters (identifier))
        (statement_block (return_statement (identifier))))
      (method_definition
        (property_identifier)
        (formal_parameters (identifier))
        (statement_block (return_statement (identifier))))
      (method_definition
        (property_identifier)
        (formal_parameters (identifier))
        (statement_block (return_statement (identifier))))))

  (class
    (identifier)
    (class_heritage (call_expression (identifier) (arguments (string))))
    (class_body
      (method_definition
        (property_identifier)
        (formal_parameters)
        (statement_block
          (expression_statement (call_expression (super) (arguments))))))))

============================================
Class Property Fields
============================================

class Foo {
	static foo = 2
}

---

(program
  (class
    (identifier)
    (class_body
      (public_field_definition (property_identifier) (number)))))

============================================
Arrays
============================================

[];
[ "item1" ];
[ "item1", ];
[ "item1", item2 ];
[ , item2 ];
[ item2 = 5 ];

---

(program
  (expression_statement (array))
  (expression_statement (array (string)))
  (expression_statement (array (string)))
  (expression_statement (array (string) (identifier)))
  (expression_statement (array (identifier)))
  (expression_statement (array (assignment_expression (identifier) (number)))))

============================================
Functions
============================================

[
  function() {},
  function(arg1, arg2) {
    arg2;
  },
  function stuff() {}
]

---

(program
  (expression_statement (array
    (function
      (formal_parameters)
      (statement_block))
    (function
      (formal_parameters (identifier) (identifier))
      (statement_block
        (expression_statement (identifier))))
    (function
      (identifier)
      (formal_parameters)
      (statement_block)))))

===================================================
Arrow functions
===================================================

a => 1;
() => 2;
(d, e) => 3;
(f, g) => {
  return h;
};

---

(program
  (expression_statement (arrow_function
    (identifier)
    (number)))
  (expression_statement (arrow_function
    (formal_parameters)
    (number)))
  (expression_statement (arrow_function
    (formal_parameters (identifier) (identifier))
    (number)))
  (expression_statement (arrow_function
    (formal_parameters (identifier) (identifier))
    (statement_block
      (return_statement (identifier))))))

============================================
Generator Functions
============================================

[
  function *() {},
  function *generateStuff(arg1, arg2) {
    yield;
    yield arg2;
  }
]

---

(program
  (expression_statement (array
    (generator_function
      (formal_parameters)
      (statement_block))
    (generator_function
      (identifier)
      (formal_parameters (identifier) (identifier))
      (statement_block
        (expression_statement (yield_expression))
        (expression_statement (yield_expression (identifier))))))))

============================================
Property access
============================================

x.someProperty;
x[someVariable];
x["some-string"];

---

(program
  (expression_statement (member_expression (identifier) (property_identifier)))
  (expression_statement (subscript_expression (identifier) (identifier)))
  (expression_statement (subscript_expression (identifier) (string))))

============================================
Chained Property access
============================================

return returned.promise()
  .done( newDefer.resolve )
  .fail( newDefer.reject )

---

(program (return_statement
  (call_expression
    (member_expression
      (call_expression
        (member_expression
          (call_expression
            (member_expression (identifier) (property_identifier))
            (arguments))
          (property_identifier))
        (arguments (member_expression (identifier) (property_identifier))))
      (property_identifier))
  (arguments (member_expression (identifier) (property_identifier))))))

============================================
Chained callbacks
============================================

return this.map(function (a) {
  return a.b;
})

// a comment

.filter(function (c) {
  return c.d;
})

---


(program (return_statement
  (call_expression
    (member_expression
      (call_expression
        (member_expression (this_expression) (property_identifier))
        (arguments
          (function (formal_parameters (identifier)) (statement_block
            (return_statement (member_expression (identifier) (property_identifier)))))))
        (comment)
      (property_identifier))
      (arguments (function (formal_parameters (identifier)) (statement_block
        (return_statement (member_expression (identifier) (property_identifier)))))))))

============================================
Function calls
============================================

x.someMethod(arg1, "arg2");
function(x, y) {

}(a, b);

---

(program
  (expression_statement (call_expression
    (member_expression (identifier) (property_identifier))
    (arguments (identifier) (string))))
  (expression_statement (call_expression
    (function
      (formal_parameters (identifier) (identifier))
      (statement_block))
    (arguments (identifier) (identifier)))))

============================================
Constructor calls
============================================

new module.Klass(1, "two");
new Thing;

---

(program
  (expression_statement (new_expression (call_expression
    (member_expression (identifier) (property_identifier))
    (arguments (number) (string)))))
  (expression_statement (new_expression
    (identifier))))

============================================
Await Expressions
============================================

await asyncFunction();
await asyncPromise;

---

(program
  (expression_statement
    (await_expression
      (call_expression (identifier) (arguments))))
  (expression_statement (await_expression (identifier))))

============================================
Async Functions and Methods
============================================

async function foo() {}

{
  async bar() {
  }
}

class Foo {
  async bar() {}
}

async (a) => { return foo; };

---

(program
  (function
    (identifier)
    (formal_parameters)
    (statement_block))
  (expression_statement
    (object
      (method_definition
        (property_identifier)
        (formal_parameters)
        (statement_block))))
  (class (identifier) (class_body
    (method_definition
      (property_identifier)
      (formal_parameters)
      (statement_block))))
  (expression_statement
    (arrow_function
      (formal_parameters (identifier))
      (statement_block
        (return_statement (identifier))))))

============================================
Math operators
============================================

i++;
i--;
i + j * 3 - j % 5;
+x;
-x;

---

(program
  (expression_statement (update_expression (identifier)))
  (expression_statement (update_expression (identifier)))
  (expression_statement (binary_expression
    (binary_expression
      (identifier)
      (binary_expression (identifier) (number)))
    (binary_expression (identifier) (number))))
  (expression_statement (unary_expression (identifier)))
  (expression_statement (unary_expression (identifier))))

============================================
Boolean operators
============================================

i || j;
i && j;
!a && !b || !c && !d;

---

(program
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression
    (binary_expression
      (unary_expression (identifier))
      (unary_expression (identifier)))
    (binary_expression
      (unary_expression (identifier))
      (unary_expression (identifier))))))

============================================
Bitwise operators
============================================

i >> j;
i >>= j;
i >>> j;
i >>>= j;
i << j;
i <<= j;
i & j;
i | j;
~i ^ ~j

---

(program
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression
    (unary_expression (identifier))
    (unary_expression (identifier)))))

============================================
Relational operators
============================================

x < y;
x <= y;
x == y;
x === y;
x != y;
x !== y;
x >= y;
x > y;

---

(program
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier))))

==============================================
Assignments
==============================================

x = 0;
x.y = 0;
x["y"] = 0;
async = 0;

---

(program
  (expression_statement (assignment_expression
    (identifier)
    (number)))
  (expression_statement (assignment_expression
    (member_expression (identifier) (property_identifier))
    (number)))
  (expression_statement (assignment_expression
    (subscript_expression (identifier) (string))
    (number)))
  (expression_statement (assignment_expression
    (identifier)
    (number))))

==============================================
The comma operator
==============================================

a = 1, b = 2;
c = {d: (3, 4 + 5, 6)};

---

(program
  (expression_statement (sequence_expression
    (assignment_expression (identifier) (number))
    (assignment_expression (identifier) (number))))
  (expression_statement
    (assignment_expression (identifier) (object
      (pair
        (property_identifier)
        (parenthesized_expression (sequence_expression
          (number)
          (sequence_expression
            (binary_expression (number) (number))
            (number)))))))))

==============================================
Ternaries
==============================================

condition ? case1 : case2;

x.y = some.condition ?
  some.case :
  some.other.case;
---

(program
  (expression_statement (ternary_expression
    (identifier) (identifier) (identifier)))
  (expression_statement (assignment_expression
    (member_expression (identifier) (property_identifier))
    (ternary_expression
      (member_expression (identifier) (property_identifier))
      (member_expression (identifier) (property_identifier))
      (member_expression (member_expression (identifier) (property_identifier)) (property_identifier))))))

==============================================
Type operators
==============================================

typeof x;
x instanceof String;

---

(program
  (expression_statement (unary_expression (identifier)))
  (expression_statement (binary_expression (identifier) (identifier))))

============================================
The delete operator
============================================

delete thing['prop'];
true ? delete thing.prop : null;

---

(program
  (expression_statement
    (unary_expression (subscript_expression (identifier) (string))))
  (expression_statement
    (ternary_expression (true)
      (unary_expression (member_expression (identifier) (property_identifier)))
      (null))))

============================================
The void operator
============================================

a = void b()

---

(program (expression_statement (assignment_expression
  (identifier)
  (unary_expression (call_expression (identifier) (arguments))))))

==============================================
Augmented assignments
==============================================

s |= 1;
t %= 2;
w ^= 3;
x += 4;
y.z *= 5;
async += 1;

---

(program
  (expression_statement
    (augmented_assignment_expression (identifier) (number)))
  (expression_statement
    (augmented_assignment_expression (identifier) (number)))
  (expression_statement
    (augmented_assignment_expression (identifier) (number)))
  (expression_statement
    (augmented_assignment_expression (identifier) (number)))
  (expression_statement
    (augmented_assignment_expression (member_expression (identifier) (property_identifier)) (number)))
  (expression_statement
    (augmented_assignment_expression (identifier) (number))))

==============================================
Operator precedence
==============================================

a <= b && c >= d;
a.b = c ? d : e;
a && b(c) && d;
a && new b(c) && d;
typeof a == b && c instanceof d

---

(program
  (expression_statement (binary_expression
    (binary_expression (identifier) (identifier))
    (binary_expression (identifier) (identifier))))
  (expression_statement (assignment_expression
    (member_expression (identifier) (property_identifier))
    (ternary_expression (identifier) (identifier) (identifier))))
  (expression_statement (binary_expression
    (binary_expression
      (identifier)
      (call_expression (identifier) (arguments (identifier))))
    (identifier)))
  (expression_statement (binary_expression
    (binary_expression
      (identifier)
      (new_expression (call_expression (identifier) (arguments (identifier)))))
    (identifier)))
  (expression_statement (binary_expression
    (binary_expression
      (unary_expression (identifier))
      (identifier))
    (binary_expression (identifier) (identifier)))))

==============================================
Simple JSX elements
==============================================

a = <div className='b' tabIndex=1 />;
b = <div>a <span>b</span> c</div>;

---

(program
  (expression_statement (assignment_expression
    (identifier)
    (jsx_self_closing_element
      (identifier)
      (jsx_attribute (property_identifier) (string))
      (jsx_attribute (property_identifier) (number)))))
  (expression_statement (assignment_expression
    (identifier)
    (jsx_element
      (jsx_opening_element (identifier))
      (jsx_text)
      (jsx_element
        (jsx_opening_element (identifier))
        (jsx_text)
        (jsx_closing_element (identifier)))
      (jsx_text)
      (jsx_closing_element (identifier))))))

==============================================
Expressions within JSX elements
==============================================

a = <a b c={d}> e {f} g </a>
h = <i>{...j}</i>
b = <Text {...j} />
b = <Text {...j}></Text>


---

(program
  (expression_statement (assignment_expression
    (identifier)
    (jsx_element
      (jsx_opening_element (identifier)
        (jsx_attribute (property_identifier))
        (jsx_attribute (property_identifier) (jsx_expression (identifier))))
      (jsx_text)
      (jsx_expression (identifier))
      (jsx_text)
      (jsx_closing_element (identifier)))))
  (expression_statement (assignment_expression
    (identifier)
    (jsx_element
      (jsx_opening_element (identifier))
      (jsx_expression (spread_element (identifier)))
      (jsx_closing_element (identifier)))))
  (expression_statement (assignment_expression
    (identifier)
    (jsx_self_closing_element
      (identifier)
      (jsx_expression (spread_element (identifier))))))
  (expression_statement (assignment_expression
    (identifier)
    (jsx_element
      (jsx_opening_element
        (identifier)
        (jsx_expression (spread_element (identifier))))
      (jsx_closing_element (identifier))))))


==============================================
Expressions with rest elements
==============================================

foo(...rest)

---

(program
  (expression_statement
    (call_expression (identifier) (arguments (spread_element (identifier))))))

==============================================
Forward slashes after parenthesized expressions
==============================================

(foo - bar) / baz
if (foo - bar) /baz/

---

(program
  (expression_statement
    (binary_expression
      (parenthesized_expression (binary_expression (identifier) (identifier)))
      (identifier)))
  (if_statement
    (parenthesized_expression (binary_expression (identifier) (identifier)))
    (expression_statement (regex))))

==============================================
Non-breaking spaces as whitespace
==============================================

⁠// Type definitions for Dexie v1.4.1
﻿// Project: https://github.com/dfahlander/Dexie.js
​// Definitions by: David Fahlander <http://github.com/dfahlander>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

---

(program (comment) (comment) (comment) (comment))

==============================================
Yield expressions
==============================================

yield db.users.where('[endpoint+email]')

---

(program
  (expression_statement
    (yield_expression
      (call_expression
        (member_expression
          (member_expression (identifier) (property_identifier))
          (property_identifier))
        (arguments (string))))))
