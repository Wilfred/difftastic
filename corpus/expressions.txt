============================================
Identifiers
============================================

fn main() {
  abc;
}

---

(source_file
  (function_item (identifier) (parameters) (block
    (identifier))))

============================================
Unary operator expressions
============================================

-num;
!bits;
*boxed_thing;

---

(source_file
  (unary_expression (identifier))
  (unary_expression (identifier))
  (unary_expression (identifier)))

============================================
Reference expressions
============================================

&a;
&mut self.name;

---

(source_file
  (reference_expression (identifier))
  (reference_expression (mutable_specifier) (field_expression (self) (identifier))))

============================================
Binary operator expressions
============================================

a * b;
a / b;
a % b;
a + b;
a - b;
a >> b;
a << b;
a == b;
a && b;
a || b;

---

(source_file
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier))
  (binary_expression (identifier) (identifier)))

============================================
Grouped expressions
============================================

(0);
(2 * (3 + 4));

---

(source_file
  (number_literal)
  (binary_expression (number_literal) (binary_expression (number_literal) (number_literal))))

============================================
Range expressions
============================================

1..2;
3..;
..4;
..;
1..b;
a..b;

---

(source_file
  (range_expression (number_literal) (number_literal))
  (range_expression (number_literal))
  (range_expression (number_literal))
  (range_expression)
  (range_expression (number_literal) (identifier))
  (range_expression (identifier) (identifier)))

============================================
Assignment expressions
============================================

x = y;

---

(source_file
  (binary_expression (assignment_expression (identifier) (identifier))))

============================================
Compound assignment expressions
============================================

x += 1;
x += y;

---

(source_file
  (binary_expression (compound_assignment_expr (identifier) (number_literal)))
  (binary_expression (compound_assignment_expr (identifier) (identifier))))

============================================
Type cast expressions
============================================

1000 as u8;
let character = integer as char;
let size: f64 = len(values) as f64;

---

(source_file
  (binary_expression (type_cast_expression (number_literal) (primitive_type)))
  (let_declaration (identifier) (binary_expression
    (type_cast_expression (identifier) (primitive_type))))
  (let_declaration (identifier) (primitive_type) (binary_expression
    (type_cast_expression (call_expression (identifier) (arguments (identifier))) (primitive_type)))))

============================================
Call expressions
============================================

foo();
add(1i32, 2i32);

---

(source_file
  (call_expression (identifier) (arguments))
  (call_expression (identifier) (arguments (number_literal) (number_literal))))

============================================
Array expressions
============================================

[];
[1, 2, 3];
["a", "b", "c"];
[0; 128];

---

(source_file
  (array_expression)
  (array_expression (number_literal) (number_literal) (number_literal))
  (array_expression (string_literal) (string_literal) (string_literal))
  (array_expression (number_literal) (number_literal)))

============================================
Tuple expressions
============================================

();
(0,);
let (x, y, z) = (1, 2, 3);

---

(source_file
  (unit_expression)
  (tuple_expression (number_literal))
  (let_declaration
    (tuple_pattern (identifier) (identifier) (identifier))
    (tuple_expression (number_literal) (number_literal) (number_literal))))

============================================
Struct expressions
============================================

NothingInMe {};
Point {x: 10.0, y: 20.0};
let a = SomeStruct { field1, field2: expression, field3 };
let u = game::User {name: "Joe", age: 35, score: 100_000};

---

(source_file
  (struct_expression (type_identifier)
    (field_initializer_list))
  (struct_expression (type_identifier)
    (field_initializer_list
      (field_initializer (identifier) (number_literal))
      (field_initializer (identifier) (number_literal))))
  (let_declaration
    (identifier)
    (struct_expression
      (type_identifier)
      (field_initializer_list
        (shorthand_field_identifier)
        (field_initializer (identifier) (identifier))
        (shorthand_field_identifier))))
  (let_declaration
    (identifier)
    (struct_expression
      (scoped_type_identifier (identifier) (type_identifier))
      (field_initializer_list
        (field_initializer (identifier) (string_literal))
        (field_initializer (identifier) (number_literal))
        (field_initializer (identifier) (number_literal))))))

============================================
If expressions
============================================

fn main() {
  if n == 1 {
  } else if n == 2 {
  } else {
  }
}

let y = if x == 5 { 10 } else { 15 };

---

(source_file
  (function_item (identifier) (parameters) (block
    (if_expression (binary_expression (identifier) (number_literal)) (block)
    (else_tail (if_expression (binary_expression (identifier) (number_literal)) (block)
    (else_tail (block)))))))
  (let_declaration (identifier)
    (if_expression (binary_expression (identifier) (number_literal)) (block (number_literal))
    (else_tail (block (number_literal))))))

============================================
If let expressions
============================================

if let ("Bacon", b) = dish {
}

---

(source_file
  (if_let_expression
    (tuple_pattern (string_literal) (identifier))
    (identifier)
    (block)))

============================================
While let expressions
============================================

while let ("Bacon", b) = dish {
}

---

(source_file
  (while_let_expression
    (tuple_pattern (string_literal) (identifier))
    (identifier)
    (block)))

============================================
Match expressions
============================================

match x {
    1 => "one",
    2 => "two",
    3 => "three",
    _ => "something else",
}

let msg = match x {
    0 | 1 | 10 => "one of zero, one, or ten",
    y if y < 20 => "less than 20, but not zero, one, or ten",
    y if y == 200 => "200 (but this is not very stylish)",
    _ => "something else",
};

---

(source_file
  (match_expression (identifier)
    (match_arm (match_pattern (number_literal)) (string_literal))
    (match_arm (match_pattern (number_literal)) (string_literal))
    (match_arm (match_pattern (number_literal)) (string_literal))
    (match_arm (match_pattern) (string_literal)))
  (let_declaration (identifier) (match_expression (identifier)
    (match_arm (match_pattern (number_literal) (number_literal) (number_literal)) (string_literal))
    (match_arm (match_pattern (identifier) (binary_expression (identifier) (number_literal))) (string_literal))
    (match_arm (match_pattern (identifier) (binary_expression (identifier) (number_literal))) (string_literal))
    (match_arm (match_pattern) (string_literal)))))

============================================
While expressions
============================================

while !done {
  done = true;
}

---

(source_file
  (while_expression (unary_expression (identifier)) (block
    (binary_expression (assignment_expression (identifier) (boolean_literal))))))

============================================
Loop expressions
============================================

'outer: loop {
  'inner: loop {
    break 'outer;
  }
}

---

(source_file
  (loop_expression (loop_label (identifier)) (block
    (loop_expression (loop_label (identifier)) (block
      (break_expression (loop_label (identifier))))))))

============================================
For expressions
============================================

for e in v {
  bar(e);
}

for i in 0..256 {
  bar(i);
}

'outer: for x in 0..10 {
    'inner: for y in 0..10 {
        if x % 2 == 0 { continue 'outer; }
        if y % 2 == 0 { continue 'inner; }
    }
}

---

(source_file
  (for_expression (identifier) (identifier) (block
    (call_expression (identifier) (arguments (identifier)))))
  (for_expression (identifier) (range_expression (number_literal) (number_literal)) (block
    (call_expression (identifier) (arguments (identifier)))))
  (for_expression (loop_label (identifier)) (identifier) (range_expression (number_literal) (number_literal)) (block
    (for_expression (loop_label (identifier)) (identifier) (range_expression (number_literal) (number_literal)) (block
      (if_expression (binary_expression (binary_expression (identifier) (number_literal)) (number_literal)) (block
        (continue_expression (loop_label (identifier)))))
      (if_expression (binary_expression (binary_expression (identifier) (number_literal)) (number_literal)) (block
        (continue_expression (loop_label (identifier))))))))))

============================================
Field expressions
============================================

mystruct.myfield;
foo().x;
value.0.1.iter();

---

(source_file
  (field_expression (identifier) (identifier))
  (field_expression (call_expression (identifier) (arguments)) (identifier))
  (call_expression
    (field_expression
      (field_expression (field_expression (identifier) (number_literal)) (number_literal))
      (identifier))
    (arguments)))

============================================
Method-call expressions
============================================

mystruct.foo();

---

(source_file (call_expression (field_expression (identifier) (identifier)) (arguments)))

============================================
Index expressions
============================================

([1, 2, 3, 4])[0];
arr[10];
arr[n];

---

(source_file
  (array_expression (number_literal) (number_literal) (number_literal) (number_literal)) (number_literal)
  (identifier) (number_literal)
  (identifier) (identifier))

============================================
Scoped functions
============================================

a::b();
C::<D>::e();
::f();
::g::h();

---

(source_file
  (call_expression
    (scoped_identifier (identifier) (identifier))
    (arguments))
  (call_expression
    (scoped_identifier
      (generic_type (type_identifier) (type_arguments (type_identifier)))
      (identifier))
    (arguments))
  (call_expression (scoped_identifier (identifier)) (arguments))
  (call_expression (scoped_identifier (scoped_identifier (identifier)) (identifier)) (arguments)))

============================================
Generic functions
============================================

std::sizeof::<u32>();

---

(source_file
  (call_expression
    (generic_function (scoped_identifier (identifier) (identifier)) (type_arguments (primitive_type)))
    (arguments)))

===========================================
Closures
===========================================

a.map(|(b, c)| b.push(c));
d.map(|mut e| {
    f(e);
    g(e)
});

---

(source_file
  (call_expression
    (field_expression (identifier) (identifier))
    (arguments
      (closure_expression
        (closure_parameters (closure_parameter (tuple_pattern (identifier) (identifier))))
        (call_expression
          (field_expression (identifier) (identifier))
          (arguments (identifier))))))
  (call_expression
    (field_expression (identifier) (identifier))
    (arguments
      (closure_expression
        (closure_parameters (closure_parameter (mutable_specifier) (identifier)))
        (block
          (call_expression (identifier) (arguments (identifier)))
          (call_expression (identifier) (arguments (identifier))))))))
