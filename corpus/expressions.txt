=====================================
Ternary Expression
=====================================

class Foo {
  void Test() {
    x ? "foo" : "bar";
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (conditional_expression
            (identifier_name)
            (string_literal)
            (string_literal))))))))

=====================================
Binary Expressions
=====================================

class Foo {
  void Test() {
    x == y;
    1 + 2;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (binary_expression
            (identifier_name)
            (identifier_name)))
        (expression_statement
          (binary_expression
            (integer_literal)
            (integer_literal))))))))

=====================================
Prefix-Unary Expressions
=====================================

class Foo {
  void Test() {
    ++x;
    --y;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (prefix_unary_expression
            (identifier_name)))
        (expression_statement
          (prefix_unary_expression
            (identifier_name))))))))

=====================================
Cast expressions
=====================================

void Test() {
  a = (B)c + (C)d;
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement (assignment_expression
        (identifier_name)
        (assignment_operator)
        (binary_expression
          (cast_expression (identifier_name) (identifier_name))
          (cast_expression (identifier_name) (identifier_name))))))))

============================
Anonymous object creation with empty body
============================

void b() {
  var x = new {
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression))))))))

============================
Anonymous object creation with single unnamed
============================

void b() {
  var x = new {
    args
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression (identifier_name)))))))))

============================
Anonymous object creation with single named
============================

void b() {
  var x = new {
    test = "This"
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
          (identifier_name)
            (equals_value_clause
              (anonymous_object_creation_expression
                (name_equals
                  (identifier_name))
                (string_literal)))))))))

============================
Checked expressions
============================

void b() {
  var three = checked(1 + 2);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (checked_expression
                (binary_expression
                  (integer_literal)
                  (integer_literal))))))))))

============================
Object creation expressions
============================

void b() {
  new C.D(1, "hi");
  a = new E
  {
    Foo = bar,
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement
        (object_creation_expression
          (qualified_name (identifier_name) (identifier_name))
          (argument_list
            (argument (integer_literal))
            (argument (string_literal)))))
      (expression_statement
        (assignment_expression
          (identifier_name)
          (assignment_operator)
          (object_creation_expression
            (identifier_name)
            (initializer_expression
              (assignment_expression (identifier_name) (assignment_operator) (identifier_name)))))))))

============================
Anonymous method expressions
============================

void a() {
  delegate(int a) {
    return a;
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement
        (anonymous_method_expression
          (parameter_list (parameter (predefined_type) (identifier_name)))
          (block
            (return_statement (identifier_name))))))))

============================
Lambda expressions
============================

void a() {
  x => x + 1;
  (A a, B b) => { return a.c(b); };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement
        (lambda_expression
          (identifier_name)
          (binary_expression (identifier_name) (integer_literal))))
      (expression_statement
        (lambda_expression
          (parameter_list
            (parameter (identifier_name) (identifier_name))
            (parameter (identifier_name) (identifier_name)))
          (block (return_statement
            (invocation_expression
              (member_access_expression (identifier_name) (identifier_name))
              (argument_list (argument (identifier_name)))))))))))

============================
Invocation expressions
============================

void a() {
  b(c, in d, out e, ref f, out var g);
}

---

(compilation_unit (method_declaration
  (void_keyword)
  (identifier_name)
  (parameter_list)
  (block
    (expression_statement
      (invocation_expression
        (identifier_name)
        (argument_list
          (argument (identifier_name))
          (argument (identifier_name))
          (argument (identifier_name))
          (argument (identifier_name))
          (argument (implicit_type) (identifier_name))))))))

============================
Tuple expressions
============================

void a() {
  b = (c, d: "e");
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement (assignment_expression
        (identifier_name)
        (assignment_operator)
        (tuple_expression
          (argument (identifier_name))
          (argument
            (name_colon (identifier_name))
            (string_literal))))))))

============================
Implicit array creation
============================

void b() {
  var z = new [] { 1, 2, 3 };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (implicit_array_creation_expression
                (initializer_expression
                  (integer_literal)
                  (integer_literal)
                  (integer_literal))))))))))

============================
Implicit multi array creation
============================

void b() {
  var z = new [,] { { 1, 1 }, { 2, 2 }, { 3, 3 } };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (implicit_array_creation_expression
                (initializer_expression
                  (initializer_expression
                    (integer_literal)
                    (integer_literal))
                  (initializer_expression
                    (integer_literal)
                    (integer_literal))
                  (initializer_expression
                    (integer_literal)
                    (integer_literal)))))))))))

============================
Stackalloc implicit array
============================

void b() {
  var z = stackalloc [] { 1, 2, 3 };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (implicit_stack_alloc_array_creation_expression
                (initializer_expression
                  (integer_literal)
                  (integer_literal)
                  (integer_literal))))))))))

============================
Stackalloc explicit array
============================

void b() {
  var z = stackalloc int[] { 1, 2, 3 };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (stack_alloc_array_creation_expression
                (array_type (predefined_type) (array_rank_specifier))
                (initializer_expression
                  (integer_literal)
                  (integer_literal)
                  (integer_literal))))))))))

============================
Explicit array creation
============================

void b() {
  var z = new int[3] { 1, 2, 3 };
  var b = new byte[,] { { 1, 2 }, { 2, 3 } };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (array_creation_expression
                (array_type
                  (predefined_type)
                  (array_rank_specifier (integer_literal)))
                (initializer_expression
                  (integer_literal)
                  (integer_literal)
                  (integer_literal)))))))
        (local_declaration_statement
          (variable_declaration
            (implicit_type)
            (variable_declarator
              (identifier_name)
              (equals_value_clause
                (array_creation_expression
                  (array_type
                    (predefined_type)
                    (array_rank_specifier))
                  (initializer_expression
                    (initializer_expression
                      (integer_literal)
                      (integer_literal))
                    (initializer_expression
                      (integer_literal)
                      (integer_literal)))))))))))

============================
Explicit multi array creation
============================

void b() {
  var z = new int[3,2] { { 1, 1 }, { 2, 2 }, { 3, 3 } };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (array_creation_expression
                (array_type
                  (predefined_type)
                  (array_rank_specifier
                    (integer_literal)
                    (integer_literal)))
                (initializer_expression
                  (initializer_expression
                    (integer_literal)
                    (integer_literal))
                  (initializer_expression
                    (integer_literal)
                    (integer_literal))
                  (initializer_expression
                    (integer_literal)
                    (integer_literal)))))))))))

============================
Makeref
============================

void b() {
  var gp = __makeref(g);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (make_ref_expression
                (identifier_name)))))))))

============================
Postfix unary
============================

void b() {
  a--;
  a++;
  var b=a!;
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (expression_statement (postfix_unary_expression (identifier_name)))
      (expression_statement (postfix_unary_expression (identifier_name)))
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (postfix_unary_expression
                (identifier_name)))))))))

============================
__reftype
============================

void b() {
  var z = __reftype(g);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (ref_type_expression
                (identifier_name)))))))))

============================
__refvalue
============================

void b() {
  var z = __refvalue(g, int);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (ref_value_expression
                (identifier_name)
                (predefined_type)))))))))

============================
sizeof
============================

void b() {
  var z = sizeof(int);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (size_of_expression
                (predefined_type)))))))))

============================
typeof
============================

void b() {
  var z = typeof(int);
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (type_of_expression
                (predefined_type)))))))))

============================
switch expression
============================

void b() {
  var r = operation switch {
      1 => "one",
      2 => "two",
      _ => "more"
  };
}

---

(compilation_unit
  (method_declaration
    (void_keyword)
    (identifier_name)
    (parameter_list)
    (block
      (local_declaration_statement
        (variable_declaration
          (implicit_type)
          (variable_declarator
            (identifier_name)
            (equals_value_clause
              (switch_expression
                (identifier_name)
                (switch_expression_arm
                  (constant_pattern (integer_literal))
                  (string_literal))
                (switch_expression_arm
                  (constant_pattern (integer_literal))
                  (string_literal))
                (switch_expression_arm
                  (discard_pattern)
                  (string_literal))))))))))

=====================================
await Expression
=====================================

class Foo {
  void Test() {
    await x;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
        (expression_statement
          (await_expression
            (identifier_name))))))))

=====================================
throw expression
=====================================

class Foo {
  void Test() {
    x = x ?? throw y;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
          (expression_statement
            (assignment_expression
              (identifier_name)
              (assignment_operator)
              (binary_expression
                (identifier_name)
                (throw_expression (identifier_name))))))))))

=====================================
range expressions full
=====================================

class Foo {
  void Test() {
    var a = b[1..4];
    var c = 1..^4;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
          (local_declaration_statement
            (variable_declaration
              (implicit_type)
              (variable_declarator
                (identifier_name)
                (equals_value_clause
                  (element_access_expression
                    (identifier_name)
                    (bracketed_argument_list
                      (argument
                        (range_expression
                          (integer_literal)
                          (integer_literal)))))))))
            (local_declaration_statement
              (variable_declaration
                (implicit_type)
                  (variable_declarator
                    (identifier_name)
                    (equals_value_clause
                      (range_expression
                        (integer_literal)
                        (prefix_unary_expression (integer_literal))))))))))))

=====================================
range expressions partial
=====================================

class Foo {
  void Test() {
    var a = b[..4];
    var c = ^1..;
    var d = b[..];
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
          (local_declaration_statement
            (variable_declaration
              (implicit_type)
              (variable_declarator
                (identifier_name)
                (equals_value_clause
                  (element_access_expression
                    (identifier_name)
                    (bracketed_argument_list
                      (argument
                        (range_expression
                          (integer_literal)))))))))
            (local_declaration_statement
              (variable_declaration
                (implicit_type)
                  (variable_declarator
                    (identifier_name)
                    (equals_value_clause
                      (range_expression
                        (prefix_unary_expression (integer_literal)))))))
              (local_declaration_statement
                (variable_declaration
                  (implicit_type)
                  (variable_declarator
                    (identifier_name)
                    (equals_value_clause
                      (element_access_expression
                        (identifier_name)
                        (bracketed_argument_list (argument (range_expression)))))))))))))

=====================================
conditional access expression
=====================================

class Foo {
  void Test() {
    var a = b?.Something;
    c.Something();
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
          (local_declaration_statement
            (variable_declaration
              (implicit_type)
              (variable_declarator
                (identifier_name)
                (equals_value_clause
                  (conditional_access_expression
                    (identifier_name)
                    (member_binding_expression
                    (identifier_name)))))))
          (expression_statement
            (invocation_expression
              (member_access_expression
                (identifier_name)
                (identifier_name))
              (argument_list))))))))

=====================================
cast expression
=====================================

class Foo {
  void Test() {
    x = (int) y;
      }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (method_declaration
        (void_keyword)
        (identifier_name)
        (parameter_list)
        (block
          (expression_statement
            (assignment_expression
              (identifier_name)
              (assignment_operator)
              (cast_expression (predefined_type) (identifier_name)))))))))

=====================================
Generic type name no type args
=====================================

var d = typeof(Dictionary<,>);
var t = typeof(Tuple<,,,>);

---

(compilation_unit
  (field_declaration
    (variable_declaration
      (implicit_type)
      (variable_declarator
        (identifier_name)
        (equals_value_clause
          (type_of_expression
            (generic_name
              (identifier_name)
              (type_argument_list)))))))
  (field_declaration
    (variable_declaration
      (implicit_type)
      (variable_declarator
        (identifier_name)
        (equals_value_clause
          (type_of_expression
            (generic_name
              (identifier_name)
              (type_argument_list))))))))

=====================================
default expression
=====================================

var a = default(int);
int b = default;

---
(compilation_unit
  (field_declaration
    (variable_declaration
      (implicit_type)
      (variable_declarator
        (identifier_name)
        (equals_value_clause
          (default_expression
            (predefined_type))))))
  (field_declaration
    (variable_declaration
      (predefined_type)
      (variable_declarator
        (identifier_name)
        (equals_value_clause
          (default_expression))))))

=====================================
Generic type name no type args
=====================================

ref VeryLargeStruct reflocal = ref veryLargeStruct;
ref var elementRef = ref arr[0];
---

(compilation_unit
  (field_declaration
    (modifier)
    (variable_declaration
      (identifier_name)
      (variable_declarator
        (identifier_name)
        (equals_value_clause
          (ref_expression
            (identifier_name))))))
  (field_declaration
    (modifier)
    (variable_declaration
      (implicit_type)
      (variable_declarator
        (identifier_name)
        (equals_value_clause
          (ref_expression
            (element_access_expression
              (identifier_name)
              (bracketed_argument_list
                (argument
                  (integer_literal))))))))))
