===========================
Strings
===========================

(* ok *)
let
  a = "abcd" and
  b = "\"hi\""

---

(compilation_unit
  (comment)
  (value_definition
    (let_binding (identifier) (string))
    (let_binding (identifier) (string))))

===========================
Let expressions
===========================

let a = let c = 1 in c

---

(compilation_unit
  (value_definition (let_binding
    (identifier)
    (let_expression
      (let_binding (identifier) (number))
      (identifier)))))

===========================
Function call expressions
===========================

let a = B.C.d e f g
let h = (j) k

---

(compilation_unit
  (value_definition
    (let_binding
      (identifier)
      (call_expression
        (qualified_identifier (qualified_identifier (identifier) (identifier)) (identifier))
        (identifier)
        (identifier)
        (identifier))))
  (value_definition
    (let_binding
      (identifier)
      (call_expression
        (parenthesized_expression (identifier))
        (identifier)))))
===========================
Function expressions
===========================

let a = function
  | { a.b = c} -> a
  | _ -> 5

---

(compilation_unit (value_definition (let_binding
  (identifier)
  (function_expression
    (pattern_match_clause
      (record_pattern (field_pattern (qualified_identifier (identifier) (identifier)) (identifier)))
      (identifier))
    (pattern_match_clause
      (identifier)
      (number))))))

===========================
Infix expressions
===========================

let a = b ** c ** d
let e = f + g * h * i

---

(compilation_unit
  (value_definition
    (let_binding
      (identifier)
      (infix_expression (identifier) (infix_expression (identifier) (identifier)))))
  (value_definition
    (let_binding
      (identifier)
      (infix_expression (identifier) (infix_expression (infix_expression (identifier) (identifier)) (identifier))))))

===========================
Prefix expressions
===========================

let a = !!! b c
let d = - e f

---

(compilation_unit
  (value_definition
    (let_binding (identifier) (prefix_expression (call_expression (identifier) (identifier)))))
  (value_definition
    (let_binding (identifier) (prefix_expression (call_expression (identifier) (identifier))))))

===========================
Comments
===========================

(* (* ok *) * *)
(*)*)
(**
    docstring
*)

---

(compilation_unit
  (comment)
  (comment)
  (comment))
