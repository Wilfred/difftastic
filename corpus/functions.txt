========================================================================
Strlen() function test
========================================================================

<?php echo strlen("abcdef")?>

---

(program (echo_statement (function_call_expression (qualified_name (name)) (arguments (string)))))

========================================================================
Static variables in functions
========================================================================

<?php
function blah()
{
  static $hey=0,$yo=0;

  echo "hey=".$hey++.", ",$yo--."\n";
}

blah();
blah();
blah();
if (isset($hey) || isset($yo)) {
  echo "Local variables became global :(\n";
}

---

(program (function_definition (name) (formal_parameters) (compound_statement (function_static_declaration (static_variable_declaration (variable_name (name)) (integer)) (static_variable_declaration (variable_name (name)) (integer))) (echo_statement (sequence_expression (binary_expression (binary_expression (string) (update_expression (variable_name (name)))) (string)) (binary_expression (update_expression (variable_name (name))) (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (if_statement (binary_expression (isset_intrinsic (variable_name (name))) (isset_intrinsic (variable_name (name)))) (compound_statement (echo_statement (string)))))

========================================================================
General function test
========================================================================

<?php

function a()
{
  echo "hey\n";
}

function b($i)
{
  echo "$i\n";
}


function c($i,$j)
{
  echo "Counting from $i to $j\n";
  for ($k=$i; $k<=$j; $k++) {
    echo "$k\n";
  }
}



a();
b("blah");
a();
b("blah","blah");
c(7,14);

a();


function factorial($n)
{
  if ($n==0 || $n==1) {
    return 1;
  } else {
    return factorial($n-1)*$n;
  }
}


function factorial2($start, $n)
{
  if ($n<=$start) {
    return $start;
  } else {
    return factorial2($start,$n-1)*$n;
  }
}


for ($k=0; $k<10; $k++) {
  for ($i=0; $i<=10; $i++) {
    $n=factorial($i);
    echo "factorial($i) = $n\n";
  }
}


echo "and now, from a function...\n";

function call_fact()
{
  echo "(it should break at 5...)\n";
  for ($i=0; $i<=10; $i++) {
    if ($i == 5) break;
    $n=factorial($i);
    echo "factorial($i) = $n\n";
  }
}

function return4() { return 4; }
function return7() { return 7; }

for ($k=0; $k<10; $k++) {
  call_fact();
}

echo "------\n";
$result = factorial(factorial(3));
echo "$result\n";

$result=factorial2(return4(),return7());
echo "$result\n";

function andi($i, $j)
{
	for ($k=$i ; $k<=$j ; $k++) {
		if ($k >5) continue;
		echo "$k\n";
	}
}

andi (3,10);

---

(program (function_definition (name) (formal_parameters) (compound_statement (echo_statement (string)))) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (string)))) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (string)) (for_statement (assignment_expression (variable_name (name)) (variable_name (name))) (binary_expression (variable_name (name)) (variable_name (name))) (update_expression (variable_name (name))) (compound_statement (echo_statement (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (string)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (integer) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (binary_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (integer))) (compound_statement (return_statement (integer))) (else_clause (compound_statement (return_statement (binary_expression (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (integer)))) (variable_name (name))))))))) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (return_statement (variable_name (name)))) (else_clause (compound_statement (return_statement (binary_expression (function_call_expression (qualified_name (name)) (arguments (variable_name (name)) (binary_expression (variable_name (name)) (integer)))) (variable_name (name))))))))) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (integer)) (update_expression (variable_name (name))) (compound_statement (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (integer)) (update_expression (variable_name (name))) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))))) (echo_statement (string)))))) (echo_statement (string)) (function_definition (name) (formal_parameters) (compound_statement (echo_statement (string)) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (integer)) (update_expression (variable_name (name))) (compound_statement (if_statement (binary_expression (variable_name (name)) (integer)) (break_statement)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))))) (echo_statement (string)))))) (function_definition (name) (formal_parameters) (compound_statement (return_statement (integer)))) (function_definition (name) (formal_parameters) (compound_statement (return_statement (integer)))) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (integer)) (update_expression (variable_name (name))) (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments))))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (integer))))))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments)) (function_call_expression (qualified_name (name)) (arguments)))))) (echo_statement (string)) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (for_statement (assignment_expression (variable_name (name)) (variable_name (name))) (binary_expression (variable_name (name)) (variable_name (name))) (update_expression (variable_name (name))) (compound_statement (if_statement (binary_expression (variable_name (name)) (integer)) (continue_statement)) (echo_statement (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (integer) (integer)))))

========================================================================
General function test
========================================================================

<?php

echo "Before function declaration...\n";

function print_something_multiple_times($something,$times)
{
  echo "----\nIn function, printing the string \"$something\" $times times\n";
  for ($i=0; $i<$times; $i++) {
    echo "$i) $something\n";
  }
  echo "Done with function...\n-----\n";
}

function some_other_function()
{
  echo "This is some other function, to ensure more than just one function works fine...\n";
}


echo "After function declaration...\n";

echo "Calling function for the first time...\n";
print_something_multiple_times("This works!",10);
echo "Returned from function call...\n";

echo "Calling the function for the second time...\n";
print_something_multiple_times("This like, really works and stuff...",3);
echo "Returned from function call...\n";

some_other_function();

?>

---

(program (echo_statement (string)) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (string)) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (variable_name (name))) (update_expression (variable_name (name))) (compound_statement (echo_statement (string)))) (echo_statement (string)))) (function_definition (name) (formal_parameters) (compound_statement (echo_statement (string)))) (echo_statement (string)) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (echo_statement (string)) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))))

========================================================================
Testing register_shutdown_function()
========================================================================

<?php

function foo()
{
	print "foo";
}

register_shutdown_function("foo");

print "foo() will be called on shutdown...\n";

?>

---

(program (function_definition (name) (formal_parameters) (compound_statement (expression_statement (print_intrinsic (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string)))) (expression_statement (print_intrinsic (string))))

========================================================================
Testing register_shutdown_function() with timeout. (Bug: #21513)
========================================================================

<?php

ini_set('display_errors', 0);

echo "Start\n";

function boo()
{
	echo "Shutdown\n";
}

register_shutdown_function("boo");

/* not necessary, just to show the error sooner */
set_time_limit(1);

/* infinite loop to simulate long processing */
for (;;) {}

echo "End\n";

?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (echo_statement (string)) (function_definition (name) (formal_parameters) (compound_statement (echo_statement (string)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string)))) (comment) (expression_statement (function_call_expression (qualified_name (name)) (arguments (integer)))) (comment) (for_statement (compound_statement)) (echo_statement (string)))

========================================================================
Output buffering tests
========================================================================

<?php
ob_start();
echo ob_get_level();
echo 'A';
  ob_start();
  echo ob_get_level();
  echo 'B';
  $b = ob_get_contents();
  ob_end_clean();
$a = ob_get_contents();
ob_end_clean();

var_dump( $b ); // 2B
var_dump( $a ); // 1A
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (comment) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (comment))

========================================================================
INI functions test
========================================================================

<?php

$ini1 =  ini_get('include_path');
ini_set('include_path','ini_set_works');
echo ini_get('include_path')."\n";
ini_restore('include_path');
$ini2 =  ini_get('include_path');

if ($ini1 !== $ini2) {
        echo "ini_restore() does not work.\n";
}
else {
        echo "ini_restore_works\n";
}

?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (string)))) (echo_statement (binary_expression (function_call_expression (qualified_name (name)) (arguments (string))) (string))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string)))) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string))))) (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string))) (else_clause (compound_statement (echo_statement (string))))))

========================================================================
Test for buffering in core functions with implicit flush off
========================================================================

<?php
$res = var_export("foo1");
echo "\n";
$res = var_export("foo2", TRUE);
echo "\n";
echo $res."\n";
?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string))))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string) (qualified_name (name)))))) (echo_statement (string)) (echo_statement (binary_expression (variable_name (name)) (string))))

========================================================================
Test for buffering in core functions with implicit flush on
========================================================================

<?php
$res = var_export("foo1");
echo "\n";
$res = var_export("foo2", TRUE);
echo "\n";
echo $res."\n";
?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string))))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string) (qualified_name (name)))))) (echo_statement (string)) (echo_statement (binary_expression (variable_name (name)) (string))))

========================================================================
function with many parameters
========================================================================

<?php

// the stack size + some random constant
$boundary = 16*1024-16;
$limit    = $boundary+42;


function test($a,$b)
{
	var_dump($a === $b);
	test2($a,$b);
}

function test2($a, $b)
{
	if ($a !== $b) {
		var_dump("something went wrong: $a !== $b");
	}
}


// generate the function
$str = "<?php\nfunction x(";

for($i=0; $i < $limit; ++$i) {
	$str .= '$v'.dechex($i).($i===($limit-1) ? '' : ',');
}

$str .= ') {
	test($v42, \'42\');
	test(\'4000\', $v4000);
	test2($v300, \'300\');
	test($v0, \'0\'); // first
	test($v'.dechex($limit-1).", '".dechex($limit-1).'\'); // last
	test($v'.dechex($boundary).", '".dechex($boundary).'\'); //boundary
	test($v'.dechex($boundary+1).", '".dechex($boundary+1).'\'); //boundary+1
	test($v'.dechex($boundary-1).", '".dechex($boundary-1).'\'); //boundary-1
}';

// generate the function call
$str .= "\n\nx(";

for($i=0; $i< $limit; ++$i) {
	$str .= "'".dechex($i)."'".($i===($limit-1) ? '' : ',');
}

$str .= ");\n";

$filename = dirname(__FILE__).'/010-file.php';
file_put_contents(dirname(__FILE__).'/010-file.php', $str);
unset($str);

include($filename);

echo "Done\n";

?>
--CLEAN--
<?php
@unlink(dirname(__FILE__).'/010-file.php');
?>

---

(program (comment)
  (expression_statement
    (assignment_expression
      (variable_name
        (name))
      (binary_expression
        (binary_expression
          (integer)
          (integer))
        (integer))))
  (expression_statement
    (assignment_expression
      (variable_name
        (name))
      (binary_expression
        (variable_name
          (name))
        (integer))))
  (function_definition
    (name)
    (formal_parameters
      (simple_parameter
        (variable_name
          (name)))
      (simple_parameter
        (variable_name
          (name))))
    (compound_statement
      (expression_statement
        (function_call_expression
          (qualified_name
            (name))
          (arguments
            (binary_expression
              (variable_name
                (name))
              (variable_name
                (name))))))
      (expression_statement
        (function_call_expression
          (qualified_name
            (name))
          (arguments
            (variable_name
              (name))
            (variable_name
              (name)))))))
  (function_definition
    (name)
    (formal_parameters
      (simple_parameter
        (variable_name
          (name)))
      (simple_parameter
        (variable_name
          (name))))
    (compound_statement
      (if_statement
        (binary_expression
          (variable_name
            (name))
          (variable_name
            (name)))
        (compound_statement
          (expression_statement
            (function_call_expression
              (qualified_name
                (name))
              (arguments
                (string))))))))
  (comment)
  (expression_statement
    (assignment_expression
      (variable_name
        (name))
      (string)))
  (for_statement
    (assignment_expression
      (variable_name
        (name))
      (integer))
    (binary_expression
      (variable_name
        (name))
      (variable_name
        (name)))
    (update_expression
      (variable_name
        (name)))
    (compound_statement
      (expression_statement
        (augmented_assignment_expression
          (variable_name
            (name))
          (binary_expression
            (binary_expression
              (string)
              (function_call_expression
                (qualified_name
                  (name))
                (arguments
                  (variable_name
                    (name)))))
            (parenthesized_expression
              (conditional_expression
                (binary_expression
                  (variable_name
                    (name))
                  (parenthesized_expression
                    (binary_expression
                      (variable_name
                        (name))
                      (integer))))
                (string)
                (string))))))))
  (expression_statement
    (augmented_assignment_expression
      (variable_name
        (name))
      (binary_expression
        (binary_expression
          (binary_expression
            (binary_expression
              (binary_expression
                (binary_expression
                  (binary_expression
                    (binary_expression
                      (binary_expression
                        (binary_expression
                          (binary_expression
                            (binary_expression
                              (binary_expression
                                (binary_expression
                                  (binary_expression
                                    (binary_expression
                                      (string)
                                      (function_call_expression
                                        (qualified_name
                                          (name))
                                        (arguments
                                          (binary_expression
                                            (variable_name
                                              (name))
                                            (integer)))))
                                    (string))
                                  (function_call_expression
                                    (qualified_name
                                      (name))
                                    (arguments
                                      (binary_expression
                                        (variable_name
                                          (name))
                                        (integer)))))
                                (string))
                              (function_call_expression
                                (qualified_name
                                  (name))
                                (arguments
                                  (variable_name
                                    (name)))))
                            (string))
                          (function_call_expression
                            (qualified_name
                              (name))
                            (arguments
                              (variable_name
                                (name)))))
                        (string))
                      (function_call_expression
                        (qualified_name
                          (name))
                        (arguments
                          (binary_expression
                            (variable_name
                              (name))
                            (integer)))))
                    (string))
                  (function_call_expression
                    (qualified_name
                      (name))
                    (arguments
                      (binary_expression
                        (variable_name
                          (name))
                        (integer)))))
                (string))
              (function_call_expression
                (qualified_name
                  (name))
                (arguments
                  (binary_expression
                    (variable_name
                      (name))
                    (integer)))))
            (string))
          (function_call_expression
            (qualified_name
              (name))
            (arguments
              (binary_expression
                (variable_name
                  (name))
                (integer)))))
        (string))))
  (comment)
  (expression_statement
    (augmented_assignment_expression
      (variable_name
        (name))
      (string)))
  (for_statement
    (assignment_expression
      (variable_name
        (name))
      (integer))
    (binary_expression
      (variable_name
        (name))
      (variable_name
        (name)))
    (update_expression
      (variable_name
        (name)))
    (compound_statement
      (expression_statement
        (augmented_assignment_expression
          (variable_name
            (name))
          (binary_expression
            (binary_expression
              (binary_expression
                (string)
                (function_call_expression
                  (qualified_name
                    (name))
                  (arguments
                    (variable_name
                      (name)))))
              (string))
            (parenthesized_expression
              (conditional_expression
                (binary_expression
                  (variable_name
                    (name))
                  (parenthesized_expression
                    (binary_expression
                      (variable_name
                        (name))
                      (integer))))
                (string)
                (string))))))))
  (expression_statement
    (augmented_assignment_expression
      (variable_name
        (name))
      (string)))
  (expression_statement
    (assignment_expression
      (variable_name
        (name))
      (binary_expression
        (function_call_expression
          (qualified_name
            (name))
          (arguments
            (qualified_name
              (name))))
        (string))))
  (expression_statement
    (function_call_expression
      (qualified_name
        (name))
      (arguments
        (binary_expression
          (function_call_expression
            (qualified_name
              (name))
            (arguments
              (qualified_name
                (name))))
          (string))
        (variable_name
          (name)))))
  (unset_statement
    (variable_name
      (name)))
  (expression_statement
    (include_expression
      (parenthesized_expression
        (variable_name
          (name)))))
  (echo_statement
    (string))
  (text_interpolation)
  (expression_statement
    (unary_op_expression
      (function_call_expression
        (qualified_name
          (name))
        (arguments
          (binary_expression
            (function_call_expression
              (qualified_name
                (name))
              (arguments
                (qualified_name
                  (name))))
            (string)))))))

========================================================================
Test bitwise AND, OR, XOR, NOT and logical NOT in INI via error_reporting
========================================================================

<?php
echo ini_get('error_reporting');
?>

---

(program (echo_statement (function_call_expression (qualified_name (name)) (arguments (string)))))

========================================================================
Bug #64523: XOR not parsed in INI
========================================================================

<?php
echo ini_get('error_reporting');
?>
--EXPECTF--
22519
========================================================================
ini_alter() check
========================================================================

<?php
ini_alter('error_reporting', 1);
$var = ini_get('error_reporting');
var_dump($var);
ini_alter('error_reporting', 0);
$var = ini_get('error_reporting');
var_dump($var);
?>

---

 (program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))
