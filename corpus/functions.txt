==========
Functions
==========

fn add(x: Int, y: Int) -> Int {}
fn twice(f: fn(t) -> t, x: t) -> t {}
fn inferred_identity(x) {}
fn replace(
  in string: String,
  each pattern: String,
  with replacement: String
) {}
fn try_try_again(x, y) -> Int {
  try int_x = todo
  try _who_cares = todo
  try file.IODevice() = todo
  try Node = todo
  try "hello" = todo
  try 1 = todo
  try 12.34 = todo
  try #(a, b) = todo
  try <<a:utf8, b:size(8)>> = todo
  try [a, b] = todo
}

---

(source_file
  (function
    name: (identifier)
    parameters: (function_parameters
      (function_parameter
        name: (identifier)
        type: (type))
      (function_parameter
        name: (identifier)
        type: (type)))
    return_type: (type))
  (function
    name: (identifier)
    parameters: (function_parameters
      (function_parameter
        name: (identifier)
        type: (function_type
          parameter_types: (function_parameter_types
            (type_var))
          return_type: (type_var)))
      (function_parameter
        name: (identifier)
        type: (type_var)))
    return_type: (type_var)
    (function_body))
  (function
    name: (identifier)
    parameters: (function_parameters
      (function_parameter
        name: (identifier))))
  (function
    name: (identifier)
    parameters: (function_parameters
      (function_parameter
        label: (identifier)
        name: (identifier)
        type: (type))
      (function_parameter
        label: (identifier)
        name: (identifier)
        type: (type))
      (function_parameter
        label: (identifier)
        name: (identifier)
        type: (type))))
  (function
    name: (identifier)
    parameters: (function_parameters
      (function_parameter 
        name: (identifier))
      (function_parameter
        name: (identifier)))
    return_type: (type)
    (function_body
      (try
        pattern: (var))
      (try
        pattern: (discard_var))
      (try
        pattern: (remote_constructor_pattern
          (pattern_constructor_args)))
      (try
        pattern: (constructor_pattern))
      (try
        pattern: (string))
      (try
        pattern: (integer))
      (try
        pattern: (float))
      (try
        pattern: (tuple_pattern
          (var)
          (var)))
      (try
        pattern: (bit_string_pattern
          (bit_string_segment
            value: (var)
            options: (bit_string_segment_options
              (bit_string_segment_option_utf8)))
          (bit_string_segment
            value: (var)
            options: (bit_string_segment_options
              (bit_string_segment_option_size
                (integer))))))
      (try
        pattern: (list_pattern
          (var)
          (var))))))