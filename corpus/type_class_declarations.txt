=========================================
Type Class Declarations
=========================================

class Show a where {}
class Show a b where {}

---

(module
  (type_class (type_constructor (identifier) (variable)) (where))
  (type_class (type_constructor (identifier) (variable) (variable)) (where)))

=========================================
Type Class Declarations With Context
=========================================

class Show a => Read a where {}
class (Show a, Eq a) => Read a where {}
class (Show (f a), Eq a) => Read f a where {}

---

(module
  (type_class
    (context (type_constructor (identifier) (variable)))
    (type_constructor
      (identifier)
      (variable))
    (where))
  (type_class
    (context
      (type_constructor (identifier) (variable))
      (type_constructor (identifier) (variable)))
    (type_constructor
      (identifier)
      (variable))
    (where))
  (type_class
    (context
      (type_constructor (identifier) (variable) (variable))
      (type_constructor (identifier) (variable)))
    (type_constructor
      (identifier)
      (variable)
      (variable))
    (where)))

=========================================
Type Class Declarations With Body
=========================================

class Foo a where {
  op :: Num b => a -> b -> a
  op' :: (Num a, Num b) => a -> b -> a
}

---

(module
  (type_class
    (type_constructor
      (identifier)
      (variable))
    (where
      (type_signature
        (signature_identifier (variable))
        (context
          (type_constructor (identifier) (variable)))
        (variable)
        (variable)
        (variable))
      (type_signature
        (signature_identifier (variable))
        (context
          (type_constructor (identifier) (variable))
          (type_constructor (identifier) (variable)))
        (variable)
        (variable)
        (variable)))))

=========================================
Type Class Declarations With Fixity
=========================================

class Foo a where {
  infixl `op`
  infixr 7 `op`
  infix 7 `op`, `ip`, `ap`
  infix <$>
  infix 7 <$>
  infix 7 :
  infix 7 :.
  infix 7 :<:
}

---

(module
  (type_class
    (type_constructor
      (identifier)
      (variable))
    (where
      (fixity (variable))
      (fixity (integer) (variable))
      (fixity (integer) (variable) (variable) (variable))
      (fixity (variable_symbol))
      (fixity (integer) (variable_symbol))
      (fixity (integer) (constructor_symbol))
      (fixity (integer) (constructor_symbol))
      (fixity (integer) (constructor_symbol)))))

=========================================
Type Class Declarations With Multiple Operators
=========================================

class  (Eq a) => Ord a  where {
  compare              :: a -> a -> Ordering
  (<), (<=), (>=), (>) :: a -> a -> Bool
  max, min             :: a -> a -> a
}

---

(module
  (type_class
    (context (type_constructor (identifier) (variable)))
    (type_constructor (identifier) (variable))
    (where
      (type_signature
        (signature_identifier (variable))
        (variable)
        (variable)
        (type_constructor (identifier)))
      (type_signature
        (signature_identifier (variable_symbol) (variable_symbol) (variable_symbol) (variable_symbol))
        (variable)
        (variable)
        (type_constructor (identifier)))
      (type_signature
        (signature_identifier (variable) (variable))
        (variable)
        (variable)
        (variable)))))
