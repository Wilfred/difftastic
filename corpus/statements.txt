================
SELECT statement
================

SELECT;

---

(source_file 
    (select_statement))


=============================
SELECT statement with numbers
=============================

SELECT 1, 2;

---

(source_file 
    (select_statement
        (select_clause (number) (number))))

=============================
SELECT statement with columns
=============================

SELECT a, b;

---

(source_file 
    (select_statement
        (select_clause (identifier) (identifier))))

=============================
SELECT statement with comparison expression
=============================

SELECT 1 < 2;

---

(source_file 
    (select_statement
        (select_clause (comparison_operator (number) (number)))))

=============================
SELECT statement with is expression
=============================

SELECT a IS TRUE, b IS NOT NULL, c IS FALSE;

---

(source_file 
    (select_statement
        (select_clause 
            (is_expression (identifier) (TRUE))
            (is_expression (identifier) (NULL))
            (is_expression (identifier) (FALSE)))))

=============================
SELECT statement with comparison expression and is expression
=============================

SELECT 1 < 2 IS TRUE;

---

(source_file 
    (select_statement
        (select_clause (is_expression (comparison_operator (number) (number)) (TRUE)))))


=====================
SELECT expression with function
=====================

SELECT foo(bar, baz) < 10;

---

(source_file 
    (select_statement
        (select_clause 
         (comparison_operator
            (function_call (identifier) (identifier) (identifier)) 
            (number)))))

=====================
SELECT comparison expression boolean
=====================

SELECT TRUE AND foo(1) OR FALSE;

---

(source_file 
    (select_statement
        (select_clause 
         (boolean_expression (boolean_expression (TRUE) (function_call (identifier) (identifier))) (FALSE)))))

=====================
SELECT parenthesized expression
=====================

SELECT (TRUE);

---

(source_file 
    (select_statement
        (select_clause (TRUE))))


=====================
SELECT parenthesized expression 2
=====================

SELECT TRUE AND (foo(1) OR FALSE);

---

(source_file 
    (select_statement
        (select_clause 
         (boolean_expression
            (TRUE)
                (boolean_expression 
                    (function_call (identifier) (identifier)) (FALSE))))))

=====================
CREATE TYPE statement
=====================

CREATE TYPE xest AS (data TEXT, val INT);

---

(source_file 
    (create_type_statement (identifier) 
        (parameters
            (parameter (identifier) (data_type (identifier)))
            (parameter (identifier) (data_type (identifier))))))


=====================
CREATE DOMAIN
=====================

CREATE DOMAIN test; 

---

(source_file 
    (create_domain_statement (identifier)))


=====================
CREATE DOMAIN with type
=====================

CREATE DOMAIN test AS text; 

---

(source_file 
    (create_domain_statement (identifier) (data_type (identifier))))


=====================
CREATE DOMAIN with array type
=====================

CREATE DOMAIN test_arr AS text[]; 

---

(source_file 
    (create_domain_statement (identifier) (data_type (identifier))))


=====================
CREATE DOMAIN type with constraint
=====================

CREATE DOMAIN test AS text NOT NULL; 

---

(source_file 
    (create_domain_statement (identifier) (data_type (identifier) (constraint))))


=====================
CREATE DOMAIN array type with constraint
=====================

CREATE DOMAIN test AS text[] NOT NULL; 

---

(source_file 
    (create_domain_statement (identifier) (data_type (identifier) (constraint))))


=====================
CREATE INDEX
=====================

CREATE INDEX test_idx ON table(col1, col2);

---

(source_file 
    (create_index_statement (identifier) (identifier)
        (index_table_parameters (identifier) (identifier))))

=====================
CREATE INDEX with function
=====================

CREATE INDEX test_idx ON table(lower(col1), col2);

---

(source_file 
    (create_index_statement (identifier) (identifier)
        (index_table_parameters (function_call (identifier) (identifier)) (identifier))))


=====================
CREATE INDEX where clause
=====================

CREATE INDEX test_idx ON table(col1) WHERE col1 IS NOT NULL;

---

(source_file 
    (create_index_statement (identifier) (identifier)
        (index_table_parameters (identifier)) (where_clause (is_expression (identifier) (NULL)))))


=====================
CREATE INDEX where clause not equal
=====================

CREATE INDEX test_idx ON table(col1) WHERE col1 <> 1

---

(source_file 
    (create_index_statement (identifier) (identifier)
        (index_table_parameters (identifier)) (where_clause (comparison_operator (identifier) (number)))))
