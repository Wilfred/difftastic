=====================================
Return constant
=====================================
class A {
  int Sample() {
    return 1;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (predefined_type)
      (identifier_name)
      (parameter_list)
      (statement_block
        (return_statement (integer_literal))))))

=====================================
Return nothing
=====================================
class A {
  void Sample() {
    return;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (return_statement)))))



=====================================
Break in while
=====================================
class A {
  void Sample() {
    while (true) break;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (while_statement (boolean_expression  (boolean_literal))
          (break_statement))))))

=====================================
Continue in while
=====================================
class A {
  void Sample() {
    while (false) continue;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (while_statement (boolean_expression (boolean_literal))
          (continue_statement))))))

=====================================
Throw nothing
=====================================
class A {
  void Sample() {
    throw;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (throw_statement)))))

=====================================
Throw exception
=====================================
class A {
  void Sample() {
    throw ex;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (throw_statement (identifier_name))))))

=====================================
Do while
=====================================
class A {
  void Sample(bool a) {
    do { } while (a);
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list
        (parameter (predefined_type) (identifier_name)))
      (statement_block
        (do_statement
          (statement_block)
          (boolean_expression (identifier_name)))))))

=====================================
Goto statement and label
=====================================
class A {
  void Sample() {
    goto end;
    end:
      return;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (goto_statement (label_name))
        (label_name) (return_statement)))))

=====================================
If statement
=====================================
class A {
  int Sample() {
    if (true) return 1;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (predefined_type)
      (identifier_name)
      (parameter_list)
      (statement_block
        (if_statement (boolean_expression (boolean_literal))
          (return_statement (integer_literal)))))))

=====================================
If Else statement
=====================================
class A {
  int Sample() {
    if (true) return 1;
    else return 0;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (predefined_type)
      (identifier_name)
      (parameter_list)
      (statement_block
        (if_statement (boolean_expression (boolean_literal))
          (return_statement (integer_literal))
          (return_statement (integer_literal)))))))

=====================================
Switch statement
=====================================
class A {
  int Sample(int a) {
    switch (a) {
      case 1:
      case 2:
        return 0;
      default: {
        return 1;
      }
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (predefined_type)
      (identifier_name)
      (parameter_list
        (parameter (predefined_type) (identifier_name)))
      (statement_block
        (switch_statement (identifier_name)
          (switch_section
            (switch_label (constant_expression (integer_literal)))
            (switch_label (constant_expression (integer_literal)))
            (return_statement (integer_literal)))
          (switch_section
            (switch_label)
            (statement_block
              (return_statement (integer_literal)))))))))

=====================================
Try finally statement
=====================================
class A {
  void Sample() {
    try {
    } finally {
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (try_statement
          (statement_block)
          (finally_clause
            (statement_block)))))))

=====================================
Try catch statement
=====================================
class A {
  void Sample() {
    try {
    } catch (Exception ex) {
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (try_statement
          (statement_block)
          (catch_clause
            (identifier_name) (identifier_name)
            (statement_block)))))))

=====================================
Try catch finally statement
=====================================
class A {
  void Sample() {
    try {
    } catch (Exception ex) {
    } finally {
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (try_statement
          (statement_block)
          (catch_clause
            (identifier_name) (identifier_name)
            (statement_block))
          (finally_clause
            (statement_block)))))))

=====================================
Try catch multiple statement
=====================================
class A {
  void Sample() {
    try {
    } catch (Exception ex) {
    } catch (OtherException ex) {
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (try_statement
          (statement_block)
          (catch_clause
            (identifier_name) (identifier_name)
            (statement_block))
          (catch_clause
            (identifier_name) (identifier_name)
            (statement_block)))))))

=====================================
Try catch filtered statement
=====================================
class A {
  void Sample() {
    try {
    } catch (Exception ex) when (a == 1) {
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (try_statement
          (statement_block)
          (catch_clause
            (identifier_name) (identifier_name)
            (binary_expression (identifier_name) (integer_literal))
            (statement_block)))))))

=====================================
Checked statement
=====================================
class A {
  void Sample() {
    checked {
      return;
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (checked_statement
          (statement_block
            (return_statement)))))))

=====================================
Unchecked statement
=====================================
class A {
  void Sample() {
    unchecked {
      return;
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (unchecked_statement
          (statement_block
            (return_statement)))))))

=====================================
Lock statement
=====================================
class A {
  void Sample() {
    lock (this) {
      return;
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (lock_statement
          (identifier_name)
          (statement_block
            (return_statement)))))))

=====================================
Yield statement
=====================================
class A {
  IEnumerable<int> Sample() {
    yield return 1;
    yield break;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (generic_name
        (identifier_name)
        (type_parameter_list (type_parameter (predefined_type))))
      (identifier_name)
      (parameter_list)
      (statement_block
        (yield_statement (integer_literal))
        (yield_statement)))))

=====================================
Implicit local variable with literal initializer
=====================================
class A {
  void Sample() {
    var a = 1;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (local_variable_declaration
          (local_variable_declarator
            (identifier_name)
              (local_variable_initializer
                (integer_literal))))))))

=====================================
Explicit local variable with literal initializer
=====================================
class A {
  void Sample() {
    int a = 1;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (local_variable_declaration
          (predefined_type)
          (local_variable_declarator
            (identifier_name)
              (local_variable_initializer
                (integer_literal))))))))

=====================================
Explicit local variable with no initializer
=====================================
class A {
  void Sample() {
    int a;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (local_variable_declaration
          (predefined_type)
          (local_variable_declarator
            (identifier_name)))))))

=====================================
Explicit local variables with multiple literal initializers
=====================================
class A {
  void Sample() {
    int a = 1, b = 2;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (local_variable_declaration
          (predefined_type)
          (local_variable_declarator
            (identifier_name)
              (local_variable_initializer
                (integer_literal)))
          (local_variable_declarator
            (identifier_name)
              (local_variable_initializer
                (integer_literal))))))))

=====================================
Explicit local constant with literal initializer
=====================================
class A {
  void Sample() {
    const int a = 1;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (local_constant_declaration
          (predefined_type)
            (constant_declarator (identifier_name)
              (constant_expression (integer_literal))))))))

=====================================
Explicit local constant with multiple literal initializers
=====================================
class A {
  void Sample() {
    const int a = 1, b = 2;
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (local_constant_declaration
          (predefined_type)
            (constant_declarator (identifier_name)
              (constant_expression (integer_literal)))
            (constant_declarator (identifier_name)
              (constant_expression (integer_literal))))))))

=====================================
Using statement with implicit local variable
=====================================
class A {
  void Sample() {
    using (var a = b) {
      return;
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (using_statement
          (local_variable_declaration
            (local_variable_declarator
              (identifier_name)
                (local_variable_initializer
                  (identifier_name))))
          (statement_block
            (return_statement)))))))

=====================================
Using statement with explicit local variable
=====================================
class A {
  void Sample() {
    using (Object a = b) {
      return;
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (using_statement
          (local_variable_declaration
            (identifier_name)
            (local_variable_declarator
              (identifier_name)
                (local_variable_initializer
                  (identifier_name))))
          (statement_block
            (return_statement)))))))
        
=====================================
Using statement with expression
=====================================
class A {
  void Sample() {
    using (this) {
      return;
    }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (method_declaration
      (void_keyword)
      (identifier_name)
      (parameter_list)
      (statement_block
        (using_statement
          (identifier_name)
          (statement_block
            (return_statement)))))))
        