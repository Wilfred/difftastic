============================================
Modules
============================================

mod english;

mod english {}

mod english {
    mod greetings {}
    mod farewells {}
}

pub mod english;

---

(source_file
  (mod_item (identifier))
  (mod_item (identifier))
  (mod_item (identifier)
    (mod_item (identifier))
    (mod_item (identifier)))
  (mod_item (visibility_modifier) (identifier)))

============================================
Extern crate declarations
============================================

extern crate std;

extern crate std as ruststd;

---

(source_file
  (extern_crate_declaration (identifier))
  (extern_crate_declaration (identifier) (identifier)))

============================================
Function declarations
============================================

fn main() {}

fn add(x: i32, y: i32) -> i32 {
    return x + y;
}

fn takes_slice(slice: &str) {
    println!("Got: {}", slice);
}

---

(source_file
  (function_item (identifier) (parameters) (block))
  (function_item (identifier)
    (parameters
      (identifier) (primitive_type) (identifier) (primitive_type))
    (primitive_type)
    (block
      (return_expression (binary_expression (identifier) (identifier)))))
  (function_item (identifier)
    (parameters (identifier) (reference_type (primitive_type)))
    (block (macro_invocation (macro_name) (macro_arguments (string_literal) (identifier))))))

============================================
Use declarations
============================================

use abc;
use phrases::japanese;
use sayings::english::greetings;
use sayings::english::greetings as en_greetings ;
use phrases::english::{greetings,farewells};
use sayings::japanese::farewells::*;
pub use self::greetings::hello;
use sayings::english::{self, greetings as en_greetings, farewells as en_farewells};

---

(source_file
  (use_declaration (identifier))
  (use_declaration (path (identifier)) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (identifier) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (identifier) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (path (identifier)))
  (use_declaration (visibility_modifier) (path (self)) (path (identifier)) (identifier))
  (use_declaration (path (identifier)) (path (identifier)) (self) (identifier) (identifier) (identifier) (identifier)))

============================================
Variable bindings
============================================

let x;
let x = 42;
let x: i32;
let x: i8 = 42;
let mut x = 5;
let y: bool = false;

---

(source_file
  (let_declaration (identifier))
  (let_declaration (identifier) (number_literal))
  (let_declaration (identifier) (primitive_type))
  (let_declaration (identifier) (primitive_type) (number_literal))
  (let_declaration (mutable_specifier) (identifier) (number_literal))
  (let_declaration (identifier) (primitive_type) (boolean_literal)))

============================================
Structs
============================================

struct Proton;
struct Electron {}
struct Point {x: i32, y: i32}
struct Point {
  x: i32,
  y: i32,
}
struct Color(i32, i32, i32);
struct Inches(i32);

---

(source_file
  (struct_item (type_identifier))
  (struct_item (type_identifier))
  (struct_item (type_identifier)
    (identifier) (primitive_type)
    (identifier) (primitive_type))
  (struct_item (type_identifier)
    (identifier) (primitive_type)
    (identifier) (primitive_type))
  (struct_item (type_identifier)
    (primitive_type) (primitive_type) (primitive_type))
  (struct_item (type_identifier) (primitive_type)))

============================================
Generic structs
============================================

struct A<B> {}
struct C<'a, 'b> {}

---

(source_file
  (struct_item
    (type_identifier)
    (type_parameters (type_identifier)))
  (struct_item
    (type_identifier)
    (type_parameters (lifetime (identifier)) (lifetime (identifier)))))

============================================
Constant items
============================================

const N: i32 = 5;

---

(source_file (const_item (identifier) (primitive_type) (number_literal)))

============================================
Static items
============================================

static N: i32 = 5;

---

(source_file (static_item (identifier) (primitive_type) (number_literal)))

============================================
Type aliases
============================================

type Inch = u64;
type Name = String;

---

(source_file
  (type_item (type_identifier) (primitive_type))
  (type_item (type_identifier) (type_identifier)))

============================================
Empty statements
============================================

fn main() {
    ;
}

---

(source_file
  (function_item (identifier) (parameters) (block
    (empty_statement))))

============================================
Attributes
============================================

#[test]
fn test_foo() {}

#[derive(Debug)]
struct Baz;

#[derive(Debug, Eq,)]
struct Foo;

#[cfg(target_os = "macos")]
mod macos_only {}

---

(source_file
  (attribute_item (meta_item (identifier)))
  (function_item (identifier) (parameters) (block))

  (attribute_item (meta_item (identifier) (meta_item (identifier))))
  (struct_item (type_identifier))

  (attribute_item (meta_item (identifier) (meta_item (identifier)) (meta_item (identifier))))
  (struct_item (type_identifier))

  (attribute_item (meta_item (identifier) (meta_item (identifier) (string_literal))))
  (mod_item (identifier)))

============================================
Inner attributes
============================================

mod macos_only {
  #![cfg(target_os = "macos")]
}

---

(source_file
  (mod_item (identifier)
    (inner_attribute_item (meta_item (identifier) (meta_item (identifier) (string_literal))))))

===========================================
Impls
===========================================

impl Person {
  const leg_count : u32 = 2;

  fn walk() {}
}

---

(source_file
  (impl_item
    (type_identifier)
    (const_item (identifier) (primitive_type) (number_literal))
    (function_item (identifier) (parameters) (block))))
