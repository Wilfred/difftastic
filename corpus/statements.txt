============================================
Imports
============================================

import defaultMember from "module-name";
import * as name from "module-name";
import { member } from "module-name";
import { member1 , member2 } from "module-name";
import { member1 , member2 as alias2 } from "module-name";
import defaultMember, { member1, member2 as alias2 } from "module-name";
import defaultMember, * as name from "module-name";
import "module-name";
import { member1 , member2 as alias2, } from "module-name";

----

(program
  (import_statement
    (import_clause (variable_name)) (string))
  (import_statement
    (import_clause (namespace_import (variable_name))) (string))
  (import_statement
    (import_clause (named_imports (import_specifier (variable_name)))) (string))
  (import_statement
    (import_clause (named_imports (import_specifier (variable_name)) (import_specifier (variable_name)))) (string))
  (import_statement
    (import_clause (named_imports (import_specifier (variable_name)) (import_specifier (variable_name) (variable_name)))) (string))
  (import_statement
    (import_clause (variable_name) (named_imports (import_specifier (variable_name)) (import_specifier (variable_name) (variable_name)))) (string))
  (import_statement
    (import_clause (variable_name) (namespace_import (variable_name))) (string))
  (import_statement
    (string))
  (import_statement
    (import_clause (named_imports (import_specifier (variable_name)) (import_specifier (variable_name) (variable_name)))) (string)))

============================================
Exports
============================================

export { name1, name2, name3, nameN };
export { variable1 as name1, variable2 as name2, nameN };
export let name1, name2, nameN;
export let name1 = value1, name2 = value2, name3, nameN;

export default expression;
export default function () { }
export default function name1() { }
export { name1 as default };

export * from 'foo';
export { name1, name2, nameN } from 'foo';
export { import1 as name1, import2 as name2, nameN } from 'foo';

----

(program
  (export_statement
    (export_clause
      (export_specifier (variable_name))
      (export_specifier (variable_name))
      (export_specifier (variable_name))
      (export_specifier (variable_name))))
  (export_statement
    (export_clause
      (export_specifier (variable_name) (variable_name))
      (export_specifier (variable_name) (variable_name))
      (export_specifier (variable_name))))
  (export_statement
    (lexical_declaration
      (variable_declarator (variable_name))
      (variable_declarator (variable_name))
      (variable_declarator (variable_name))))
  (export_statement
    (lexical_declaration
      (variable_declarator (variable_name) (variable_name))
      (variable_declarator (variable_name) (variable_name))
      (variable_declarator (variable_name))
      (variable_declarator (variable_name))))
  (export_statement
    (variable_name))
  (export_statement
    (function (formal_parameters) (statement_block)))
  (export_statement
    (function (variable_name) (formal_parameters) (statement_block)))
  (export_statement
    (export_clause (export_specifier (variable_name) (variable_name))))
  (export_statement
    (string))
  (export_statement
    (export_clause
      (export_specifier (variable_name))
      (export_specifier (variable_name))
      (export_specifier (variable_name)))
    (string))
  (export_statement
    (export_clause
      (export_specifier (variable_name) (variable_name))
      (export_specifier (variable_name) (variable_name))
      (export_specifier (variable_name)))
    (string)))

============================================
If statements
============================================

if (x)
  log(y);

if (a.b) {
  log(c);
  d;
}

----

(program
  (if_statement (variable_name)
    (expression_statement (function_call
      (variable_name) (arguments (variable_name)))))
  (if_statement (member_access (variable_name) (property_name))
    (statement_block
      (expression_statement (function_call
        (variable_name) (arguments (variable_name))))
      (expression_statement (variable_name)))))

============================================
If-else statements
============================================

if (x)
  y;
else if (a)
  b;

if (a) {
  c;
  d;
} else {
  e;
}

----

(program
  (if_statement (variable_name)
    (expression_statement (variable_name))
    (if_statement (variable_name)
      (expression_statement (variable_name))))
  (if_statement (variable_name)
    (statement_block
      (expression_statement (variable_name))
      (expression_statement (variable_name)))
    (statement_block
      (expression_statement (variable_name)))))

============================================
For statements
============================================

for (var a, b; c; d)
  e;

for (i = 0, init(); i < 10; i++)
  log(y);

for (;;) {
  z;
  continue;
}

---

(program
  (for_statement
    (variable_declaration
      (variable_declarator (variable_name))
      (variable_declarator (variable_name)))
    (variable_name)
    (variable_name)
    (expression_statement (variable_name)))

  (for_statement
    (assignment (variable_name) (number))
    (function_call (variable_name) (arguments))
    (rel_op (variable_name) (number))
    (math_op (variable_name))
    (expression_statement (function_call (variable_name) (arguments (variable_name)))))

  (for_statement
    (statement_block
      (expression_statement (variable_name))
      (continue_statement))))

============================================
For-in statements
============================================

for (var item in items)
  item();

for (item in items)
  item();

---

(program
  (for_in_statement (variable_name) (variable_name)
    (expression_statement (function_call (variable_name) (arguments))))
  (for_in_statement (variable_name) (variable_name)
    (expression_statement (function_call (variable_name) (arguments)))))

==========================================
For loops beginning with an in-expression
==========================================

for (key in something && i = 0; i < n; i++) {
  doSomething();
}

---

(program (for_statement
  (bool_op
    (type_op (variable_name) (variable_name))
    (assignment (variable_name) (number)))
  (rel_op (variable_name) (variable_name))
  (math_op (variable_name))
  (statement_block
    (expression_statement (function_call (variable_name) (arguments))))))

============================================
For-of statements
============================================

for (let item of items)
  process(item);

---

(program
  (for_of_statement (variable_name) (variable_name)
    (expression_statement (function_call (variable_name) (arguments (variable_name))))))

============================================
While statements
============================================

while (a)
  b();

---

(program
  (while_statement (variable_name)
    (expression_statement (function_call (variable_name) (arguments)))))

============================================
Do statements
============================================

do {
  a;
} while (b)

---

(program
  (do_statement
    (statement_block (expression_statement (variable_name)))
    (variable_name)))

============================================
Return statements
============================================

return;
return 5;
return 1,2;
return async;
return a;

---

(program
  (return_statement)
  (return_statement (number))
  (return_statement (comma_op (number) (number)))
  (return_statement (variable_name))
  (return_statement (variable_name)))

============================================
Variable declarations
============================================

var x = 1;
var x, y = {}, z;

---

(program
  (variable_declaration
    (variable_declarator (variable_name) (number)))
  (variable_declaration
    (variable_declarator (variable_name))
    (variable_declarator (variable_name) (object))
    (variable_declarator (variable_name))))

============================================
Comments
============================================

{

  // This is a property
  aProperty: 1,

  /*
   * This is a method
   */
  aMethod: function() {}
};

---

(program
  (expression_statement (object
    (comment)
    (pair (property_name) (number))
    (comment)
    (pair (property_name) (function (formal_parameters) (statement_block))))))

==========================================
Comments between statements
==========================================

// this is the beginning of the script.
// here we go.
var thing = {

  // this is a property.
  // its value is a function.
  key: function(x /* this is a parameter */) {
    // this is one statement
    one();
    // this is another statement
    two();
  }
};

---

(program
  (comment)
  (comment)
  (variable_declaration (variable_declarator
    (variable_name)
    (object
      (comment)
      (comment)
      (pair (property_name) (function
        (formal_parameters (variable_name) (comment))
        (statement_block
          (comment)
          (expression_statement
            (function_call (variable_name) (arguments)))
          (comment)
          (expression_statement
            (function_call (variable_name) (arguments))))))))))

============================================
Comments with asterisks
============================================

/* a */
const a = 1;

/* b **/
const b = 1;

/* c ***/
const c = 1;

/* d

***/
const d = 1;

---

(program
  (comment)
  (lexical_declaration (variable_declarator (variable_name) (number)))
  (comment)
  (lexical_declaration (variable_declarator (variable_name) (number)))
  (comment)
  (lexical_declaration (variable_declarator (variable_name) (number)))
  (comment)
  (lexical_declaration (variable_declarator (variable_name) (number))))

==========================================
Comments within expressions
==========================================

y // comment
  * z;

---

(program (expression_statement
  (math_op (variable_name) (comment) (variable_name))))

============================================
Switch statements
============================================

switch (x) {
  case 1:
  case 2:
    something();
    break;
  case "three":
    somethingElse();
    break;
  default:
    return 4;
}

---

(program
  (switch_statement (variable_name)
    (case (number))
    (case (number)
      (expression_statement (function_call (variable_name) (arguments)))
      (break_statement))
    (case (string)
      (expression_statement (function_call (variable_name) (arguments)))
      (break_statement))
    (default
      (return_statement (number)))))

============================================
Throw statements
============================================

throw new Error("uh oh");

---

(program
  (throw_statement
    (new_expression (function_call (variable_name) (arguments (string))))))

============================================
Throw statements with sequence expressions
============================================

throw f = 1, f;
throw g = 2, g
---

(program
  (throw_statement
    (comma_op (assignment (variable_name) (number)) (variable_name)))
  (throw_statement
    (comma_op (assignment (variable_name) (number)) (variable_name))))

============================================
Try catch finally statements
============================================

try { a; } catch (b) { c; }
try { d; } finally { e; }
try { f; } catch { g; } finally { h; }

---

(program
  (try_statement
    (statement_block (expression_statement (variable_name)))
    (catch (variable_name)
      (statement_block (expression_statement (variable_name)))))
  (try_statement
    (statement_block (expression_statement (variable_name)))
    (finally
      (statement_block (expression_statement (variable_name)))))
  (try_statement
    (statement_block (expression_statement (variable_name)))
    (catch
      (statement_block (expression_statement (variable_name))))
    (finally
      (statement_block (expression_statement (variable_name))))))

============================================
Empty statements
============================================

if (true) { ; };;;

---

(program
  (if_statement (true) (statement_block
    (empty_statement)))
  (empty_statement)
  (empty_statement)
  (empty_statement))

============================================
Labeled statements
============================================

theLoop:
for (;;) {
  if (a) {
    break theLoop;
  } else {
    continue theLoop;
  }
}

---

(program
  (labeled_statement (label_name)
    (for_statement (statement_block
      (if_statement (variable_name)
        (statement_block (break_statement (label_name)))
        (statement_block (continue_statement (label_name))))))))

============================================
Debugger statements
============================================

debugger;
debugger

---

(program (debugger_statement) (debugger_statement))

============================================
With statements
============================================

with (x) { i; }

---

(program (with_statement (variable_name) (statement_block (expression_statement (variable_name)))))
