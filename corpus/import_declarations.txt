=========================================
Import Declaration
=========================================

module A where

import Maybe
import Either()

---

(module
  (identifier)
  (where
    (import (identifier))
    (import (identifier))))

=========================================
Import Declaration With Constructor
=========================================

module A where

import Data.Maybe (Maybe(..))
import Data.Aeson ((.:))
import Control.Comonad.Cofree ((:<))

---

(module
  (identifier)
  (where
    (import
      (identifier)
      (import_spec (type_constructor (identifier) (all_constructors))))
    (import
      (identifier)
      (import_spec (variable_symbol)))
    (import
      (identifier)
      (import_spec (constructor_symbol)))))

=========================================
Import Declaration With Functions
=========================================

module A where

import Data.Maybe (fromMaybe, fromJust)

---

(module
  (identifier)
  (where
    (import
      (identifier)
      (import_spec (variable) (variable)))))

=========================================
Import Declaration With Constructor And Functions
=========================================

module A where

import Data.Maybe (Maybe(..), fromMaybe, fromJust)

---

(module
  (identifier)
  (where
    (import
      (identifier)
      (import_spec
        (type_constructor (identifier) (all_constructors))
        (variable)
        (variable)))))

=========================================
Import Declaration With Qualified
=========================================

module A where

import qualified Data.Maybe
import qualified Either ()
import qualified Data.Function (fix)

---

(module
  (identifier)
  (where
    (import
      (qualified)
      (identifier))
    (import
      (qualified)
      (identifier))
    (import
      (qualified)
      (identifier)
      (import_spec (variable)))))

=========================================
Import Declaration With Qualified, As
=========================================

module A where

import qualified Data.Maybe as DM
import qualified Either as E ()
import qualified Data.Aeson as JSON
import qualified Data.Aeson as D.A

---

(module
  (identifier)
  (where
    (import
      (qualified)
      (import_alias
        (identifier)
        (identifier)))
    (import
      (qualified)
      (import_alias
        (identifier)
        (identifier)))
    (import
      (qualified)
      (import_alias (identifier) (identifier)))
    (import
      (qualified)
      (import_alias (identifier) (identifier)))))

=========================================
Import Declaration With As, Constructor And Function
=========================================

module A where

import Data.Maybe as DM (Maybe(..), fromMaybe)

---

(module
  (identifier)
  (where
    (import
      (import_alias
        (identifier)
        (identifier))
      (import_spec
        (type_constructor (identifier) (all_constructors))
        (variable)))))

=========================================
Import Declaration With Qualified, As, Constructor And Function
=========================================

module A where

import qualified Data.Maybe as M (Maybe(..), fromMaybe)

---

(module
  (identifier)
  (where
    (import
      (qualified)
      (import_alias
        (identifier)
        (identifier))
      (import_spec
        (type_constructor (identifier) (all_constructors))
        (variable)))))

=========================================
Import Declaration With Hiding, Constructor and Function
=========================================

module A where

import Data.Maybe hiding (Maybe(..), fromMaybe)

---

(module
  (identifier)
  (where
    (import
      (identifier)
      (hidden_import
        (type_constructor (identifier) (all_constructors))
        (variable)))))

=========================================
Import Declaration With Qualified, Hiding, Constructor and Function
=========================================

module A where

import qualified Data.Maybe hiding ()
import qualified Data.Either hiding (Either(..), decodeEither)
import qualified Data.Function hiding (fix)
import qualified Data.List as DL hiding (head)

---

(module
  (identifier)
  (where
    (import
      (qualified)
      (identifier)
      (hidden_import))
    (import
      (qualified)
      (identifier)
      (hidden_import
        (type_constructor (identifier) (all_constructors))
        (variable)))
    (import
      (qualified)
      (identifier)
      (hidden_import (variable)))
    (import
      (qualified)
      (import_alias
        (identifier)
        (identifier))
      (hidden_import (variable)))))
