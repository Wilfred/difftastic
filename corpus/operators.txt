=====================================================
Test + operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	   echo "--- testing: $longVal + $otherVal ---\n";
      var_dump($longVal+$otherVal);
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	   echo "--- testing: $otherVal + $longVal ---\n";
      var_dump($otherVal+$longVal);
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test + operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	   echo "--- testing: '$strVal' + '$otherVal' ---\n";
      var_dump($strVal+$otherVal);
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test & operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	   echo "--- testing: $longVal & $otherVal ---\n";
      var_dump($longVal&$otherVal);
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	   echo "--- testing: $otherVal & $longVal ---\n";
      var_dump($otherVal&$longVal);
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test & operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	   echo "--- testing: '$strVal' & '$otherVal' ---\n";
      var_dump(bin2hex($strVal&$otherVal));
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))))) (text))

=====================================================
Test ~N operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);


foreach ($longVals as $longVal) {
   echo "--- testing: $longVal ---\n";
   var_dump(~$longVal);
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (unary_op_expression (variable_name (name)))))))) (text))

=====================================================
Test ~N operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);


foreach ($strVals as $strVal) {
   echo "--- testing: '$strVal' ---\n";
   var_dump(bin2hex(~$strVal));
}

?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (unary_op_expression (variable_name (name)))))))))) (text))

=====================================================
Test | operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	   echo "--- testing: $longVal | $otherVal ---\n";
      var_dump($longVal|$otherVal);
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	   echo "--- testing: $otherVal | $longVal ---\n";
      var_dump($otherVal|$longVal);
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test | operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	   echo "--- testing: '$strVal' | '$otherVal' ---\n";
      var_dump(bin2hex($strVal|$otherVal));
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))))) (text))

=====================================================
Test << operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	  echo "--- testing: $longVal << $otherVal ---\n";
	  try {
        var_dump($longVal<<$otherVal);
      } catch (ArithmeticError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	  echo "--- testing: $otherVal << $longVal ---\n";
	  try {
        var_dump($otherVal<<$longVal);
      } catch (ArithmeticError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (text))

=====================================================
Test << operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	  echo "--- testing: '$strVal' << '$otherVal' ---\n";
      try {
        var_dump(strVal<<$otherVal);
      } catch (Throwable $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}

?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (qualified_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (text))

=====================================================
Test << operator : numbers as strings, simple
=====================================================

<?php

error_reporting(E_ERROR);

var_dump("12" << "0");
var_dump("34" << "1");
var_dump("56" << "2");

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (string) (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (string) (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (string) (string))))) (text))

=====================================================
Test << operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	  echo "--- testing: '$strVal' << '$otherVal' ---\n";
      try {
        var_dump($strVal<<$otherVal);
      } catch (ArithmeticError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (text))

=====================================================
Test >> operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	  echo "--- testing: $longVal >> $otherVal ---\n";
      try {
        var_dump($longVal>>$otherVal);
      } catch (ArithmeticError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	  echo "--- testing: $otherVal >> $longVal ---\n";
	  try {
        var_dump($otherVal>>$longVal);
      } catch (ArithmeticError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (text))

=====================================================
Test >> operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	  echo "--- testing: '$strVal' >> '$otherVal' ---\n";
	  try {
        var_dump($strVal>>$otherVal);
      } catch (ArithmeticError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (text))

=====================================================
Test >> operator : numbers as strings, simple
=====================================================

<?php

error_reporting(E_ERROR);

var_dump("12" >> "0");
var_dump("34" >> "1");
var_dump("56" >> "2");

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (string) (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (string) (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (string) (string))))) (text))
=====================================================
Test ^ operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	   echo "--- testing: $longVal ^ $otherVal ---\n";
      var_dump($longVal^$otherVal);
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	   echo "--- testing: $otherVal ^ $longVal ---\n";
      var_dump($otherVal^$longVal);
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test ^ operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	   echo "--- testing: '$strVal' ^ '$otherVal' ---\n";
      var_dump(bin2hex($strVal^$otherVal));
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))))) (text))

=====================================================
Test / operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	   echo "--- testing: $longVal / $otherVal ---\n";
      var_dump($longVal/$otherVal);
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	   echo "--- testing: $otherVal / $longVal ---\n";
      var_dump($otherVal/$longVal);
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test / operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	   echo "--- testing: '$strVal' / '$otherVal' ---\n";
      var_dump($strVal/$otherVal);
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test % operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	  echo "--- testing: $longVal % $otherVal ---\n";
	  try {
	    var_dump($longVal%$otherVal);
      } catch (DivisionByZeroError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	  echo "--- testing: $otherVal % $longVal ---\n";
	  try {
        var_dump($otherVal%$longVal);
      } catch (DivisionByZeroError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (text))

=====================================================
Test % operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	  echo "--- testing: '$strVal' % '$otherVal' ---\n";
      try {
        var_dump($strVal%$otherVal);
      } catch (DivisionByZeroError $e) {
        echo "Exception: " . $e->getMessage() . "\n";
      }
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (try_statement (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name))))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))))))) (text))

=====================================================
Test * operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	   echo "--- testing: $longVal * $otherVal ---\n";
      var_dump($longVal*$otherVal);
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	   echo "--- testing: $otherVal * $longVal ---\n";
      var_dump($otherVal*$longVal);
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test * operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	   echo "--- testing: '$strVal' * '$otherVal' ---\n";
      var_dump($strVal*$otherVal);
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Comparisons with NAN should yield false, even at compile-time
=====================================================

<?php

echo "** CONST\n";
var_dump(0 < NAN);
var_dump(0 <= NAN);
var_dump(0 > NAN);
var_dump(0 >= NAN);

echo "** VAR\n";
$nan = NAN;
var_dump(0 < $nan);
var_dump(0 <= $nan);
var_dump(0 > $nan);
var_dump(0 >= $nan);


---

(program (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (integer) (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (integer) (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (integer) (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (integer) (qualified_name (name)))))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (integer) (variable_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (integer) (variable_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (integer) (variable_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (integer) (variable_name (name)))))))

=====================================================
Test -N operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);


foreach ($longVals as $longVal) {
   echo "--- testing: $longVal ---\n";
   var_dump(-$longVal);
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (unary_op_expression (variable_name (name)))))))) (text))

=====================================================
Test > operator : different types
=====================================================

<?php
$valid_true = array(1, "1", "true", 1.0, array(1));
$valid_false = array(0, "", 0.0, array(), NULL);

$int1 = 679;
$int2 = -67835;
$valid_int1 = array("678", "678abc", " 678", "678  ", 678.0, 6.789E2, "+678", +678);
$valid_int2 = array("-67836", "-67836abc", " -67836", "-67836  ", -67835.0001, -6.78351E4);
$invalid_int1 = array(679, "679");
$invalid_int2 = array(-67835, "-67835");

$float1 = 57385.45835;
$float2 = -67345.76567;
$valid_float1 = array("57385.45834",  "57385.45834aaa", "  57385.45834", 5.738545834e4);
$valid_float2 = array("-67345.76568", "-67345.76568aaa", "  -67345.76568", -6.734576568E4);
$invalid_float1 = array(57385.45835, 5.738545835e4);
$invalid_float2 = array(-67345.76567, -6.734576567E4);


$toCompare = array(
// boolean test will result in both sides being converted to boolean so !0 = true and true is not > true for example
// also note that a string of "0" is converted to false but a string of "0.0" is converted to true
// false cannot be tested as 0 can never be > 0 or 1
  true, $valid_false, $valid_true,
  $int1, $valid_int1, $invalid_int1,
  $int2, $valid_int2, $invalid_int2,
  $float1, $valid_float1, $invalid_float1,
  $float2, $valid_float2, $invalid_float2
);

$failed = false;
for ($i = 0; $i < count($toCompare); $i +=3) {
   $typeToTest = $toCompare[$i];
   $valid_compares = $toCompare[$i + 1];
   $invalid_compares = $toCompare[$i + 2];

   foreach($valid_compares as $compareVal) {
      if ($typeToTest > $compareVal) {
         // do nothing
      }
      else {
         echo "FAILED: '$typeToTest' <= '$compareVal'\n";
         $failed = true;
      }
   }

   foreach($invalid_compares as $compareVal) {
      if ($typeToTest > $compareVal) {
         echo "FAILED: '$typeToTest' > '$compareVal'\n";
         $failed = true;
      }
   }

}
if ($failed == false) {
   echo "Test Passed\n";
}
?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (array_creation_expression (array_element_initializer (integer))))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (array_creation_expression)) (array_element_initializer (qualified_name (name)))))) (expression_statement (assignment_expression (variable_name (name)) (integer))) (expression_statement (assignment_expression (variable_name (name)) (unary_op_expression (integer)))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (float)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float))) (array_element_initializer (unary_op_expression (float)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (string))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (string))))) (expression_statement (assignment_expression (variable_name (name)) (float))) (expression_statement (assignment_expression (variable_name (name)) (unary_op_expression (float)))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (float)) (array_element_initializer (float))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (unary_op_expression (float))) (array_element_initializer (unary_op_expression (float)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (comment) (comment) (comment) (array_element_initializer (qualified_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name)))))) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (comment)) (else_clause (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))))))))) (if_statement (binary_expression (variable_name (name)) (qualified_name (name))) (compound_statement (echo_statement (string)))) (text))

=====================================================
Test > operator : max int 32bit range
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$validGreaterThan = array (
MAX_32Bit, array(MAX_32Bit - 1, "2147483646", "2147483646.999", 2.147483646e9, 2147483646.9, MIN_32Bit),
-2147483647, array(MIN_32Bit, "-2147483648", "-2147483647.001", -2.1474836471e9, -2147483647.9),
);

$invalidGreaterThan = array (
MAX_32Bit, array(2e33, MAX_32Bit + 1),
MIN_32Bit, array(MIN_32Bit + 1, MAX_32Bit)
);



$failed = false;
// test valid values
for ($i = 0; $i < count($validGreaterThan); $i +=2) {
   $typeToTestVal = $validGreaterThan[$i];
   $compares = $validGreaterThan[$i + 1];
   foreach($compares as $compareVal) {
      if ($typeToTestVal > $compareVal) {
         // do nothing
      }
      else {
         echo "FAILED: '$typeToTestVal' <= '$compareVal'\n";
         $failed = true;
      }
   }
}
// test for invalid values
for ($i = 0; $i < count($invalidGreaterThan); $i +=2) {
   $typeToTestVal = $invalidGreaterThan[$i];
   $compares = $invalidGreaterThan[$i + 1];
   foreach($compares as $compareVal) {
      if ($typeToTestVal > $compareVal) {
         echo "FAILED: '$typeToTestVal' > '$compareVal'\n";
         $failed = true;
      }
   }
}

if ($failed == false) {
   echo "Test Passed\n";
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (float)) (array_element_initializer (qualified_name (name))))) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float))) (array_element_initializer (unary_op_expression (float)))))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (float)) (array_element_initializer (binary_expression (qualified_name (name)) (integer))))) (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (qualified_name (name)))))))) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (comment)) (else_clause (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name))))))))))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))))))))) (if_statement (binary_expression (variable_name (name)) (qualified_name (name))) (compound_statement (echo_statement (string)))) (text))

=====================================================
Test > operator : max int 64bit range
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$validGreaterThan = array (
MAX_32Bit, array(MAX_32Bit - 1, "2147483646", "2147483646.999", 2.147483646e9, 2147483646.9, MIN_32Bit),
-2147483647, array(MIN_32Bit, "-2147483648", "-2147483647.001", -2.1474836471e9, -2147483647.9),
);

$invalidGreaterThan = array (
MAX_32Bit, array(2e33, MAX_32Bit + 1),
MIN_32Bit, array(MIN_32Bit + 1, MAX_32Bit)
);



$failed = false;
// test valid values
for ($i = 0; $i < count($validGreaterThan); $i +=2) {
   $typeToTestVal = $validGreaterThan[$i];
   $compares = $validGreaterThan[$i + 1];
   foreach($compares as $compareVal) {
      if ($typeToTestVal > $compareVal) {
         // do nothing
      }
      else {
         echo "FAILED: '$typeToTestVal' <= '$compareVal'\n";
         $failed = true;
      }
   }
}
// test for invalid values
for ($i = 0; $i < count($invalidGreaterThan); $i +=2) {
   $typeToTestVal = $invalidGreaterThan[$i];
   $compares = $invalidGreaterThan[$i + 1];
   foreach($compares as $compareVal) {
      if ($typeToTestVal > $compareVal) {
         echo "FAILED: '$typeToTestVal' > '$compareVal'\n";
         $failed = true;
      }
   }
}

if ($failed == false) {
   echo "Test Passed\n";
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (float)) (array_element_initializer (qualified_name (name))))) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float))) (array_element_initializer (unary_op_expression (float)))))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (float)) (array_element_initializer (binary_expression (qualified_name (name)) (integer))))) (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (qualified_name (name)))))))) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (comment)) (else_clause (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name))))))))))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))))))))) (if_statement (binary_expression (variable_name (name)) (qualified_name (name))) (compound_statement (echo_statement (string)))) (text))

=====================================================
Test < operator : different types
=====================================================

<?php
$valid_true = array(1, "1", "true", 1.0, array(1));
$valid_false = array(0, "", 0.0, array(), NULL);

$int1 = 677;
$int2 = -67837;
$valid_int1 = array("678", "678abc", " 678", "678  ", 678.0, 6.789E2, "+678", +678);
$valid_int2 = array("-67836", "-67836abc", " -67836", "-67836  ", -67835.0001, -6.78351E4);
$invalid_int1 = array(676, "676");
$invalid_int2 = array(-67837, "-67837");

$float1 = 57385.45835;
$float2 = -67345.76567;
$valid_float1 = array("57385.45836",  "57385.45836aaa", "  57385.45836", 5.738545836e4);
$valid_float2 = array("-67345.76566", "-67345.76566aaa", "  -67345.76566", -6.734576566E4);
$invalid_float1 = array(57385.45835, 5.738545835e4);
$invalid_float2 = array(-67345.76567, -6.734576567E4);


$toCompare = array(
  false, $valid_true, $valid_false,
  $int1, $valid_int1, $invalid_int1,
  $int2, $valid_int2, $invalid_int2,
  $float1, $valid_float1, $invalid_float1,
  $float2, $valid_float2, $invalid_float2
);

$failed = false;
for ($i = 0; $i < count($toCompare); $i +=3) {
   $typeToTest = $toCompare[$i];
   $valid_compares = $toCompare[$i + 1];
   $invalid_compares = $toCompare[$i + 2];

   foreach($valid_compares as $compareVal) {
      if ($typeToTest < $compareVal) {
         // do nothing
      }
      else {
         echo "FAILED: '$typeToTest' >= '$compareVal'\n";
         $failed = true;
      }
   }

   foreach($invalid_compares as $compareVal) {
      if ($typeToTest < $compareVal) {
         echo "FAILED: '$typeToTest' < '$compareVal'\n";
         $failed = true;
      }
   }

}
if ($failed == false) {
   echo "Test Passed\n";
}
?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (array_creation_expression (array_element_initializer (integer))))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (array_creation_expression)) (array_element_initializer (qualified_name (name)))))) (expression_statement (assignment_expression (variable_name (name)) (integer))) (expression_statement (assignment_expression (variable_name (name)) (unary_op_expression (integer)))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (float)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float))) (array_element_initializer (unary_op_expression (float)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (string))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (string))))) (expression_statement (assignment_expression (variable_name (name)) (float))) (expression_statement (assignment_expression (variable_name (name)) (unary_op_expression (float)))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (float)) (array_element_initializer (float))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (unary_op_expression (float))) (array_element_initializer (unary_op_expression (float)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name))) (array_element_initializer (variable_name (name)))))) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (comment)) (else_clause (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))))))))) (if_statement (binary_expression (variable_name (name)) (qualified_name (name))) (compound_statement (echo_statement (string)))) (text))

=====================================================
Test < operator : max int 32bit range
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$validLessThan = array (
2147483646, array(MAX_32Bit, "2147483647", "2147483647.001", 2.147483647e9, 2147483647.9),
MIN_32Bit, array(MIN_32Bit + 1, "-2147483647", "-2147483646.001", -2.1474836461e9, -2147483646.9),
);

$invalidLessThan = array (
MAX_32Bit, array("2147483646", 2.1474836460001e9, MAX_32Bit - 1),
MIN_32Bit, array(MIN_32Bit - 1, "-2147483649", -2.1474836480001e9)
);

$failed = false;
// test for equality
for ($i = 0; $i < count($validLessThan); $i +=2) {
   $typeToTestVal = $validLessThan[$i];
   $compares = $validLessThan[$i + 1];
   foreach($compares as $compareVal) {
      if ($typeToTestVal < $compareVal) {
         // do nothing
      }
      else {
         echo "FAILED: '$typeToTestVal' >= '$compareVal'\n";
         $failed = true;
      }
   }
}
// test for invalid values
for ($i = 0; $i < count($invalidLessThan); $i +=2) {
   $typeToTestVal = $invalidLessThan[$i];
   $compares = $invalidLessThan[$i + 1];
   foreach($compares as $compareVal) {
      if ($typeToTestVal < $compareVal) {
         echo "FAILED: '$typeToTestVal' < '$compareVal'\n";
         $failed = true;
      }
   }
}

if ($failed == false) {
   echo "Test Passed\n";
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (float)))) (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float))) (array_element_initializer (unary_op_expression (float)))))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (binary_expression (qualified_name (name)) (integer))))) (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float)))))))) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (comment)) (else_clause (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name))))))))))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))))))))) (if_statement (binary_expression (variable_name (name)) (qualified_name (name))) (compound_statement (echo_statement (string)))) (text))

=====================================================
Test < operator : max int 64bit range
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$validLessThan = array (
2147483646, array(MAX_32Bit, "2147483647", "2147483647.001", 2.147483647e9, 2147483647.9),
MIN_32Bit, array(MIN_32Bit + 1, "-2147483647", "-2147483646.001", -2.1474836461e9, -2147483646.9),
);

$invalidLessThan = array (
MAX_32Bit, array("2147483646", 2.1474836460001e9, MAX_32Bit - 1),
MIN_32Bit, array(MIN_32Bit - 1, "-2147483649", -2.1474836480001e9)
);

$failed = false;
// test for equality
for ($i = 0; $i < count($validLessThan); $i +=2) {
   $typeToTestVal = $validLessThan[$i];
   $compares = $validLessThan[$i + 1];
   foreach($compares as $compareVal) {
      if ($typeToTestVal < $compareVal) {
         // do nothing
      }
      else {
         echo "FAILED: '$typeToTestVal' >= '$compareVal'\n";
         $failed = true;
      }
   }
}
// test for invalid values
for ($i = 0; $i < count($invalidLessThan); $i +=2) {
   $typeToTestVal = $invalidLessThan[$i];
   $compares = $invalidLessThan[$i + 1];
   foreach($compares as $compareVal) {
      if ($typeToTestVal < $compareVal) {
         echo "FAILED: '$typeToTestVal' < '$compareVal'\n";
         $failed = true;
      }
   }
}

if ($failed == false) {
   echo "Test Passed\n";
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (float)))) (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float))) (array_element_initializer (unary_op_expression (float)))))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (string)) (array_element_initializer (float)) (array_element_initializer (binary_expression (qualified_name (name)) (integer))))) (array_element_initializer (qualified_name (name))) (array_element_initializer (array_creation_expression (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (string)) (array_element_initializer (unary_op_expression (float)))))))) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (comment)) (else_clause (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name))))))))))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (augmented_assignment_expression (variable_name (name)) (integer)) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (subscript_expression (variable_name (name)) (binary_expression (variable_name (name)) (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))))))))) (if_statement (binary_expression (variable_name (name)) (qualified_name (name))) (compound_statement (echo_statement (string)))) (text))

=====================================================
Operators on overlaoded property reference
=====================================================

<?php
class C {
	function __construct() { $this->bar = str_repeat("1", 2); }
	function &__get($x) { return $this->bar; }
	function __set($x, $v) { $this->bar = $v; }
}
$x = new C;
var_dump(++$x->foo);
$x = new C;
var_dump($x->foo++);
$x = new C;
var_dump($x->foo += 2);
?>

---

(program (class_declaration (name) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (function_call_expression (qualified_name (name)) (arguments (string) (integer)))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name)))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name)))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (update_expression (member_access_expression (variable_name (name)) (name)))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (update_expression (member_access_expression (variable_name (name)) (name)))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (augmented_assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))))))
=====================================================
Test N-- operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);


foreach ($longVals as $longVal) {
   echo "--- testing: $longVal ---\n";
   $longVal--;
   var_dump($longVal);
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (update_expression (variable_name (name)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))) (text))

=====================================================
Test N-- operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);


foreach ($strVals as $strVal) {
   echo "--- testing: '$strVal' ---\n";
   $strVal--;
   var_dump($strVal);
}

?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (update_expression (variable_name (name)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))) (text))

=====================================================
Test N++ operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);


foreach ($longVals as $longVal) {
   echo "--- testing: $longVal ---\n";
   $longVal++;
   var_dump($longVal);
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (update_expression (variable_name (name)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))) (text))

=====================================================
Test N++ operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);


foreach ($strVals as $strVal) {
   echo "--- testing: '$strVal' ---\n";
   $strVal++;
   var_dump($strVal);
}

?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (update_expression (variable_name (name)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))) (text))

=====================================================
Test --N operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);


foreach ($longVals as $longVal) {
   echo "--- testing: $longVal ---\n";
   var_dump(--$longVal);
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (update_expression (variable_name (name)))))))) (text))

=====================================================
Test --N operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);


foreach ($strVals as $strVal) {
   echo "--- testing: '$strVal' ---\n";
   var_dump(--$strVal);
}

?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (update_expression (variable_name (name)))))))) (text))

=====================================================
Test ++N operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);


foreach ($longVals as $longVal) {
   echo "--- testing: $longVal ---\n";
   var_dump(++$longVal);
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (update_expression (variable_name (name)))))))) (text))

=====================================================
Test ++N operator : various numbers as strings
=====================================================

<?php

$strVals = array(
    "0","65","-44", "1.2", "-7.7",
    "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a", "a5.9",
    "z", "az", "zz", "Z", "AZ", "ZZ", "9z", "19z", "99z",
);


foreach ($strVals as $strVal) {
    echo "--- testing: '$strVal' ---\n";
    var_dump(++$strVal);
}

?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (update_expression (variable_name (name)))))))) (text))

=====================================================
Test - operator : 64bit long tests
=====================================================

<?php

define("MAX_64Bit", 9223372036854775807);
define("MAX_32Bit", 2147483647);
define("MIN_64Bit", -9223372036854775807 - 1);
define("MIN_32Bit", -2147483647 - 1);

$longVals = array(
    MAX_64Bit, MIN_64Bit, MAX_32Bit, MIN_32Bit, MAX_64Bit - MAX_32Bit, MIN_64Bit - MIN_32Bit,
    MAX_32Bit + 1, MIN_32Bit - 1, MAX_32Bit * 2, (MAX_32Bit * 2) + 1, (MAX_32Bit * 2) - 1,
    MAX_64Bit -1, MAX_64Bit + 1, MIN_64Bit + 1, MIN_64Bit - 1
);

$otherVals = array(0, 1, -1, 7, 9, 65, -44, MAX_32Bit, MAX_64Bit);

error_reporting(E_ERROR);

foreach ($longVals as $longVal) {
   foreach($otherVals as $otherVal) {
	   echo "--- testing: $longVal - $otherVal ---\n";
      var_dump($longVal-$otherVal);
   }
}

foreach ($otherVals as $otherVal) {
   foreach($longVals as $longVal) {
	   echo "--- testing: $otherVal - $longVal ---\n";
      var_dump($otherVal-$longVal);
   }
}

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (binary_expression (unary_op_expression (integer)) (integer))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (qualified_name (name)))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression  (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (parenthesized_expression (binary_expression (qualified_name (name)) (integer))) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer))) (array_element_initializer (binary_expression (qualified_name (name)) (integer)))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (unary_op_expression (integer))) (array_element_initializer (qualified_name (name))) (array_element_initializer (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))

=====================================================
Test - operator : various numbers as strings
=====================================================

<?php

$strVals = array(
   "0","65","-44", "1.2", "-7.7", "abc", "123abc", "123e5", "123e5xyz", " 123abc", "123 abc", "123abc ", "3.4a",
   "a5.9"
);

error_reporting(E_ERROR);

foreach ($strVals as $strVal) {
   foreach($strVals as $otherVal) {
	   echo "--- testing: '$strVal' - '$otherVal' ---\n";
      var_dump($strVal-$otherVal);
   }
}


?>
===DONE===

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (binary_expression (variable_name (name)) (variable_name (name)))))))))) (text))
