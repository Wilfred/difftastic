# Copyright 2022 Leorize <leorize+oss@disroot.org>
#
# SPDX-License-Identifier: MPL-2.0
# This Source Code Form is subject to the terms of the Mozilla Public License,
# v. 2.0. If a copy of the MPL was not distributed with this file, You can
# obtain one at https://mozilla.org/MPL/2.0/.

=====================
Constant declarations
=====================

const Foo = 0
coNs_T Bar: int = 10

const
  A = 10
  B: uint32 = 42

const (X, Y) = (1, 2)

const
  Z = 10
  (D, E, F) = (3, 4, 5)

---

(source_file
  (const_section
    (variable_declaration
      name: (identifier)
      value: (expression
        (integer_literal))))
  (const_section
    (variable_declaration
      name: (identifier)
      type: (type_identifier)
      value: (expression
        (integer_literal))))
  (const_section
    (variable_declaration
      name: (identifier)
      value: (expression
        (integer_literal)))
    (variable_declaration
      name: (identifier)
      type: (type_identifier)
      value: (expression
        (integer_literal))))
  (const_section
    (variable_declaration
      (tuple_deconstruct_declaration
        name: (identifier)
        name: (identifier))
      value: (expression
        (tuple
          (expression
            (integer_literal))
          (expression
            (integer_literal))))))
  (const_section
    (variable_declaration
      name: (identifier)
      value: (expression
        (integer_literal)))
    (variable_declaration
      (tuple_deconstruct_declaration
        name: (identifier)
        name: (identifier)
        name: (identifier))
      value: (expression
        (tuple
          (expression
            (integer_literal))
          (expression
            (integer_literal))
          (expression
            (integer_literal)))))))

================
Let declarations
================

let foo, dar = 0d
lET bar: float = 10f32

l_e_t
  a, c, d = 10
  b: uint32 = 42
  (e, f) = (1, 2)

---

(source_file
  (let_section
    (variable_declaration
      name: (identifier)
      name: (identifier)
      value: (expression
        (float_literal))))
  (let_section
    (variable_declaration
      name: (identifier)
      type: (type_identifier)
      value: (expression
        (float_literal))))
  (let_section
    (variable_declaration
      name: (identifier)
      name: (identifier)
      name: (identifier)
      value: (expression
        (integer_literal)))
    (variable_declaration
      name: (identifier)
      type: (type_identifier)
      value: (expression
        (integer_literal)))
    (variable_declaration
      (tuple_deconstruct_declaration
        name: (identifier)
        name: (identifier))
      value: (expression
        (tuple
          (expression
            (integer_literal))
          (expression
            (integer_literal)))))))

================
Var declarations
================

var foo = 0d
vaR bar: float = 10f32

v_a_r
  a = 10
  b: uint32 = 42

var x, y: int
var z, w: float

var (c, d) = (2, 3)

---

(source_file
  (var_section
    (variable_declaration
      name: (identifier)
      value: (expression
        (float_literal))))
  (var_section
    (variable_declaration
      name: (identifier)
      type: (type_identifier)
      value: (expression
        (float_literal))))
  (var_section
    (variable_declaration
      name: (identifier)
      value: (expression
        (integer_literal)))
    (variable_declaration
      name: (identifier)
      type: (type_identifier)
      value: (expression
        (integer_literal))))
  (var_section
    (variable_declaration
      name: (identifier)
      name: (identifier)
      type: (type_identifier)))
  (var_section
    (variable_declaration
      name: (identifier)
      name: (identifier)
      type: (type_identifier)))
  (var_section
    (variable_declaration
      (tuple_deconstruct_declaration
        name: (identifier)
        name: (identifier))
      value: (expression
        (tuple
          (expression
            (integer_literal))
          (expression
            (integer_literal)))))))

=================
Type declarations
=================

type X = int
type
  Y = distinct int
  Z = tuple[x, y: int]
  W = tuple
    x: int
    y: int

type A = ref object

type B = ref object
  a*, c*, d: string
  b: string

---

(source_file
  (type_section
    (type_declaration
      name: (identifier)
      type: (type_identifier)))
  (type_section
    (type_declaration
      name: (identifier)
      type: (distinct_type
        (type_identifier)))
    (type_declaration
      name: (identifier)
      type: (tuple_type
        (field_declaration_list
          (field_declaration
            name: (identifier)
            name: (identifier)
            type: (type_identifier)))))
    (type_declaration
      name: (identifier)
      type: (tuple_type
        (field_declaration_list
          (field_declaration
            name: (identifier)
            type: (type_identifier))
          (field_declaration
            name: (identifier)
            type: (type_identifier))))))
  (type_section
    (type_declaration
      name: (identifier)
      type: (ref_type
        (object_type))))
  (type_section
    (type_declaration
      name: (identifier)
      type: (ref_type
        (object_type
          (field_declaration_list
            (field_declaration
              (exported_symbol
                name: (identifier))
              (exported_symbol
                name: (identifier))
              name: (identifier)
              type: (type_identifier))
            (field_declaration
              name: (identifier)
              type: (type_identifier))))))))
