=========================================
Type Synonym Declarations
=========================================

type Foo = Bar
type List = []
type Foo a = Bar a
type Rec a = [Circ a]
type V = ()
type X = (,)
type Y = (,,)
type Z = (->)
type Nat = Zero ': Succ Zero ': Succ (Succ Zero) ': '[]

---

(module
  (type_synonym_declaration
    (type_constructor_identifier)
    (type (type_constructor_identifier)))
  (type_synonym_declaration
    (type_constructor_identifier)
    (type (list_constructor)))
  (type_synonym_declaration
    (type_constructor_identifier) (type_variable_identifier)
    (type (type_constructor_identifier) (type_variable_identifier)))
  (type_synonym_declaration
    (type_constructor_identifier) (type_variable_identifier)
    (type (list_type (type_constructor_identifier) (type_variable_identifier))))
  (type_synonym_declaration
    (type_constructor_identifier)
    (type (unit_constructor)))
  (type_synonym_declaration
    (type_constructor_identifier)
    (type (tupling_constructor)))
  (type_synonym_declaration
    (type_constructor_identifier)
    (type (tupling_constructor)))
  (type_synonym_declaration
    (type_constructor_identifier)
    (type (function_constructor)))
  (type_synonym_declaration
    (type_constructor_identifier)
      (type
        (infix_type_operator_application
          (type (type_constructor_identifier))
          (type_operator)
          (infix_type_operator_application
            (type (type_constructor_identifier) (type_constructor_identifier))
            (type_operator)
            (infix_type_operator_application
              (type (type_constructor_identifier) (parenthesized_constructor (type_constructor_identifier) (type_constructor_identifier)))
              (type_operator)
              (promoted (list_constructor))))))))

=========================================
New Type Declarations
=========================================

newtype N = N Int
newtype Show a => N = N a
newtype Age = Age { unAge :: Maybe Int }

---

(module
  (newtype_declaration
    (type_constructor_identifier)
    (new_constructor
      (constructor_identifier)
      (type_constructor_identifier)))
  (newtype_declaration
    (context
      (class (constructor_identifier) (type_variable_identifier)))
    (type_constructor_identifier)
    (new_constructor
      (constructor_identifier)
      (type_variable_identifier)))
  (newtype_declaration
    (type_constructor_identifier)
    (new_constructor
      (constructor_identifier)
      (fields
        (field
          (variable_identifier)
          (annotation)
          (type_constructor_identifier)
          (type_constructor_identifier))))))

=========================================
New Type Declarations With Deriving
=========================================

newtype N = N Int deriving Show
newtype N = N a deriving (Eq, Ord, Enum, Bounded, Show, Read)

---

(module
  (newtype_declaration
    (type_constructor_identifier)
    (new_constructor
      (constructor_identifier)
      (type_constructor_identifier))
    (deriving (type_class_identifier)))
  (newtype_declaration
    (type_constructor_identifier)
    (new_constructor
      (constructor_identifier)
      (type_variable_identifier))
    (deriving
      (type_class_identifier)
      (type_class_identifier)
      (type_class_identifier)
      (type_class_identifier)
      (type_class_identifier)
      (type_class_identifier))))

=========================================
Algebraic Datatype Declarations With Variables
=========================================

data N
data N a = N a
data N a = N !a
data N a b = N !a b

---

(module
  (algebraic_datatype_declaration
    (type_constructor_identifier))
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (type_variable_identifier)
    (constructors
      (data_constructor (constructor_identifier) (type_variable_identifier))))
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (type_variable_identifier)
    (constructors
      (data_constructor (constructor_identifier) (strict_type (type_variable_identifier)))))
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (type_variable_identifier)
    (type_variable_identifier)
    (constructors
      (data_constructor (constructor_identifier) (strict_type (type_variable_identifier)) (type_variable_identifier)))))

=========================================
Algebraic Datatype Declarations With Fields
=========================================

data N = N { a :: Int }
data N = N { a, b :: Int }
data N = N { a :: !Int, b :: Int }
data N = N { a, b :: !Int, c :: String }

---

(module
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (constructors
      (record_data_constructor
        (constructor_identifier)
        (fields (field (variable_identifier) (annotation) (type_constructor_identifier))))))
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (constructors
      (record_data_constructor
        (constructor_identifier)
        (fields (field (variable_identifier) (variable_identifier) (annotation) (type_constructor_identifier))))))
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (constructors
      (record_data_constructor
        (constructor_identifier)
        (fields
          (field (variable_identifier) (annotation) (strict_type (type_constructor_identifier)))
          (field (variable_identifier) (annotation) (type_constructor_identifier))))))
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (constructors
      (record_data_constructor
        (constructor_identifier)
        (fields
          (field (variable_identifier) (variable_identifier) (annotation) (strict_type (type_constructor_identifier)))
          (field (variable_identifier) (annotation) (type_constructor_identifier)))))))

=========================================
Algebraic Datatype Declarations With Multiple Constructors
=========================================

data N = N | O
data N = N { a :: Int } | O { b :: String }

---

(module
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (constructors
      (data_constructor
        (constructor_identifier))
      (data_constructor
        (constructor_identifier))))
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (constructors
      (record_data_constructor
        (constructor_identifier)
        (fields
          (field (variable_identifier) (annotation) (type_constructor_identifier))))
      (record_data_constructor
        (constructor_identifier)
        (fields
          (field (variable_identifier) (annotation) (type_constructor_identifier)))))))

=========================================
Algebraic Datatype Declarations With Deriving
=========================================

data N = N deriving Show
data N = N deriving (Eq, Ord, Enum, Bounded, Show, Read)

---

(module
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (constructors (data_constructor (constructor_identifier)))
    (deriving (type_class_identifier)))
  (algebraic_datatype_declaration
    (type_constructor_identifier)
    (constructors (data_constructor (constructor_identifier)))
    (deriving (type_class_identifier) (type_class_identifier) (type_class_identifier) (type_class_identifier) (type_class_identifier) (type_class_identifier))))

=========================================
Algebraic Datatype Declarations With Context
=========================================

data Show a => N a = N a
data (Eq a, Show a, Eq b) => N a b = N a b
data (Eq (f a), Functor f) => N f a = N f a

---

(module
  (algebraic_datatype_declaration
    (context
      (class (constructor_identifier) (type_variable_identifier)))
    (type_constructor_identifier) (type_variable_identifier)
    (constructors
      (data_constructor (constructor_identifier) (type_variable_identifier))))
  (algebraic_datatype_declaration
    (context
      (class (constructor_identifier) (type_variable_identifier))
      (class (constructor_identifier) (type_variable_identifier))
      (class (constructor_identifier) (type_variable_identifier)))
    (type_constructor_identifier)
    (type_variable_identifier)
    (type_variable_identifier)
    (constructors
      (data_constructor
        (constructor_identifier) (type_variable_identifier) (type_variable_identifier))))
  (algebraic_datatype_declaration
    (context
      (class (constructor_identifier) (type_variable_identifier) (type_variable_identifier))
      (class (constructor_identifier) (type_variable_identifier)))
    (type_constructor_identifier)
    (type_variable_identifier)
    (type_variable_identifier)
    (constructors
      (data_constructor
        (constructor_identifier) (type_variable_identifier) (type_variable_identifier)))))

=========================================
Default declarations
=========================================

default ()
default (Integer, Double)

---

(module
  (default_declaration)
  (default_declaration (type_constructor_identifier) (type_constructor_identifier)))


=========================================
Type Signatures With Variables
=========================================

f :: a -> a -> a

---

(module
  (type_signature
    (variable_identifier)
    (annotation)
    (function_type
      (type (type_variable_identifier))
      (function_type
        (type (type_variable_identifier))
        (type (type_variable_identifier))))))


=========================================
Type Signatures With Constructors
=========================================

f :: Ex -> Ex
f :: [Int] -> Int
f :: (Int, Int) -> Maybe Int

---

(module
  (type_signature
    (variable_identifier)
    (annotation)
    (function_type
      (type (type_constructor_identifier))
      (type (type_constructor_identifier))))
  (type_signature
    (variable_identifier)
    (annotation)
    (function_type
      (type (list_type (type_constructor_identifier)))
      (type (type_constructor_identifier))))
  (type_signature
    (variable_identifier)
    (annotation)
    (function_type
      (type (tuple_type (type_constructor_identifier) (type_constructor_identifier)))
      (type (type_constructor_identifier) (type_constructor_identifier)))))

=========================================
Type Signatures With Scoped Type Variables
=========================================

f :: forall a. [a] -> [a]
f :: forall a b. (a, b) -> [a]

---

(module
  (type_signature
    (variable_identifier)
    (annotation)
    (scoped_type_variables (variable_identifier))
    (function_type
      (type (list_type (type_variable_identifier)))
      (type (list_type (type_variable_identifier)))))
  (type_signature
    (variable_identifier)
    (annotation)
    (scoped_type_variables (variable_identifier) (variable_identifier))
    (function_type
      (type
        (tuple_type (type_variable_identifier) (type_variable_identifier)))
      (type
        (list_type (type_variable_identifier))))))

=========================================
Standalone Deriving
=========================================

deriving instance Eq a => Eq (Foo a)
deriving instance Baz a (m a b c) => Baz a (Bar m a b c)

---

(module
  (standalone_deriving_declaration
    (scontext
      (simple_class
        (type_class_identifier)
        (type_variable_identifier)))
    (type_class_identifier)
    (instance
      (parenthesized_instance
        (type_constructor_identifier)
        (type_variable_identifier))))

  (standalone_deriving_declaration
    (scontext
      (simple_class
        (type_class_identifier)
        (type_variable_identifier)
        (parenthesized_type_variables
          (type_variable_identifier)
          (type_variable_identifier)
          (type_variable_identifier)
          (type_variable_identifier))))
      (type_class_identifier)
      (instance
        (type_variable_identifier)
        (parenthesized_instance
          (type_constructor_identifier)
          (type_variable_identifier)
          (type_variable_identifier)
          (type_variable_identifier)
          (type_variable_identifier)))))
