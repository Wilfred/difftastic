=======================================
integer literals
=======================================

const int dec = 1;
const long hex = 0xf1l;
const UInt64 dec = 1uL;

---

(compilation_unit
  (field_declaration
    (modifier)
    (variable_declaration
      (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (integer_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
      (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (integer_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
      (identifier_name)
      (variable_declarator (identifier_name) (equals_value_clause (integer_literal))))))

=======================================
boolean literals
=======================================

const bool t = true, u = false;

---

(compilation_unit
  (field_declaration
    (modifier)
    (variable_declaration
      (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (boolean_literal)))
      (variable_declarator (identifier_name) (equals_value_clause (boolean_literal))))))

=======================================
char literals
=======================================

const char c = 'a';
const char esc = '\n';
const char hex = '\xf09a';
const char uni16 = '\ua0bf';
const char uni32 = '\UA0BFf9ca';

---

(compilation_unit
  (field_declaration
    (modifier)
    (variable_declaration
      (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (character_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
    (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (character_literal (escape_sequence))))))
  (field_declaration
    (modifier)
    (variable_declaration
    (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (character_literal (escape_sequence))))))
  (field_declaration
    (modifier)
    (variable_declaration
    (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (character_literal (escape_sequence))))))
  (field_declaration
    (modifier)
    (variable_declaration
    (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (character_literal (escape_sequence)))))))

=======================================
real literals
=======================================

const float s = 012.23F;
const float e = 1e6f;
const Single en = 0e-1f;
const Single ep = 1e+12f;
const double d = 0.9d;
const decimal m = 0.9m;
const Decimal m2 = 102.349M;

---

(compilation_unit
  (field_declaration
    (modifier)
    (variable_declaration
    (predefined_type)
    (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
    (predefined_type)
    (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
    (identifier_name)
    (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
    (identifier_name)
    (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
    (predefined_type)
    (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
    (predefined_type)
    (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
  (field_declaration
    (modifier)
    (variable_declaration
    (identifier_name)
    (variable_declarator (identifier_name) (equals_value_clause (real_literal))))))

=======================================
null literals
=======================================

const string x = null;

---

(compilation_unit
  (field_declaration
    (modifier)
    (variable_declaration
      (predefined_type)
      (variable_declarator (identifier_name) (equals_value_clause (null_literal))))))

=======================================
string literals
=======================================

class A {
  String e = "";
  string s = "a";
  string m = "abc";
  string esc = "ab\"\t";
  string hex = "ab\x22r";
  string hex2 = "\x22r\x00";
  string u16 = "\ub0d0ok";
  string u32 = "\uF1D20ff0test";
  string ve = @"";
  string v = @"abcde\ef";
  string quotes = @"<TestClass xmlns=""http://example.com/omg"" xmlns:i=""http://www.w3.org/2001/XMLSchema-instance""></TestClass>";
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (field_declaration
        (variable_declaration
          (identifier_name)
          (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (string_literal (escape_sequence) (escape_sequence))))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (string_literal (escape_sequence))))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (string_literal (escape_sequence) (escape_sequence))))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (string_literal (escape_sequence))))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (string_literal (escape_sequence))))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (verbatim_string_literal)))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (verbatim_string_literal)))))
      (field_declaration
        (variable_declaration
          (predefined_type)
          (variable_declarator (identifier_name) (equals_value_clause (verbatim_string_literal))))))))
