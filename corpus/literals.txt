============================================
Int literals
============================================

package main

const (
  i1 = 42
  i2 = 0600
  i3 = 0xBadFace
  i4 = 170141183460469231731687303715884105727
)

---

(source_file
  (package_clause (package_identifier))
  (const_declaration
    (const_spec (identifier) (expression_list (int_literal)))
    (const_spec (identifier) (expression_list (int_literal)))
    (const_spec (identifier) (expression_list (int_literal)))
    (const_spec (identifier) (expression_list (int_literal)))))

============================================
Float literals
============================================

package main

const (
  f1 = 1.5
  f2 = 1.5e100
  f3 = 1.5e+50
  f4 = 1.5e-5
  f5 = .5e-50
)

---

(source_file
  (package_clause (package_identifier))
  (const_declaration
    (const_spec (identifier) (expression_list (float_literal)))
    (const_spec (identifier) (expression_list (float_literal)))
    (const_spec (identifier) (expression_list (float_literal)))
    (const_spec (identifier) (expression_list (float_literal)))
    (const_spec (identifier) (expression_list (float_literal)))))

============================================
Rune literals
============================================

package main

const (
  a = '0'
  b = '\''
  c = '\\'
  c = '\n'
  c = '\u0000'
  c = '\U01234567'
)

---

(source_file
  (package_clause (package_identifier))
  (const_declaration
    (const_spec (identifier) (expression_list (rune_literal)))
    (const_spec (identifier) (expression_list (rune_literal)))
    (const_spec (identifier) (expression_list (rune_literal)))
    (const_spec (identifier) (expression_list (rune_literal)))
    (const_spec (identifier) (expression_list (rune_literal)))
    (const_spec (identifier) (expression_list (rune_literal)))))

============================================
Imaginary literals
============================================

package main

const (
  a = 01i
  b = 1.e+100i
)

---

(source_file
  (package_clause (package_identifier))
  (const_declaration
    (const_spec (identifier) (expression_list (imaginary_literal)))
    (const_spec (identifier) (expression_list (imaginary_literal)))))

============================================
String literals
============================================

package main

const (
  a = "0"
  b = "`\"`"
  c = "\x0c"
)

---

(source_file
  (package_clause (package_identifier))
  (const_declaration
    (const_spec (identifier) (expression_list (interpreted_string_literal)))
    (const_spec (identifier) (expression_list (interpreted_string_literal (escape_sequence))))
    (const_spec (identifier) (expression_list (interpreted_string_literal (escape_sequence))))))

============================================
Slice literals
============================================

package main

const s1 = []string{}

const s2 = []string{"hi"}

const s3 = []string{
  "hi",
  "hello",
}

---

(source_file
  (package_clause (package_identifier))
  (const_declaration (const_spec
    (identifier)
    (expression_list (composite_literal
      (slice_type (type_identifier))
      (literal_value)))))
  (const_declaration (const_spec
    (identifier)
    (expression_list (composite_literal
      (slice_type (type_identifier))
      (literal_value
        (element (interpreted_string_literal)))))))
  (const_declaration (const_spec
    (identifier)
    (expression_list (composite_literal
      (slice_type (type_identifier))
      (literal_value
        (element (interpreted_string_literal))
        (element (interpreted_string_literal))))))))

============================================
Array literals with implicit length
============================================

package main

const a1 = [...]int{1, 2, 3}

---

(source_file
  (package_clause (package_identifier))
  (const_declaration (const_spec
    (identifier)
    (expression_list (composite_literal
      (implicit_length_array_type (type_identifier))
      (literal_value
        (element (int_literal))
        (element (int_literal))
        (element (int_literal))))))))

============================================
Map literals
============================================

package main

const s = map[string]string{
  "hi": "hello",
  "bye": "goodbye",
}

---

(source_file
  (package_clause (package_identifier))
  (const_declaration (const_spec
    (identifier)
    (expression_list (composite_literal
      (map_type (type_identifier) (type_identifier))
      (literal_value
        (keyed_element (interpreted_string_literal) (interpreted_string_literal))
        (keyed_element (interpreted_string_literal) (interpreted_string_literal))))))))

============================================
Struct literals
============================================

package main

const s1 = Person{
  name: "Frank",
  Age: "5 months",
}

const s2 = struct{i int;}{i: 5}

const s3 = time.Time{}

---

(source_file
  (package_clause (package_identifier))
  (const_declaration (const_spec
    (identifier)
    (expression_list (composite_literal
      (type_identifier)
      (literal_value
        (keyed_element (field_identifier) (interpreted_string_literal))
        (keyed_element (field_identifier) (interpreted_string_literal)))))))
  (const_declaration (const_spec
    (identifier)
    (expression_list (composite_literal
      (struct_type (field_declaration_list
        (field_declaration (field_identifier) (type_identifier))))
      (literal_value
        (keyed_element (field_identifier) (int_literal)))))))
  (const_declaration (const_spec
    (identifier)
    (expression_list (composite_literal
      (qualified_type (package_identifier) (type_identifier))
      (literal_value))))))

============================================
Function literals
============================================

package main

const s1 = func(s string) (int, int) {
  return 1, 2
}

---

(source_file
  (package_clause (package_identifier))
  (const_declaration (const_spec
    (identifier)
    (expression_list
      (func_literal
        (parameter_list
          (parameter_declaration (identifier) (type_identifier)))
        (parameter_list
          (parameter_declaration (type_identifier))
          (parameter_declaration (type_identifier)))
        (block
          (return_statement (expression_list (int_literal) (int_literal)))))))))
