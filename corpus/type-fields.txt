=======================================
Class field declarations
=======================================

class A {
  public readonly int _B;
  Int64 D_e_f, g;
  Tuple<char, Nullable<int>> z;
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (field_declaration
      (modifiers)
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name))))
    (field_declaration
      (variable_declaration
        (identifier_name)
        (variable_declarator (identifier_name))
        (variable_declarator (identifier_name))))
    (field_declaration
      (variable_declaration
        (generic_name (identifier_name) (type_parameter_list
          (type_parameter (predefined_type))
          (type_parameter (generic_name (identifier_name) (type_parameter_list (type_parameter (predefined_type)))))))
          (variable_declarator (identifier_name))))))


=======================================
Struct field declarations
=======================================

struct A {
  private readonly int c_;
}

---

(compilation_unit
  (struct_declaration
    (identifier_name)
    (field_declaration
      (modifiers)
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name))))))


=======================================
Field declaration integer literal assignment
=======================================

class A {
  int dec = 1;
  long hex = 0xf1l;
  UInt64 dec = 1uL;
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (integer_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (integer_literal)))))
    (field_declaration
      (variable_declaration
        (identifier_name)
        (variable_declarator (identifier_name) (equals_value_clause (integer_literal)))))))


=======================================
Field declaration boolean literal assignment
=======================================

class A {
  bool t = true;
  bool f = false;
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (boolean_literal)))))
        (field_declaration
          (variable_declaration
            (predefined_type)
            (variable_declarator (identifier_name) (equals_value_clause (boolean_literal)))))))


=======================================
Field declaration char literal assignment
=======================================

class A {
  char c = 'a';
  char esc = '\n';
  char hex = '\xf09a';
  char uni16 = '\ua0bf';
  char uni32 = '\UA0BFf9ca';
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (character_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (character_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (character_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (character_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (character_literal)))))))


=======================================
Field declaration real literal assignment
=======================================

class A {
  float s = 012.23F;
  float e = 1e6f;
  Single en = 0e-1f;
  Single ep = 1e+12f;
  double d = 0.9d;
  decimal m = 0.9m;
  Decimal m2 = 102.349m;
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
    (field_declaration
      (variable_declaration
        (identifier_name)
        (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
    (field_declaration
      (variable_declaration
        (identifier_name)
        (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))
    (field_declaration
      (variable_declaration
        (identifier_name)
        (variable_declarator (identifier_name) (equals_value_clause (real_literal)))))))


=======================================
Field declaration null literal assignment
=======================================

class A {
  string x = null;
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (null_literal)))))))


=======================================
Field declaration string literal assignment
=======================================

class A {
  String e = "";
  string s = "a";
  string m = "abc";
  string esc = "ab\"\t";
  string hex = "ab\x22r";
  string hex2 = "\x22r\x00";
  string u16 = "\ub0d0ok";
  string u32 = "\uF1D20ff0test";
  string ve = @"";
  string v = @"abcde\ef";
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (field_declaration
      (variable_declaration
        (identifier_name)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))
    (field_declaration
      (variable_declaration
        (predefined_type)
        (variable_declarator (identifier_name) (equals_value_clause (string_literal)))))))
