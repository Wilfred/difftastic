==========================================================
Bug #60768 Output buffer not discarded
==========================================================

<?php

global $storage;

ob_start(function($buffer) use (&$storage) { $storage .= $buffer; }, 20);

echo str_repeat("0", 20); // fill in the buffer

for($i = 0; $i < 10; $i++) {
    echo str_pad($i, 9, ' ', STR_PAD_LEFT) . "\n"; // full buffer dumped every time
}

ob_end_flush();

printf("Output size: %d, expected %d\n", strlen($storage), 20 + 10 * 10);

?>
DONE

---

(program (global_declaration (variable_name (name))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (anonymous_function_creation_expression (formal_parameters (simple_parameter (variable_name (name)))) (anonymous_function_use_clause (variable_name (name))) (compound_statement (expression_statement (augmented_assignment_expression (variable_name (name)) (variable_name (name)))))) (integer)))) (echo_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (comment) (for_statement (assignment_expression (variable_name (name)) (integer)) (binary_expression (variable_name (name)) (integer)) (update_expression (variable_name (name))) (compound_statement (echo_statement (binary_expression (function_call_expression (qualified_name (name)) (arguments (variable_name (name)) (integer) (string) (qualified_name (name)))) (string))) (comment))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))) (binary_expression (integer) (binary_expression (integer) (integer)))))) (text))

==========================================================
Test basic functionality of flush()
==========================================================

<?php
/*
 * proto void flush(void)
 * Function is implemented in ext/standard/basic_functions.c.
 */

// Verify return type
var_dump(flush());

// Ensure user buffers are not flushed by flush()
ob_start();
echo "Inside a user buffer\n";
flush();
ob_end_clean();

echo "Outside of any user buffers\n";
var_dump(flush());

?>

---

(program (comment) (comment) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))) (comment) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))))

==========================================================
output buffering - nothing
==========================================================

<?php
echo "foo\n";
?>

---

(program (echo_statement (string)))

==========================================================
output buffering - ob_start
==========================================================

<?php
ob_start();
echo "foo\n";
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)))

==========================================================
output buffering - ob_flush
==========================================================

<?php
ob_start();
echo "foo\n";
ob_flush();
echo "bar\n";
ob_flush();
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))))

==========================================================
output buffering - ob_clean
==========================================================

<?php
ob_start();
echo "foo\n";
ob_clean();
echo "bar\n";
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)))

==========================================================
output buffering - ob_end_clean
==========================================================

<?php
ob_start();
echo "foo\n";
ob_start();
echo "bar\n";
ob_end_clean();
echo "baz\n";
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)))

==========================================================
output buffering - ob_end_flush
==========================================================

<?php
ob_start();
echo "foo\n";
ob_end_flush();
var_dump(ob_get_level());
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))))

==========================================================
output buffering - ob_get_clean
==========================================================

<?php
ob_start();
echo "foo\n";
var_dump(ob_get_clean());
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))))
==========================================================
output buffering - ob_get_contents
==========================================================

<?php
ob_start();
echo "foo\n";
echo ob_get_contents();
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (echo_statement (function_call_expression (qualified_name (name)) (arguments))))

==========================================================
output buffering - ob_get_flush
==========================================================

<?php
ob_start();
echo "foo\n";
var_dump(ob_get_flush());
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))))

==========================================================
output buffering - multiple
==========================================================

<?php
echo 0;
	ob_start();
		ob_start();
			ob_start();
				ob_start();
					echo 1;
				ob_end_flush();
				echo 2;
			$ob = ob_get_clean();
		echo 3;
		ob_flush();
		ob_end_clean();
	echo 4;
	ob_end_flush();
echo $ob;
?>

---

(program (echo_statement (integer)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (integer)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (integer)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments)))) (echo_statement (integer)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (integer)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (variable_name (name))))

==========================================================
output buffering - stati
==========================================================

<?php
$stati = array();
function oh($str, $flags) {
	global $stati;
	$stati[] = "$flags: $str";
	return $str;
}
ob_start("oh", 3);
echo "yes";
echo "!\n";
ob_flush();
echo "no";
ob_clean();
echo "yes!\n";
echo "no";
ob_end_clean();
print_r($stati);
?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression))) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (global_declaration (variable_name (name))) (expression_statement (assignment_expression (subscript_expression (variable_name (name))) (string))) (return_statement (variable_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (echo_statement (string)) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

==========================================================
output buffering - ob_list_handlers
==========================================================

<?php
print_r(ob_list_handlers());

ob_start();
print_r(ob_list_handlers());

ob_start();
print_r(ob_list_handlers());

ob_end_flush();
print_r(ob_list_handlers());

ob_end_flush();
print_r(ob_list_handlers());
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))))

==========================================================
Test return type and value, as well as basic behaviour, of ob_get_clean()
==========================================================

<?php
/*
 * proto bool ob_get_clean(void)
 * Function is implemented in main/output.c
*/

var_dump(ob_get_clean());

ob_start();
echo "Hello World";
var_dump(ob_get_clean());
?>

---

(program (comment) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))))

==========================================================
Test basic behaviour of ob_get_clean()
==========================================================

<?php
/*
 * proto bool ob_get_clean(void)
 * Function is implemented in main/output.c
*/

ob_start();

echo "Hello World";

$out = ob_get_clean();
$out = strtolower($out);

var_dump($out);
?>

---

(program (comment) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments)))) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

==========================================================
ob_get_status() function basic test
==========================================================

<?php
ob_start();
$status = ob_get_status(true);
ob_end_clean();
var_dump($status);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

==========================================================
Test return type and value for ob_start()
==========================================================

<?php
/*
 * proto bool ob_start([ string|array user_function [, int chunk_size [, bool erase]]])
 * Function is implemented in main/output.c
*/

var_dump(ob_start());

?>

---

(program (comment) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments))))))

==========================================================
Test ob_start() with callbacks in variables
==========================================================

<?php

// Closure in variable
$a = function ($s) { return strtoupper($s); };
ob_start($a);
echo 'closure in variable', "\n";
ob_end_flush();

// Object (array) in variable
class foo {
	static function out($foo) {
		return strtoupper($foo);
	}
}
$a = array('foo', 'out');
ob_start($a);
echo 'object in variable', "\n";
ob_end_flush();

// Object with static array
ob_start(array('foo', 'out'));
echo 'object via static array', "\n";
ob_end_flush();

function my_strtoupper($foo, $bar) {
	return strtoupper($foo);
}
$a = 'my_strtoupper';
ob_start($a);
echo 'function via variable', "\n";
ob_end_flush();

---

(program (comment) (expression_statement (assignment_expression (variable_name (name)) (anonymous_function_creation_expression (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (return_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (sequence_expression (string) (string))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (comment) (class_declaration (name) (method_declaration (static_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (return_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (sequence_expression (string) (string))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (comment) (expression_statement (function_call_expression (qualified_name (name)) (arguments (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)))))) (echo_statement (sequence_expression (string) (string))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (return_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))) (expression_statement (assignment_expression (variable_name (name)) (string))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (sequence_expression (string) (string))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))))
