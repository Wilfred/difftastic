=========================================
__call()
=========================================

<?php

class Caller {
	public $x = array(1, 2, 3);

	function __call($m, $a) {
		echo "Method $m called:\n";
		var_dump($a);
		return $this->x;
	}
}

$foo = new Caller();
$a = $foo->test(1, '2', 3.4, true);
var_dump($a);

?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (return_statement (member_access_expression (variable_name (name)) (name))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments)))) (expression_statement (assignment_expression (variable_name (name)) (member_call_expression (variable_name (name)) (name) (arguments (integer) (string) (float) (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

=========================================
Data corruption in __set
=========================================

<?php
$f = 'c="foo"';
class foo {
        const foobar=1;
        public $pp = array('t'=>null);

        function bar() {
                echo $this->t ='f';
        }
        function __get($prop)
        {
                return $this->pp[$prop];
        }
        function __set($prop, $val)
        {
                echo "__set";
                $this->pp[$prop] = '';
        }
}
$f = new foo;
$f->bar();
?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (string))) (class_declaration (name) (class_const_declaration (const_element (name) (integer))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (array_creation_expression (array_element_initializer (string) (qualified_name (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string)))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (return_statement (subscript_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (string)) (expression_statement (assignment_expression (subscript_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))) (string))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))))

=========================================
ArrayAccess and [] assignment
=========================================

<?php

class OverloadedArray implements ArrayAccess {
	public $realArray;

	function __construct() {
		$this->realArray = array();
	}

	function offsetExists($index) {
		return array_key_exists($this->realArray, $index);
	}

	function offsetGet($index) {
		return $this->realArray[$index];
	}

	function offsetSet($index, $value) {
		if (is_null($index)) {
			$this->realArray[] = $value;
		} else {
			$this->realArray[$index] = $value;
		}
	}

	function offsetUnset($index) {
		unset($this->realArray[$index]);
	}

	function dump() {
		var_dump($this->realArray);
	}
}

$a = new OverloadedArray;
$a[] = 1;
$a[1] = 2;
$a[2] = 3;
$a[] = 4;
$a->dump();
?>
===DONE===

---

(program (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (array_creation_expression)))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (return_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name)) (variable_name (name)))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (return_statement (subscript_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (if_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))) (compound_statement (expression_statement (assignment_expression (subscript_expression (member_access_expression (variable_name (name)) (name))) (variable_name (name))))) (else_clause (compound_statement (expression_statement (assignment_expression (subscript_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))) (variable_name (name)))))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (unset_statement (subscript_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (subscript_expression (variable_name (name))) (integer))) (expression_statement (assignment_expression (subscript_expression (variable_name (name)) (integer)) (integer))) (expression_statement (assignment_expression (subscript_expression (variable_name (name)) (integer)) (integer))) (expression_statement (assignment_expression (subscript_expression (variable_name (name))) (integer))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (text))

=========================================
ArrayAccess and exceptions
=========================================

<?php

class Test implements ArrayAccess
{
        public function offsetExists($offset)      { throw new Exception(__METHOD__); return false; }
        public function offsetGet($offset)         { throw new Exception(__METHOD__); return $offset; }
        public function offsetSet($offset, $data ) { throw new Exception(__METHOD__); }
        public function offsetUnset($offset)       { throw new Exception(__METHOD__); }
}

$t = new Test;

try
{
	echo isset($t[0]);
}
catch(Exception $e)
{
    echo "Caught in " . $e->getMessage() . "()\n";
}

try
{
	echo $t[0];
}
catch(Exception $e)
{
    echo "Caught in " . $e->getMessage() . "()\n";
}

try
{
	$t[0] = 1;
}
catch(Exception $e)
{
    echo "Caught in " . $e->getMessage() . "()\n";
}

try
{
	unset($t[0]);
}
catch(Exception $e)
{
    echo "Caught in " . $e->getMessage() . "()\n";
}
?>
===DONE===

---

(program (class_declaration (name) (class_interface_clause (qualified_name (name))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name))))) (return_statement (qualified_name (name)))))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name))))) (return_statement (variable_name (name)))))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name)))))))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (try_statement (compound_statement (echo_statement (isset_intrinsic (subscript_expression (variable_name (name)) (integer))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))) (try_statement (compound_statement (echo_statement (subscript_expression (variable_name (name)) (integer)))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))) (try_statement (compound_statement (expression_statement (assignment_expression (subscript_expression (variable_name (name)) (integer)) (integer)))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))) (try_statement (compound_statement (unset_statement (subscript_expression (variable_name (name)) (integer)))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))) (text))

=========================================
Ensure that ArrayObject acts like an array
=========================================

<?php

$a = new ArrayObject;
$a['foo'] = 'bar';
echo reset($a);
echo count($a);
echo current($a);
?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (subscript_expression (variable_name (name)) (string)) (string))) (echo_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

=========================================
assign_op property of overloaded object
=========================================

<?php

class Test {
	private $real_a = 2;

	function __set($property, $value) {
	  if ($property == "a") {
	    $this->real_a = $value;
	  }
	}

	function __get($property) {
	  if ($property == "a") {
	    return $this->real_a;
	  }
	}
}

$obj = new Test;
var_dump($obj->a);
$obj->a += 2;
var_dump($obj->a);
echo "---Done---\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (expression_statement (augmented_assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (echo_statement (string)))

=========================================
Autoload and class_exists
=========================================

<?php

spl_autoload_register(function ($class_name) {
	require_once(dirname(__FILE__) . '/' . $class_name . '.p5c');
	echo 'autoload(' . $class_name . ")\n";
});

var_dump(class_exists('autoload_root'));

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (anonymous_function_creation_expression (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (require_once_expression (parenthesized_expression (binary_expression (binary_expression (binary_expression (function_call_expression (qualified_name (name)) (arguments (qualified_name (name)))) (string)) (variable_name (name))) (string))))) (echo_statement (binary_expression (binary_expression (string) (variable_name (name))) (string)))))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (text))

=========================================
Autoload and get_class_methods
=========================================

<?php

spl_autoload_register(function ($class_name) {
	require_once(dirname(__FILE__) . '/' . $class_name . '.p5c');
	echo 'autoload(' . $class_name . ")\n";
});

var_dump(get_class_methods('autoload_root'));

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (anonymous_function_creation_expression (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (require_once_expression (parenthesized_expression (binary_expression (binary_expression (binary_expression (function_call_expression (qualified_name (name)) (arguments (qualified_name (name)))) (string)) (variable_name (name))) (string))))) (echo_statement (binary_expression (binary_expression (string) (variable_name (name))) (string)))))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (text))

=========================================
Autoload and derived classes
=========================================

<?php

spl_autoload_register(function ($class_name) {
	require_once(dirname(__FILE__) . '/' . $class_name . '.p5c');
	echo 'autoload(' . $class_name . ")\n";
});

var_dump(class_exists('autoload_derived'));

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (anonymous_function_creation_expression (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (require_once_expression (parenthesized_expression (binary_expression (binary_expression (binary_expression (function_call_expression (qualified_name (name)) (arguments (qualified_name (name)))) (string)) (variable_name (name))) (string))))) (echo_statement (binary_expression (binary_expression (string) (variable_name (name))) (string)))))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (text))

=========================================
Autoload and recursion
=========================================

<?php

spl_autoload_register(function ($class_name) {
	var_dump(class_exists($class_name));
	require_once(dirname(__FILE__) . '/' . $class_name . '.p5c');
	echo 'autoload(' . $class_name . ")\n";
});

var_dump(class_exists('autoload_derived'));

?>
===DONE===

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (anonymous_function_creation_expression (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))) (expression_statement (require_once_expression (parenthesized_expression (binary_expression (binary_expression (binary_expression (function_call_expression (qualified_name (name)) (arguments (qualified_name (name)))) (string)) (variable_name (name))) (string))))) (echo_statement (binary_expression (binary_expression (string) (variable_name (name))) (string)))))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (text))

=========================================
Bug #23951 (Defines not working in inherited classes)
=========================================

<?php

define('FOO1', 1);
define('FOO2', 2);

class A {

    public $a_var = array(FOO1=>'foo1_value', FOO2=>'foo2_value');

}

class B extends A {

    public $b_var = 'foo';

}

$a = new A;
$b = new B;

print_r($a);
print_r($b->a_var);
print_r($b->b_var);

?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))) (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (array_creation_expression (array_element_initializer (qualified_name (name)) (string)) (array_element_initializer (qualified_name (name)) (string))))))) (class_declaration (name) (class_base_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))))

=========================================
Bug #24399 (is_subclass_of() crashes when parent class doesn't exist)
=========================================

<?php
class dooh {
    public $blah;
}
$d = new dooh;
var_dump(is_subclass_of($d, 'dooh'));
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (variable_name (name)) (string)))))))

=========================================
Bug #24445 (get_parent_class() returns the current class when passed an object)
=========================================

<?php
class Test { }
var_dump(get_parent_class('Test'));
$t = new Test;
var_dump(get_parent_class($t));
?>

---

(program (class_declaration (name)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))))

=========================================
Classes general test
=========================================


<?php

/* pretty nifty object oriented code! */

class user {
  public $first_name,$family_name,$address,$phone_num;
  function display()
  {
    echo "User information\n";
    echo "----------------\n\n";
    echo "First name:\t  ".$this->first_name."\n";
    echo "Family name:\t  ".$this->family_name."\n";
    echo "Address:\t  ".$this->address."\n";
    echo "Phone:\t\t  ".$this->phone_num."\n";
    echo "\n\n";
  }
  function initialize($first_name,$family_name,$address,$phone_num)
  {
    $this->first_name = $first_name;
    $this->family_name = $family_name;
    $this->address = $address;
    $this->phone_num = $phone_num;
  }
};


function test($u)
{  /* one can pass classes as arguments */
  $u->display();
  $t = $u;
  $t->address = "New address...";
  return $t;  /* and also return them as return values */
}

$user1 = new user;
$user2 = new user;

$user1->initialize("Zeev","Suraski","Ben Gourion 3, Kiryat Bialik, Israel","+972-4-8713139");
$user2->initialize("Andi","Gutmans","Haifa, Israel","+972-4-8231621");
$user1->display();
$user2->display();

$tmp = test($user2);
$tmp->display();

?>

---

(program (comment) (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name))) (property_element (variable_name (name))) (property_element (variable_name (name))) (property_element (variable_name (name)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (string)) (echo_statement (string)) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string))) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string))) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string))) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string))) (echo_statement (string))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name)))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name)))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name)))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name)))))))) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (comment) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (expression_statement (assignment_expression (variable_name (name)) (variable_name (name)))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (return_statement (variable_name (name))) (comment))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments (string) (string) (string) (string)))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments (string) (string) (string) (string)))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))))

=========================================
object cloning, 1
=========================================

<?php
class test {
	public $p1 = 1;
	public $p2 = 2;
	public $p3;
};

$obj = new test;
$obj->p2 = 'A';
$obj->p3 = 'B';
$copy = clone $obj;
$copy->p3 = 'C';
echo "Object\n";
var_dump($obj);
echo "Clown\n";
var_dump($copy);
echo "Done\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (property_declaration (visibility_modifier) (property_element (variable_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (expression_statement (assignment_expression (variable_name (name)) (clone_expression (variable_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (string)))

=========================================
object cloning, 2
=========================================

<?php
class test {
	public $p1 = 1;
	public $p2 = 2;
	public $p3;
	public function __clone() {
	}
};

$obj = new test;
$obj->p2 = 'A';
$obj->p3 = 'B';
$copy = clone $obj;
$copy->p3 = 'C';
echo "Object\n";
var_dump($obj);
echo "Clown\n";
var_dump($copy);
echo "Done\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement)))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (expression_statement (assignment_expression (variable_name (name)) (clone_expression (variable_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (string)))

=========================================
object cloning, 3
=========================================

<?php
class base {
	protected $p1 = 'base:1';
	public $p2 = 'base:2';
	public $p3 = 'base:3';
	public $p4 = 'base:4';
	public $p5 = 'base:5';
	private $p6 = 'base:6';
	public function __clone() {
	}
};

class test extends base {
	public $p1 = 'test:1';
	public $p3 = 'test:3';
	public $p4 = 'test:4';
	public $p5 = 'test:5';
	public function __clone() {
		$this->p5 = 'clone:5';
	}
}

$obj = new test;
$obj->p4 = 'A';
$copy = clone $obj;
echo "Object\n";
print_r($obj);
echo "Clown\n";
print_r($copy);
echo "Done\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement)))) (class_declaration (name) (class_base_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (expression_statement (assignment_expression (variable_name (name)) (clone_expression (variable_name (name))))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (string)) (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (echo_statement (string)))

=========================================
object cloning, 4
=========================================

<?php
abstract class base {
  public $a = 'base';

  // disallow cloning
  private function __clone() {}
}

class test extends base {
  public $b = 'test';

  // reenable cloning
  public function __clone() {}

  public function show() {
	var_dump($this);
  }
}

echo "Original\n";
$o1 = new test;
$o1->a = array(1,2);
$o1->b = array(3,4);
$o1->show();

echo "Clone\n";
$o2 = clone $o1;
$o2->show();

echo "Modify\n";
$o2->a = 5;
$o2->b = 6;
$o2->show();

echo "Done\n";
?>

---

(program (class_declaration (class_modifier) (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (comment) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement)))) (class_declaration (name) (class_base_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (comment) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (clone_expression (variable_name (name))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (echo_statement (string)) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (echo_statement (string)))

=========================================
Class constants and doc comments
=========================================

<?php
class X {
	/** comment X1 */
	const X1 = 1;
	const X2 = 2;
	/** comment X3 */
	const X3 = 3;
}
class Y extends X {
	/** comment Y1 */
	const Y1 = 1;
	const Y2 = 2;
	/** comment Y3 */
	const Y3 = 3;
}
$r = new ReflectionClass('Y');
foreach ($r->getReflectionConstants() as $rc) {
	echo $rc->getName() . " : " . $rc->getDocComment() . "\n";
}


?>

---

(program (class_declaration (name) (comment) (class_const_declaration (const_element (name) (integer))) (class_const_declaration (const_element (name) (integer))) (comment) (class_const_declaration (const_element (name) (integer)))) (class_declaration (name) (class_base_clause (qualified_name (name))) (comment) (class_const_declaration (const_element (name) (integer))) (class_const_declaration (const_element (name) (integer))) (comment) (class_const_declaration (const_element (name) (integer)))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments (string))))) (foreach_statement (member_call_expression (variable_name (name)) (name) (arguments)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (binary_expression (member_call_expression (variable_name (name)) (name) (arguments)) (string)) (member_call_expression (variable_name (name)) (name) (arguments))) (string))))))

=========================================
Do not call destructors if constructor fails
=========================================

<?php

class Test
{
    function __construct($msg) {
        echo __METHOD__ . "($msg)\n";
        throw new Exception($msg);
    }

    function __destruct() {
        echo __METHOD__ . "\n";
    }
}

try
{
    $o = new Test('Hello');
    unset($o);
}
catch (Exception $e)
{
    echo 'Caught ' . get_class($e) . '(' . $e->getMessage() . ")\n";
}

?>
===DONE===

---

(program (class_declaration (name) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (throw_statement (object_creation_expression (qualified_name (name)) (arguments (variable_name (name)))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))))))) (try_statement (compound_statement (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments (string))))) (unset_statement (variable_name (name)))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (binary_expression (binary_expression (string) (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (string)) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))) (text))

=========================================
dereferencing of objects from methods
=========================================

<?php

class Name {
	function __construct($_name) {
		$this->name = $_name;
	}

	function display() {
		echo $this->name . "\n";
	}
}

class Person {
	private $name;

	function __construct($_name, $_address) {
		$this->name = new Name($_name);
	}

	function getName() {
		return $this->name;
	}
}

$person = new Person("John", "New York");
$person->getName()->display();

?>

---

(program (class_declaration
		(name)
		(method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name)))))))
		(method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (string)))))))
	(class_declaration
		(name)
		(property_declaration (visibility_modifier) (property_element (variable_name (name))))
		(method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (object_creation_expression (qualified_name (name)) (arguments (variable_name (name)))))))))
		(method_declaration (function_definition (name) (formal_parameters) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name)))))))
	(expression_statement (assignment_expression
		(variable_name (name))
		(object_creation_expression (qualified_name (name)) (arguments (string) (string)))))
	(expression_statement (member_call_expression
		(member_call_expression (variable_name (name)) (name) (arguments))
		(name)
		(arguments))))

=========================================
Destructors and echo
=========================================

<?php

class Test
{
    function __construct() {
        echo __METHOD__ . "\n";
    }

    function __destruct() {
        echo __METHOD__ . "\n";
    }
}

$o = new Test;

?>
===DONE===

---

(program (class_declaration (name) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (text))

=========================================
accessing globals from destructor in shutdown
=========================================

<?php
$test_cnt = 0;
$test_num = 0;

function Show() {
  global $test_cnt;
  echo "Count: $test_cnt\n";
}

class counter {
  protected $id;

  public function __construct() {
    global $test_cnt, $test_num;
    $test_cnt++;
    $this->id = $test_num++;
  }

  public function Show() {
    echo 'Id: '.$this->id."\n";
  }

  // try protected here
  public function __destruct() {
    global $test_cnt;
    $test_cnt--;
  }

  static public function destroy(&$obj) {
  	$obj = NULL;
  	}
}
Show();
$obj1 = new counter;
$obj1->Show();
Show();
$obj2 = new counter;
$obj2->Show();
Show();
counter::destroy($obj1);
Show();
// or uncomment this line and it works
//counter::destroy($obj2);
echo "Done\n";
?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (integer))) (expression_statement (assignment_expression (variable_name (name)) (integer))) (function_definition (name) (formal_parameters) (compound_statement (global_declaration (variable_name (name))) (echo_statement (string)))) (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (constructor_declaration (visibility_modifier) (formal_parameters) (compound_statement (global_declaration (variable_name (name)) (variable_name (name))) (expression_statement (update_expression (variable_name (name)))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (update_expression (variable_name (name))))))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string)))))) (comment) (destructor_declaration (visibility_modifier) (compound_statement (global_declaration (variable_name (name))) (expression_statement (update_expression (variable_name (name)))))) (method_declaration (static_modifier) (visibility_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name)))))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (expression_statement (scoped_call_expression (qualified_name (name)) (name) (arguments (variable_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments))) (comment) (comment) (echo_statement (string)))

=========================================
Destructing and references
=========================================

<?php

class test1 {public $x;};
class test2 {public $x;};
class test3 {public $x;};
class test4 {public $x;};

$o1 = new test1;
$o2 = new test2;
$o3 = new test3;
$o4 = new test4;

$o3->x = &$o4;

$r1 = &$o1;

class once {}

$o = new once;
echo "Done\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)))))  (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)))))  (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)))))  (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)))))  (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name)))) (expression_statement (assignment_expression (variable_name (name)) (variable_name (name)))) (class_declaration (name)) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (echo_statement (string)))

=========================================
The inherited destructor is called
=========================================

<?php
class base {
   function __construct() {
      echo __METHOD__ . "\n";
   }

   function __destruct() {
      echo __METHOD__ . "\n";
   }
}

class derived extends base {
}

$obj = new derived;

unset($obj);

echo 'Done';
?>

---

(program (class_declaration (name) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))))))) (class_declaration (name) (class_base_clause (qualified_name (name)))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (unset_statement (variable_name (name))) (echo_statement (string)))

=========================================
factory objects
=========================================

<?php

class Circle {
	function draw() {
		echo "Circle\n";
	}
}

class Square {
	function draw() {
		print "Square\n";
	}
}

function ShapeFactoryMethod($shape) {
	switch ($shape) {
		case "Circle":
			return new Circle();
		case "Square":
			return new Square();
	}
}

ShapeFactoryMethod("Circle")->draw();
ShapeFactoryMethod("Square")->draw();

?>

---

(program (class_declaration (name) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (string)))))) (class_declaration (name) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (print_intrinsic (string))))))) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (switch_statement (variable_name (name)) (case_statement (string) (return_statement (object_creation_expression (qualified_name (name)) (arguments)))) (case_statement (string) (return_statement (object_creation_expression (qualified_name (name)) (arguments))))))) (expression_statement (member_call_expression (function_call_expression (qualified_name (name)) (arguments (string))) (name) (arguments))) (expression_statement (member_call_expression (function_call_expression (qualified_name (name)) (arguments (string))) (name) (arguments))))

=========================================
factory and singleton, test 1
=========================================

<?php
class test {
  protected $x;

  static private $test = NULL;
  static private $cnt = 0;

  static function factory($x) {
    if (test::$test) {
      return test::$test;
    } else {
      test::$test = new test($x);
      return test::$test;
    }
  }

  protected function __construct($x) {
    test::$cnt++;
    $this->x = $x;
  }

  static function destroy() {
    test::$test = NULL;
  }

  protected function __destruct() {
  	test::$cnt--;
  }

  public function get() {
    return $this->x;
  }

  static public function getX() {
    if (test::$test) {
      return test::$test->x;
    } else {
      return NULL;
    }
  }

  static public function count() {
    return test::$cnt;
  }
}

echo "Access static members\n";
var_dump(test::getX());
var_dump(test::count());

echo "Create x and y\n";
$x = test::factory(1);
$y = test::factory(2);
var_dump(test::getX());
var_dump(test::count());
var_dump($x->get());
var_dump($y->get());

echo "Destruct x\n";
$x = NULL;
var_dump(test::getX());
var_dump(test::count());
var_dump($y->get());

echo "Destruct y\n";
$y = NULL;
var_dump(test::getX());
var_dump(test::count());

echo "Destruct static\n";
test::destroy();
var_dump(test::getX());
var_dump(test::count());

echo "Done\n";
?>

---

(program (class_declaration
    (name)
    (property_declaration (visibility_modifier) (property_element (variable_name (name))))
    (property_declaration (static_modifier) (visibility_modifier) (property_element (variable_name (name)) (property_initializer (qualified_name (name)))))
    (property_declaration (static_modifier) (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer))))
    (method_declaration (static_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (if_statement (scoped_property_access_expression (qualified_name (name)) (variable_name (name))) (compound_statement (return_statement (scoped_property_access_expression (qualified_name (name)) (variable_name (name))))) (else_clause (compound_statement (expression_statement (assignment_expression (scoped_property_access_expression (qualified_name (name)) (variable_name (name))) (object_creation_expression (qualified_name (name)) (arguments (variable_name (name)))))) (return_statement (scoped_property_access_expression (qualified_name (name)) (variable_name (name))))))))))
    (constructor_declaration (visibility_modifier) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (expression_statement (update_expression (scoped_property_access_expression (qualified_name (name)) (variable_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))
    (method_declaration (static_modifier) (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (scoped_property_access_expression (qualified_name (name)) (variable_name (name))) (qualified_name (name)))))))
    (destructor_declaration (visibility_modifier) (compound_statement (expression_statement (update_expression (scoped_property_access_expression (qualified_name (name)) (variable_name (name)))))))
    (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name))))))
    (method_declaration (static_modifier) (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (if_statement (scoped_property_access_expression (qualified_name (name)) (variable_name (name))) (compound_statement (return_statement (member_access_expression (scoped_property_access_expression (qualified_name (name)) (variable_name (name))) (name)))) (else_clause (compound_statement (return_statement (qualified_name (name)))))))))
    (method_declaration (static_modifier) (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (return_statement (scoped_property_access_expression (qualified_name (name)) (variable_name (name))))))))
  (echo_statement (string))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (echo_statement (string))
  (expression_statement (assignment_expression (variable_name (name)) (scoped_call_expression (qualified_name (name)) (name) (arguments (integer)))))
  (expression_statement (assignment_expression (variable_name (name)) (scoped_call_expression (qualified_name (name)) (name) (arguments (integer)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_call_expression (variable_name (name)) (name) (arguments)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_call_expression (variable_name (name)) (name) (arguments)))))
  (echo_statement (string))
  (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_call_expression (variable_name (name)) (name) (arguments)))))
  (echo_statement (string))
  (expression_statement (assignment_expression (variable_name (name)) (qualified_name (name))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (echo_statement (string))
  (expression_statement (scoped_call_expression (qualified_name (name)) (name) (arguments)))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (expression_statement (function_call_expression (qualified_name (name)) (arguments (scoped_call_expression (qualified_name (name)) (name) (arguments)))))
  (echo_statement (string)))

=========================================
post increment/decrement property of overloaded object
=========================================

<?php

class Test {
	private $real_a = 2;

	function __set($property, $value) {
	  if ($property == "a") {
	    $this->real_a = $value;
	  }
	}

	function __get($property) {
	  if ($property == "a") {
	    return $this->real_a;
	  }
	}
}

$obj = new Test;
var_dump($obj->a);
$obj->a++;
var_dump($obj->a);
echo "---Done---\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (expression_statement (update_expression (member_access_expression (variable_name (name)) (name)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (echo_statement (string)))

=========================================
post increment/decrement property of overloaded object with assignment
=========================================

<?php

class Test {
	private $real_a = 2;

	function __set($property, $value) {
	  if ($property == "a") {
	    $this->real_a = $value;
	  }
	}

	function __get($property) {
	  if ($property == "a") {
	    return $this->real_a;
	  }
	}
}

$obj = new Test;
var_dump($obj->a);
$t1 = $obj->a++;
var_dump($obj->a);
echo "---Done---\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (expression_statement (assignment_expression (variable_name (name)) (update_expression (member_access_expression (variable_name (name)) (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (echo_statement (string)))

=========================================
pre increment/decrement property of overloaded object
=========================================

<?php

class Test {
	private $real_a = 2;

	function __set($property, $value) {
	  if ($property == "a") {
	    $this->real_a = $value;
	  }
	}

	function __get($property) {
	  if ($property == "a") {
	    return $this->real_a;
	  }
	}
}

$obj = new Test;
var_dump($obj->a);
++$obj->a;
var_dump($obj->a);
echo "---Done---\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (expression_statement (update_expression (member_access_expression (variable_name (name)) (name)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (echo_statement (string)))

=========================================
pre increment/decrement property of overloaded object with assignment
=========================================

<?php

class Test {
	private $real_a = 2;

	function __set($property, $value) {
	  if ($property == "a") {
	    $this->real_a = $value;
	  }
	}

	function __get($property) {
	  if ($property == "a") {
	    return $this->real_a;
	  }
	}
}

$obj = new Test;
var_dump($obj->a);
$t1 = ++$obj->a;
var_dump($obj->a);
echo "---Done---\n";
?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name))) (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (if_statement (binary_expression (variable_name (name)) (string)) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (expression_statement (assignment_expression (variable_name (name)) (update_expression (member_access_expression (variable_name (name)) (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (echo_statement (string)))
=========================================
Classes inheritance test
=========================================

<?php

/* Inheritance test.  Pretty nifty if I do say so myself! */

class foo {
  public $a;
  public $b;
  function display() {
  	echo "This is class foo\n";
    echo "a = ".$this->a."\n";
    echo "b = ".$this->b."\n";
  }
  function mul() {
    return $this->a*$this->b;
  }
};

class bar extends foo {
  public $c;
  function display() {  /* alternative display function for class bar */
    echo "This is class bar\n";
    echo "a = ".$this->a."\n";
    echo "b = ".$this->b."\n";
    echo "c = ".$this->c."\n";
  }
};


$foo1 = new foo;
$foo1->a = 2;
$foo1->b = 5;
$foo1->display();
echo $foo1->mul()."\n";

echo "-----\n";

$bar1 = new bar;
$bar1->a = 4;
$bar1->b = 3;
$bar1->c = 12;
$bar1->display();
echo $bar1->mul()."\n";

---

(program (comment) (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (string)) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string))) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (return_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (member_access_expression (variable_name (name)) (name)))))))) (class_declaration (name) (class_base_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (comment) (echo_statement (string)) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string))) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string))) (echo_statement (binary_expression (binary_expression (string) (member_access_expression (variable_name (name)) (name))) (string))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (echo_statement (binary_expression (member_call_expression (variable_name (name)) (name) (arguments)) (string))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (echo_statement (binary_expression (member_call_expression (variable_name (name)) (name) (arguments)) (string))))

=========================================
Ensure a interface can have public constants
=========================================

<?php
interface IA {
	public const FOO = 10;
}

echo "Done\n";
?>

---

(program (interface_declaration (name) (class_const_declaration (visibility_modifier) (const_element (name) (integer)))) (echo_statement (string)))

=========================================
An interface method allows additional default arguments
=========================================

<?php

error_reporting(4095);

interface test {
	public function bar();
}

class foo implements test {

	public function bar($foo = NULL) {
		echo "foo\n";
	}
}

$foo = new foo;
$foo->bar();

?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (integer)))) (interface_declaration (name) (method_declaration (visibility_modifier) (name) (formal_parameters))) (class_declaration (name) (class_interface_clause (qualified_name (name))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)) (default_argument_specifier (qualified_name (name))))) (compound_statement (echo_statement (string)))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))))

=========================================
default argument value in interface implementation
=========================================

<?php

interface test {
	public function bar();
}

class foo implements test {

	public function bar($arg = 2) {
		var_dump($arg);
	}
}

$foo = new foo;
$foo->bar();

?>

---

(program (interface_declaration (name) (method_declaration (visibility_modifier) (name) (formal_parameters))) (class_declaration (name) (class_interface_clause (qualified_name (name))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)) (default_argument_specifier (integer)))) (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))))

=========================================
interfaces
=========================================

<?php

interface ThrowableInterface {
	public function getMessage();
}

class Exception_foo implements ThrowableInterface {
	public $foo = "foo";

	public function getMessage() {
		return $this->foo;
	}
}

$foo = new Exception_foo;
echo $foo->getMessage() . "\n";

?>

---

(program (interface_declaration (name) (method_declaration (visibility_modifier) (name) (formal_parameters))) (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (string)))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (echo_statement (binary_expression (member_call_expression (variable_name (name)) (name) (arguments)) (string))))

=========================================
iterators and foreach
=========================================

<?php
class c_iter implements Iterator {

	private $obj;
	private $num = 0;

	function __construct($obj) {
		echo __METHOD__ . "\n";
		$this->num = 0;
		$this->obj = $obj;
	}
	function rewind() {
	}
	function valid() {
		$more = $this->num < $this->obj->max;
		echo __METHOD__ . ' = ' .($more ? 'true' : 'false') . "\n";
		return $more;
	}
	function current() {
		echo __METHOD__ . "\n";
		return $this->num;
	}
	function next() {
		echo __METHOD__ . "\n";
		$this->num++;
	}
	function key() {
		echo __METHOD__ . "\n";
		switch($this->num) {
			case 0: return "1st";
			case 1: return "2nd";
			case 2: return "3rd";
			default: return "???";
		}
	}
}

class c implements IteratorAggregate {

	public $max = 3;

	function getIterator() {
		echo __METHOD__ . "\n";
		return new c_iter($this);
	}
}

echo "===Array===\n";

$a = array(0,1,2);
foreach($a as $v) {
	echo "array:$v\n";
}

echo "===Manual===\n";
$t = new c();
for ($iter = $t->getIterator(); $iter->valid(); $iter->next()) {
	echo $iter->current() . "\n";
}

echo "===foreach/std===\n";
foreach($t as $v) {
	echo "object:$v\n";
}

echo "===foreach/rec===\n";
foreach($t as $v) {
	foreach($t as $w) {
		echo "double:$v:$w\n";
	}
}

echo "===foreach/key===\n";
foreach($t as $i => $v) {
	echo "object:$i=>$v\n";
}

print "Done\n";
exit(0);
?>

---

(program (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (binary_expression (member_access_expression (variable_name (name)) (name)) (member_access_expression (member_access_expression (variable_name (name)) (name)) (name))))) (echo_statement (binary_expression (binary_expression (binary_expression (qualified_name (name)) (string)) (parenthesized_expression (conditional_expression (variable_name (name)) (string) (string)))) (string))) (return_statement (variable_name (name)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (return_statement (member_access_expression (variable_name (name)) (name)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (expression_statement (update_expression (member_access_expression (variable_name (name)) (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (switch_statement (member_access_expression (variable_name (name)) (name)) (case_statement (integer) (return_statement (string))) (case_statement (integer) (return_statement (string))) (case_statement (integer) (return_statement (string))) (default_statement (return_statement (string)))))))) (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (return_statement (object_creation_expression (qualified_name (name)) (arguments (variable_name (name))))))))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer))))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)))) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments)))) (for_statement (assignment_expression (variable_name (name)) (member_call_expression (variable_name (name)) (name) (arguments))) (member_call_expression (variable_name (name)) (name) (arguments)) (member_call_expression (variable_name (name)) (name) (arguments)) (compound_statement (echo_statement (binary_expression (member_call_expression (variable_name (name)) (name) (arguments)) (string))))) (echo_statement (string)) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)))) (echo_statement (string)) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)))))) (echo_statement (string)) (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)))) (expression_statement (print_intrinsic (string))) (expression_statement (exit_intrinsic (integer))))

=========================================
iterators and break
=========================================

<?php
class c_iter implements Iterator {

	private $obj;
	private $num = 0;

	function __construct($obj) {
		echo __METHOD__ . "\n";
		$this->obj = $obj;
	}
	function rewind() {
		echo __METHOD__ . "\n";
		$this->num = 0;
	}
	function valid() {
		$more = $this->num < $this->obj->max;
		echo __METHOD__ . ' = ' .($more ? 'true' : 'false') . "\n";
		return $more;
	}
	function current() {
		echo __METHOD__ . "\n";
		return $this->num;
	}
	function next() {
		echo __METHOD__ . "\n";
		$this->num++;
	}
	function key() {
		echo __METHOD__ . "\n";
		switch($this->num) {
			case 0: return "1st";
			case 1: return "2nd";
			case 2: return "3rd";
			default: return "???";
		}
	}
	function __destruct() {
		echo __METHOD__ . "\n";
	}
}

class c implements IteratorAggregate {

	public $max = 3;

	function getIterator() {
		echo __METHOD__ . "\n";
		return new c_iter($this);
	}
	function __destruct() {
		echo __METHOD__ . "\n";
	}
}

$t = new c();

foreach($t as $k => $v) {
	foreach($t as $w) {
		echo "double:$v:$w\n";
		break;
	}
}

unset($t);

print "Done\n";
?>

---

(program (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (binary_expression (member_access_expression (variable_name (name)) (name)) (member_access_expression (member_access_expression (variable_name (name)) (name)) (name))))) (echo_statement (binary_expression (binary_expression (binary_expression (qualified_name (name)) (string)) (parenthesized_expression (conditional_expression (variable_name (name)) (string) (string)))) (string))) (return_statement (variable_name (name)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (return_statement (member_access_expression (variable_name (name)) (name)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (expression_statement (update_expression (member_access_expression (variable_name (name)) (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (switch_statement (member_access_expression (variable_name (name)) (name)) (case_statement (integer) (return_statement (string))) (case_statement (integer) (return_statement (string))) (case_statement (integer) (return_statement (string))) (default_statement (return_statement (string))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))))))) (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (return_statement (object_creation_expression (qualified_name (name)) (arguments (variable_name (name)))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments)))) (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (echo_statement (string)) (break_statement))))) (unset_statement (variable_name (name))) (expression_statement (print_intrinsic (string))))

=========================================
iterators and break
=========================================

<?php
class c_iter implements Iterator {

	private $obj;
	private $num = 0;

	function __construct($obj) {
		echo __METHOD__ . "\n";
		$this->obj = $obj;
	}
	function rewind() {
		echo __METHOD__ . "\n";
	}
	function valid() {
		$more = $this->num < $this->obj->max;
		echo __METHOD__ . ' = ' .($more ? 'true' : 'false') . "\n";
		return $more;
	}
	function current() {
		echo __METHOD__ . "\n";
		return $this->num;
	}
	function next() {
		echo __METHOD__ . "\n";
		$this->num++;
	}
	function key() {
		return $this->num;
	}
}

class c implements IteratorAggregate {

	public $max = 4;

	function getIterator() {
		echo __METHOD__ . "\n";
		return new c_iter($this);
	}
}

$t = new c();

foreach($t as $v) {
	if ($v == 0) {
		echo "continue outer\n";
		continue;
	}
	foreach($t as $w) {
		if ($w == 1) {
			echo "continue inner\n";
			continue;
		}
		if ($w == 2) {
			echo "break inner\n";
			break;
		}
		echo "double:$v:$w\n";
	}
	if ($v == 2) {
		echo "break outer\n";
		break;
	}
}

print "Done\n";
?>

---

(program (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters (simple_parameter (variable_name (name)))) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (variable_name (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (variable_name (name)) (binary_expression (member_access_expression (variable_name (name)) (name)) (member_access_expression (member_access_expression (variable_name (name)) (name)) (name))))) (echo_statement (binary_expression (binary_expression (binary_expression (qualified_name (name)) (string)) (parenthesized_expression (conditional_expression (variable_name (name)) (string) (string)))) (string))) (return_statement (variable_name (name)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (return_statement (member_access_expression (variable_name (name)) (name)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (expression_statement (update_expression (member_access_expression (variable_name (name)) (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name))))))) (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (binary_expression (qualified_name (name)) (string))) (return_statement (object_creation_expression (qualified_name (name)) (arguments (variable_name (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments)))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (integer)) (compound_statement (echo_statement (string)) (continue_statement))) (foreach_statement (variable_name (name)) (variable_name (name)) (compound_statement (if_statement (binary_expression (variable_name (name)) (integer)) (compound_statement (echo_statement (string)) (continue_statement))) (if_statement (binary_expression (variable_name (name)) (integer)) (compound_statement (echo_statement (string)) (break_statement))) (echo_statement (string)))) (if_statement (binary_expression (variable_name (name)) (integer)) (compound_statement (echo_statement (string)) (break_statement))))) (expression_statement (print_intrinsic (string))))

=========================================
iterators and array wrapping
=========================================

<?php

class ai implements Iterator {

	private $array;

	function __construct() {
		$this->array = array('foo', 'bar', 'baz');
	}

	function rewind() {
		reset($this->array);
		$this->next();
	}

	function valid() {
		return $this->key !== NULL;
	}

	function key() {
		return $this->key;
	}

	function current() {
		return $this->current;
	}

	function next() {
        $this->key = key($this->array);
        $this->current = current($this->array);
        next($this->array);
	}
}

class a implements IteratorAggregate {

	public function getIterator() {
		return new ai();
	}
}

$array = new a();

foreach ($array as $property => $value) {
	print "$property: $value\n";
}

#$array = $array->getIterator();
#$array->rewind();
#$array->valid();
#var_dump($array->key());
#var_dump($array->current());
echo "===2nd===\n";

$array = new ai();

foreach ($array as $property => $value) {
	print "$property: $value\n";
}

echo "===3rd===\n";

foreach ($array as $property => $value) {
	print "$property: $value\n";
}

?>
===DONE===

---

(program (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (array_creation_expression (array_element_initializer (string)) (array_element_initializer (string)) (array_element_initializer (string)))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (return_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (qualified_name (name))))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (return_statement (member_access_expression (variable_name (name)) (name)))))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name)))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name))))))))) (class_declaration (name) (class_interface_clause (qualified_name (name))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (return_statement (object_creation_expression (qualified_name (name)) (arguments))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments)))) (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (expression_statement (print_intrinsic (string))))) (comment) (comment) (comment) (comment) (comment) (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments)))) (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (expression_statement (print_intrinsic (string))))) (echo_statement (string)) (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (expression_statement (print_intrinsic (string))))) (text))

=========================================
iterators and exceptions
=========================================

<?php
class Test implements Iterator
{
	public $arr = array(1, 2, 3);
	public $x = 0;

	public function rewind()    { if ($this->x == 0) throw new Exception(__METHOD__); reset($this->arr); }
	public function current()   { if ($this->x == 1) throw new Exception(__METHOD__); return current($this->arr); }
	public function key()       { if ($this->x == 2) throw new Exception(__METHOD__); return key($this->arr); }
	public function next()      { if ($this->x == 3) throw new Exception(__METHOD__); next($this->arr); }
	public function valid()     { if ($this->x == 4) throw new Exception(__METHOD__); return (key($this->arr) !== NULL); }
}

$t = new Test();

while($t->x < 5)
{
	try
	{
	    foreach($t as $k => $v)
	    {
	        echo "Current\n";
	    }
	}
	catch(Exception $e)
	{
	    echo "Caught in " . $e->getMessage() . "()\n";
	}
	$t->x++;
}
?>
===DONE===

---

(program (class_declaration (name) (class_interface_clause (qualified_name (name))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (array_creation_expression (array_element_initializer (integer)) (array_element_initializer (integer)) (array_element_initializer (integer)))))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (if_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (integer)) (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name)))))))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (if_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (integer)) (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name)))))) (return_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name)))))))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (if_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (integer)) (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name)))))) (return_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name)))))))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (if_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (integer)) (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name)))))))) (method_declaration (visibility_modifier) (function_definition (name) (formal_parameters) (compound_statement (if_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (integer)) (throw_statement (object_creation_expression (qualified_name (name)) (arguments (qualified_name (name)))))) (return_statement (parenthesized_expression (binary_expression (function_call_expression (qualified_name (name)) (arguments (member_access_expression (variable_name (name)) (name)))) (qualified_name (name))))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name)) (arguments)))) (while_statement (binary_expression (member_access_expression (variable_name (name)) (name)) (integer)) (compound_statement (try_statement (compound_statement (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string))))) (catch_clause (qualified_name (name)) (variable_name (name)) (compound_statement (echo_statement (binary_expression (binary_expression (string) (member_call_expression (variable_name (name)) (name) (arguments))) (string)))))) (expression_statement (update_expression (member_access_expression (variable_name (name)) (name)))))) (text))

=========================================
object references
=========================================

<?php

class Foo {
	public $name;

	function __construct() {
		$this->name = "I'm Foo!\n";
	}
}

$foo = new Foo;
echo $foo->name;
$bar = $foo;
$bar->name = "I'm Bar!\n";

// In ZE1, we would expect "I'm Foo!"
echo $foo->name;

?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))))))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (echo_statement (member_access_expression (variable_name (name)) (name))) (expression_statement (assignment_expression (variable_name (name)) (variable_name (name)))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (string))) (comment) (echo_statement (member_access_expression (variable_name (name)) (name))))

=========================================
singleton
=========================================

<?php

class Counter {
	private $counter = 0;

	function increment_and_print() {
		echo ++$this->counter;
		echo "\n";
    }
}


class SingletonCounter {
	private static $m_instance = NULL;

	static function Instance() {
		if (self::$m_instance == NULL) {
			self::$m_instance = new Counter();
		}
		return self::$m_instance;
	}
}

SingletonCounter::Instance()->increment_and_print();
SingletonCounter::Instance()->increment_and_print();
SingletonCounter::Instance()->increment_and_print();

?>

---

(program (class_declaration
		(name)
		(property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer))))
		(method_declaration (function_definition (name) (formal_parameters) (compound_statement (echo_statement (update_expression (member_access_expression (variable_name (name)) (name)))) (echo_statement (string))))))
	(class_declaration
		(name)
		(property_declaration (visibility_modifier) (static_modifier) (property_element (variable_name (name)) (property_initializer (qualified_name (name)))))
		(method_declaration (static_modifier) (function_definition (name) (formal_parameters) (compound_statement (if_statement (binary_expression (scoped_property_access_expression (relative_scope) (variable_name (name))) (qualified_name (name))) (compound_statement (expression_statement (assignment_expression (scoped_property_access_expression (relative_scope) (variable_name (name))) (object_creation_expression (qualified_name (name)) (arguments)))))) (return_statement (scoped_property_access_expression (relative_scope) (variable_name (name))))))))
	(expression_statement
		(member_call_expression
			(scoped_call_expression (qualified_name (name)) (name) (arguments))
			(name)
			(arguments)))
	(expression_statement
		(member_call_expression (scoped_call_expression (qualified_name (name)) (name) (arguments)) (name) (arguments)))
	(expression_statement
		(member_call_expression (scoped_call_expression (qualified_name (name)) (name) (arguments)) (name) (arguments))))

=========================================
foreach and property visibility
=========================================

<?php

class base
{
	public $a=1;
	protected $b=2;
	private $c=3;

	function f()
	{
		foreach($this as $k=>$v) {
			echo "$k=>$v\n";
		}
	}
}

class derived extends base
{
}

$o = new base;
$o->d = 4;
echo "===base::function===\n";
$o->f();
echo "===base,foreach===\n";
foreach($o as $k=>$v) {
	echo "$k=>$v\n";
}

$o = new derived;
$o->d = 4;
echo "===derived::function===\n";
$o->f();
echo "===derived,foreach===\n";
foreach($o as $k=>$v) {
	echo "$k=>$v\n";
}

?>

---

(program (class_declaration (name) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (property_declaration (visibility_modifier) (property_element (variable_name (name)) (property_initializer (integer)))) (method_declaration (function_definition (name) (formal_parameters) (compound_statement (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)))))))) (class_declaration (name) (class_base_clause (qualified_name (name)))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (echo_statement (string)) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (echo_statement (string)) (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)))) (expression_statement (assignment_expression (variable_name (name)) (object_creation_expression (qualified_name (name))))) (expression_statement (assignment_expression (member_access_expression (variable_name (name)) (name)) (integer))) (echo_statement (string)) (expression_statement (member_call_expression (variable_name (name)) (name) (arguments))) (echo_statement (string)) (foreach_statement (variable_name (name)) (pair (variable_name (name)) (variable_name (name))) (compound_statement (echo_statement (string)))))
