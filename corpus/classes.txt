=====================================
Global empty class
=====================================

public class F {}

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (class_body)))

=====================================
Class base is dynamic
=====================================

public class F : dynamic { }

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (class_base)
    (class_body)))

=====================================
Class base is object with interfaces
=====================================

public class F : object, IAlpha, IOmega { }

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (class_base
      (identifier_name)
      (identifier_name))
    (class_body)))

=====================================
Partial class
=====================================

public partial class F {}

---

(compilation_unit
 (class_declaration
   (modifiers)
   (identifier_name)
   (class_body)))

=====================================
Class with a single type parameter
=====================================

class F<T> {}

---

(compilation_unit
  (class_declaration
    (identifier_name)
     (type_parameter_list (identifier_name))
     (class_body)))

=====================================
Class with multiple type parameters
=====================================

internal class F<T1, T2> {}

---

(compilation_unit
 (class_declaration
   (modifiers)
   (identifier_name)
    (type_parameter_list
      (identifier_name)
      (identifier_name))
    (class_body)))

=====================================
Class with a type parameter struct constraint
=====================================

public class F<T> where T:struct {}

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (type_parameter_list (identifier_name))
    (type_parameter_constraints_clause
      (identifier_name) (type_parameter_constraints))
    (class_body)))

=====================================
Class with a type parameter class constraint
=====================================

public class F<T> where T:class {}

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (type_parameter_list (identifier_name))
    (type_parameter_constraints_clause
      (identifier_name) (type_parameter_constraints))
    (class_body)))

=====================================
Class with type parameter new constraint
=====================================

public class F<T> where T: new() {}

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (type_parameter_list (identifier_name))
    (type_parameter_constraints_clause
      (identifier_name)
      (type_parameter_constraints (constructor_constraint)))
    (class_body)))

=====================================
Class with type parameter identifier constraint
=====================================

public class F<T> where T: I {}

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (type_parameter_list (identifier_name))
    (type_parameter_constraints_clause
      (identifier_name)
      (type_parameter_constraints (identifier_name)))
    (class_body)))

=====================================
Class with type parameter identifier and new constraints
=====================================

public class F<T> where T: I, new() {}

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (type_parameter_list (identifier_name))
    (type_parameter_constraints_clause
      (identifier_name)
      (type_parameter_constraints
        (identifier_name)
        (constructor_constraint)))
    (class_body)))

=====================================
Class with multiple type parameter constraints
=====================================

private class F<T1,T2> where T1 : I1, I2, new() where T2 : I2 { }

---

(compilation_unit
  (class_declaration
    (modifiers)
    (identifier_name)
    (type_parameter_list
      (identifier_name)
      (identifier_name))
    (type_parameter_constraints_clause
      (identifier_name)
      (type_parameter_constraints
        (identifier_name)
        (identifier_name)
        (constructor_constraint)))
    (type_parameter_constraints_clause
      (identifier_name)
      (type_parameter_constraints (identifier_name)))
    (class_body)))

=====================================
Class with public constructor
=====================================

class Foo {
  public Foo() {}
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (constructor_declaration
        (modifiers)
        (identifier_name)
        (parameter_list)
        (statement_block)))))

=====================================
Class with static constructor
=====================================

class Foo {
  static Foo() {}
  static extern Foo() {}
  extern static Foo() {}
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (constructor_declaration
        (modifiers)
        (identifier_name)
        (parameter_list)
        (statement_block))
      (constructor_declaration
        (modifiers)
        (identifier_name)
        (parameter_list)
        (statement_block))
      (constructor_declaration
        (modifiers)
        (identifier_name)
        (parameter_list)
        (statement_block)))))

=====================================
Class with extern destructor
=====================================

class Foo {
  extern ~Foo() {}
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (destructor_declaration
        (identifier_name)
        (parameter_list)
        (statement_block)))))

=====================================
Class with constants
=====================================

class Foo {
  private const int a = 1;
  const string b = "hello";
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (constant_declaration
        (modifiers)
        (predefined_type)
        (constant_declarator
          (identifier_name)
          (integer_literal)))
      (constant_declaration
        (predefined_type)
        (constant_declarator
          (identifier_name)
          (string_literal))))))

=====================================
Class with indexer
=====================================

class Foo {
  public bool this[int index] {
    get { return a; }
    set { a = value; }
  }
}

---

(compilation_unit
  (class_declaration
    (identifier_name)
    (class_body
      (indexer_declaration
        (modifiers)
        (predefined_type)
        (parameter (predefined_type) (identifier_name))
        (accessor_declaration
          (statement_block (return_statement (identifier_name))))
        (accessor_declaration
          (statement_block (expression_statement (assignment_expression (identifier_name) (assignment_operator) (identifier_name)))))))))

=================================
Method with qualified return type
=================================

class A {
  B.C d() {
    return null;
  }
}

---

(compilation_unit
  (class_declaration (identifier_name)
    (class_body
      (method_declaration
        (qualified_name (identifier_name) (identifier_name))
        (identifier_name)
        (parameter_list)
        (statement_block
          (return_statement (null_literal)))))))
