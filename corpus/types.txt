=====================
The unit type
=====================

type A = ();

---

(source_file
  (type_item (type_identifier) (unit_type)))

=====================
Tuple types
=====================

type A = (i32, String);

---

(source_file
  (type_item (type_identifier) (tuple_type (primitive_type) (type_identifier))))

=====================
Reference types
=====================

type A = &B;
type C = &'a str;
type D = &'a mut str;

---

(source_file
  (type_item (type_identifier) (reference_type (type_identifier)))
  (type_item (type_identifier) (reference_type (lifetime (identifier)) (primitive_type)))
  (type_item (type_identifier) (reference_type (lifetime (identifier)) (mutable_specifier) (primitive_type))))

=====================
Generic types
=====================

type A = B<C>;
type D = E<F, str>;
type G = H<'a, I>;
type J = H<K=L>;

---

(source_file
  (type_item
    (type_identifier)
    (generic_type (type_identifier) (type_arguments (type_identifier))))
  (type_item
    (type_identifier)
    (generic_type (type_identifier) (type_arguments (type_identifier) (primitive_type))))
  (type_item
    (type_identifier)
    (generic_type (type_identifier) (type_arguments (lifetime (identifier)) (type_identifier))))
  (type_item
    (type_identifier)
    (generic_type (type_identifier) (type_arguments (type_binding (type_identifier) (type_identifier))))))

=====================
Scoped types
=====================

type A = B::C;
type D = E::F::G;
type H = I::J<K>;
type L = M<N>::O;

---

(source_file
  (type_item
    (type_identifier)
    (scoped_type_identifier (identifier) (type_identifier)))
  (type_item
    (type_identifier)
    (scoped_type_identifier (scoped_identifier (identifier) (identifier)) (type_identifier)))
  (type_item
    (type_identifier)
    (generic_type
      (scoped_identifier (identifier) (identifier))
      (type_arguments (type_identifier))))
  (type_item
    (type_identifier)
    (scoped_type_identifier
      (generic_type (type_identifier) (type_arguments (type_identifier)))
      (type_identifier))))

=====================
Array types
=====================

type A = [B; 4];
type C = &[D];

---

(source_file
  (type_item (type_identifier) (array_type (type_identifier) (number_literal)))
  (type_item (type_identifier) (reference_type (array_type (type_identifier)))))
