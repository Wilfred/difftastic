=================================================
Function Declarations With Type Variables
=================================================

f :: a -> a -> a
f num1 num2 = num2

---

(module
  (type_signature
    (signature_identifier (variable))
    (variable)
    (variable)
    (variable))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (variable)
      (variable))
    (function_body
      (variable))))

=================================================
Function Declarations With Simple Constructors
=================================================

f :: Ex -> Ex
f Ex = Ex

---

(module
  (type_signature
    (signature_identifier (variable))
    (type_constructor (identifier))
    (type_constructor (identifier)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (type_constructor (identifier)))
    (function_body (type_constructor (identifier)))))

=================================================
Function Declarations With @
=================================================

f :: a -> a -> a
f n@num1 x@num2 = x

---

(module
  (type_signature
    (signature_identifier (variable))
    (variable)
    (variable)
    (variable))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (as
        (variable)
        (variable))
      (as
        (variable)
        (variable)))
    (function_body
      (variable))))

=================================================
Function Declarations With _ (wildcard)
=================================================

f :: a -> a -> a
f _ num2 = num2

---

(module
  (type_signature
    (signature_identifier (variable))
    (variable)
    (variable)
    (variable))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (wildcard)
      (variable))
    (function_body
      (variable))))

=================================================
Function Declarations With Literals
=================================================

f :: a -> a -> a
f 1 2 = 3
f "hello" "world" = "goodbye"
f 'a' 'b' = 'c'
f 1.0 2.0 = 3.0

---

(module
  (type_signature
    (signature_identifier (variable))
    (variable)
    (variable)
    (variable))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (integer)
      (integer))
    (function_body
      (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (string)
      (string))
    (function_body
      (string)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (char)
      (char))
    (function_body
      (char)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (float)
      (float))
    (function_body
      (float))))


=================================================
Function Declarations With Field Labels
=================================================

f :: Ex -> Int
f Ex { a = 1 } = 1
f Ex { a = 1, b = 2 } = 2

---

(module
  (type_signature
    (signature_identifier (variable))
    (type_constructor (identifier))
    (type_constructor (identifier)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (type_constructor
        (identifier)
        (fields
          (field_label (variable) (integer)))))
    (function_body
      (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (type_constructor
        (identifier)
        (fields
          (field_label (variable) (integer))
          (field_label (variable) (integer)))))
    (function_body
      (integer))))

=================================================
Function Declarations With Field Labels And @
=================================================

f c@Ex { a = 1 } = c

---

(module
  (function_declaration
    (function_head
      (function_identifier (variable))
      (as
        (variable)
        (type_constructor
          (identifier)
          (fields
            (field_label (variable) (integer))))))
    (function_body
      (variable))))


=================================================
Function Declarations With Parenthesized Pattern
=================================================

f (1) = 1
f (-(1)) = 1
f (Example a b c) = a
f (a :<: f) = 2
f ([]) = 1

---

(module
  (function_declaration
    (function_head
      (function_identifier (variable))
      (parenthesized_expression
        (integer)))
    (function_body
      (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (parenthesized_expression
        (negative_literal
          (integer))))
      (function_body
        (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (parenthesized_expression
        (type_constructor
          (identifier)
          (variable)
          (variable)
          (variable))))
    (function_body
      (variable)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (parenthesized_expression
        (binary
          (variable)
          (constructor_symbol)
          (variable))))
    (function_body
      (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (parenthesized_expression
        (type_constructor (list_constructor))))
    (function_body
      (integer))))

=================================================
Function Declarations With Tuples
=================================================

f (1, 2) = 1
f ((Just 1), Just 2) = Just 1
f (Just a, Nothing) = Nothing
f (Left a, Right b, -(1)) = b

---

(module
  (function_declaration
    (function_head
      (function_identifier (variable))
      (tuple
        (integer)
        (integer)))
    (function_body
      (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (tuple
        (parenthesized_expression
          (type_constructor
            (identifier)
            (integer)))
        (type_constructor
          (identifier)
          (integer))))
    (function_body
      (function_application
        (type_constructor (identifier))
        (integer))))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (tuple
        (type_constructor
          (identifier)
          (variable))
        (type_constructor (identifier))))
    (function_body
        (type_constructor (identifier))))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (tuple
        (type_constructor
          (identifier)
          (variable))
        (type_constructor
          (identifier)
          (variable))
        (negative_literal (integer))))
    (function_body
      (variable))))

=================================================
Function Declarations With Lists
=================================================

f :: [Int] -> Int
f [] = 0
f [a] = a
f (a:bs) = a
f (a:b:cs) = a
f (a:b:c:ds) = a

---

(module
  (type_signature
    (signature_identifier (variable))
    (type_constructor (list_constructor (type_constructor (identifier))))
    (type_constructor (identifier)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (type_constructor (list_constructor)))
    (function_body
      (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (list (variable)))
    (function_body
      (variable)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (parenthesized_expression
        (binary
          (variable)
          (constructor_symbol)
          (variable))))
    (function_body
      (variable)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (parenthesized_expression
        (binary
          (binary
            (variable)
            (constructor_symbol)
            (variable))
        (constructor_symbol)
        (variable))))
    (function_body
      (variable)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (parenthesized_expression
        (binary
          (binary
            (binary
              (variable)
              (constructor_symbol)
              (variable))
            (constructor_symbol)
            (variable))
          (constructor_symbol)
          (variable))))
    (function_body
      (variable))))

=================================================
Function Declarations With Irrefutable Pattern
=================================================

f ~a = 1
f ~(-(1)) = 1
f ~(~(a, b), c) = c

---

(module
  (function_declaration
    (function_head
      (function_identifier (variable))
      (irrefutable
        (variable)))
    (function_body
      (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (irrefutable
        (parenthesized_expression
          (negative_literal
            (integer)))))
    (function_body
      (integer)))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (irrefutable
        (tuple
          (irrefutable
            (tuple (variable) (variable)))
            (variable))))
    (function_body
      (variable))))

=================================================
Function Declarations With Where
=================================================

f a = c where c = d
f a = c
  where
    c = d
    d = 1


---

(module
  (function_declaration
    (function_head
      (function_identifier (variable))
      (variable))
    (function_body
      (variable)
      (where
        (function_declaration
          (function_head
            (function_identifier (variable)))
          (function_body
            (variable))))))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (variable))
    (function_body
      (variable)
      (where
        (function_declaration
          (function_head
            (function_identifier (variable)))
          (function_body
            (variable)))
        (function_declaration
          (function_head
            (function_identifier (variable)))
          (function_body
            (integer)))))))

=================================================
Function Declarations With Let
=================================================

f = let y = x
        x = 1
      in y

f = let y = x
        x :: Int
        x = 1 in y

f = let { y :: Int;
          y = x;
          x :: Int;
          x = 1; } in y

---

(module
  (function_declaration
    (function_head
      (function_identifier (variable)))
    (function_body
      (let
        (function_declaration
          (function_head
            (function_identifier (variable)))
          (function_body
            (variable)))
        (function_declaration
          (function_head
            (function_identifier (variable)))
          (function_body
            (integer)))
        (in_clause
          (variable)))))
  (function_declaration
    (function_head
      (function_identifier (variable)))
    (function_body
      (let
        (function_declaration
          (function_head
            (function_identifier (variable)))
          (function_body
            (variable)))
        (type_signature
          (signature_identifier (variable)))
          (type_constructor (identifier))
        (function_declaration
          (function_head
            (function_identifier (variable)))
          (function_body
            (integer)))
        (in_clause
          (variable)))))
  (function_declaration
    (function_head
      (function_identifier (variable)))
      (function_body
        (let
          (type_signature
            (signature_identifier (variable))
            (type_constructor (identifier)))
          (function_declaration
            (function_head (function_identifier (variable)))
            (function_body (variable)))
          (type_signature
            (signature_identifier (variable))
            (type_constructor (identifier)))
          (function_declaration
            (function_head (function_identifier (variable)))
            (function_body (integer)))
          (in_clause (variable))))))

=================================================
Function Declarations With Case
=================================================

f x = case x of
  Just _ -> x
    where x = True
  Nothing -> False

g x = case x of
  Just a | a < 10, x, let b = x -> True
  Nothing -> False

---

(module
  (function_declaration
    (function_head
      (function_identifier (variable))
      (variable))
    (function_body
      (case
        (variable)
        (alternative
          (type_constructor (identifier) (wildcard))
          (variable)
          (where
            (function_declaration
              (function_head (function_identifier (variable)))
              (function_body (type_constructor (identifier))))))
        (alternative
          (type_constructor (identifier))
          (type_constructor (identifier))))))
  (function_declaration
    (function_head
      (function_identifier (variable))
      (variable))
    (function_body
      (case
        (variable)
        (alternative
          (type_constructor (identifier) (variable))
          (guard
            (binary
              (variable)
              (variable_symbol)
              (integer)))
          (guard (variable))
          (guard
            (let
              (function_declaration
                (function_head (function_identifier (variable)))
                (function_body (variable)))))
          (type_constructor (identifier)))
        (alternative
          (type_constructor (identifier))
          (type_constructor (identifier)))))))
