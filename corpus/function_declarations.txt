=================================================
Function Declarations With Type Variables
=================================================

f num1 num2 = num2

---

 (module
  (function_declaration
    (variable_identifier)
    (variable_identifier)
    (variable_identifier)
    (function_body
      (variable_identifier))))

=================================================
Function Declarations With Simple Constructors
=================================================

f (Ex 1) = Ex 1

---

(module
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern
      (constructor_pattern
        (constructor_identifier)
        (integer)))
    (function_body
      (function_application
        (constructor_identifier)
        (integer)))))

=================================================
Function Declarations With @
=================================================

f n@num1 x@num2 = x

---

(module
  (function_declaration
    (variable_identifier)
    (as_pattern
      (variable_identifier)
      (variable_identifier))
    (as_pattern
      (variable_identifier)
      (variable_identifier))
    (function_body (variable_identifier))))

=================================================
Function Declarations With _ (wildcard)
=================================================

f _ num2 = num2

---

(module
  (function_declaration
    (variable_identifier)
    (wildcard)
    (variable_identifier)
    (function_body (variable_identifier))))

=================================================
Function Declarations With Literals
=================================================

f 1 2 = 3
f "hello" "world" = "goodbye"
f 'a' 'b' = 'c'
f 1.0 2.0 = 3.0

---

(module
  (function_declaration
    (variable_identifier)
    (integer)
    (integer)
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (string)
    (string)
    (function_body (string)))
  (function_declaration
    (variable_identifier)
    (char)
    (char)
    (function_body (char)))
  (function_declaration
    (variable_identifier)
    (float)
    (float)
    (function_body (float))))

=================================================
Function Declarations With Field Labels
=================================================

f Ex { a = 1 } = 1
f Ex { a = 1, b = 2 } = 2

---

(module
  (function_declaration
    (variable_identifier)
    (labeled_pattern
      (constructor_identifier)
      (field_pattern (variable_identifier) (integer)))
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (labeled_pattern
      (constructor_identifier)
      (field_pattern (variable_identifier) (integer))
      (field_pattern (variable_identifier) (integer)))
    (function_body (integer))))

=================================================
Function Declarations With Field Labels And @
=================================================

f c@Ex { a = 1 } = c

---

 (module
  (function_declaration
    (variable_identifier)
    (as_pattern
      (variable_identifier)
      (labeled_pattern (constructor_identifier)
      (field_pattern
        (variable_identifier)
        (integer))))
  (function_body (variable_identifier))))

=================================================
Function Declarations With Parenthesized Pattern
=================================================

f (1) = 1
f (-(1)) = 1
f (Example a b c) = a
f (a :<: f) = 2
f ([]) = 1

---

(module
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern (integer))
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern (negative_literal (integer)))
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern
      (constructor_pattern
        (constructor_identifier)
        (variable_identifier)
        (variable_identifier)
        (variable_identifier)))
    (function_body (variable_identifier)))
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern
      (variable_identifier)
      (constructor_operator (constructor_symbol))
      (variable_identifier))
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern (list_constructor))
    (function_body (integer))))

=================================================
Function Declarations With Tuples
=================================================

f (1, 2) = 1
f ((Just 1), Just 2) = Just 1
f (Just a, Nothing) = Nothing
f (Left a, Right b, -(1)) = b

---

(module
  (function_declaration
    (variable_identifier)
    (tuple_pattern
      (pattern (integer))
      (pattern (integer)))
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (tuple_pattern
      (pattern (parenthesized_pattern (constructor_pattern (constructor_identifier) (integer))))
      (pattern (constructor_pattern (constructor_identifier) (integer))))
    (function_body
      (function_application
        (constructor_identifier)
        (integer))))
  (function_declaration
    (variable_identifier)
    (tuple_pattern
      (pattern (constructor_pattern (constructor_identifier) (variable_identifier)))
      (pattern (constructor_identifier)))
    (function_body (constructor_identifier)))
  (function_declaration
    (variable_identifier)
    (tuple_pattern
      (pattern (constructor_pattern (constructor_identifier) (variable_identifier)))
      (pattern (constructor_pattern (constructor_identifier) (variable_identifier)))
      (pattern (negative_literal (integer))))
    (function_body (variable_identifier))))

=================================================
Function Declarations With Lists
=================================================

f [] = 0
f [a] = a
f (a:bs) = a
f (a:b:cs) = a
f (a:b:c:ds) = a

---

(module
  (function_declaration
    (variable_identifier)
    (list_constructor)
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (list_pattern (pattern (variable_identifier)))
    (function_body (variable_identifier)))
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern
      (variable_identifier)
      (constructor_operator (constructor_symbol))
      (variable_identifier))
    (function_body (variable_identifier)))
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern
      (variable_identifier)
      (constructor_operator (constructor_symbol))
      (variable_identifier)
      (constructor_operator (constructor_symbol))
      (variable_identifier))
    (function_body (variable_identifier)))
  (function_declaration
    (variable_identifier)
    (parenthesized_pattern
      (variable_identifier)
      (constructor_operator (constructor_symbol))
      (variable_identifier)
      (constructor_operator (constructor_symbol))
      (variable_identifier)
      (constructor_operator (constructor_symbol))
      (variable_identifier))
    (function_body (variable_identifier))))

=================================================
Function Declarations With Irrefutable Pattern
=================================================

f ~a = 1
f ~(-(1)) = 1
f ~(~(a, b), c) = c

---

(module
  (function_declaration
    (variable_identifier)
    (irrefutable_pattern (variable_identifier))
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (irrefutable_pattern (parenthesized_pattern (negative_literal (integer))))
    (function_body (integer)))
  (function_declaration
    (variable_identifier)
    (irrefutable_pattern
      (tuple_pattern
        (pattern
          (irrefutable_pattern
            (tuple_pattern
              (pattern (variable_identifier))
              (pattern (variable_identifier)))))
        (pattern (variable_identifier))))
    (function_body (variable_identifier))))

=================================================
Function Declarations With Where
=================================================

f a = c where c = d
f a = c
  where
    c = d
    d = 1


---

(module
  (function_declaration
    (variable_identifier)
    (variable_identifier)
    (function_body
      (variable_identifier)
      (where
        (function_declaration
          (variable_identifier)
          (function_body (variable_identifier))))))
  (function_declaration
    (variable_identifier)
    (variable_identifier)
    (function_body (variable_identifier)
    (where
      (function_declaration
        (variable_identifier)
        (function_body (variable_identifier)))
      (function_declaration
        (variable_identifier)
        (function_body (integer)))))))

=================================================
Function Declarations With Let
=================================================

f = let y = x
        x = 1
      in y

f = let y = g; g = 1 in y

f = let y = x
        x :: Int
        x = 1 in y

f = let { y :: Int;
          y = x;
          x :: Int;
          x = 1; } in y

---

(module
  (function_declaration
    (variable_identifier)
    (function_body
      (let_expression
        (function_declaration
          (variable_identifier)
          (function_body (variable_identifier)))
        (function_declaration
          (variable_identifier)
          (function_body (integer)))
      (in_clause (variable_identifier)))))
  (function_declaration
    (variable_identifier)
    (function_body
      (let_expression
      (function_declaration
        (variable_identifier)
        (function_body (variable_identifier)))
      (function_declaration
        (variable_identifier)
        (function_body (integer)))
      (in_clause (variable_identifier)))))
  (function_declaration
    (variable_identifier)
    (function_body
      (let_expression
        (function_declaration
          (variable_identifier)
          (function_body (variable_identifier)))
        (type_signature
          (variable_identifier)
          (annotation)
          (type_constructor_identifier))
        (function_declaration
          (variable_identifier)
          (function_body (integer)))
    (in_clause (variable_identifier)))))
  (function_declaration
    (variable_identifier)
    (function_body
      (let_expression
        (type_signature
          (variable_identifier)
          (annotation)
          (type_constructor_identifier))
        (function_declaration
          (variable_identifier)
          (function_body (variable_identifier)))
        (type_signature
          (variable_identifier)
          (annotation)
          (type_constructor_identifier))
        (function_declaration
          (variable_identifier)
          (function_body (integer)))
      (in_clause (variable_identifier))))))

=================================================
Function Declarations With Case
=================================================

g x = case x of
  Just a | a < 10, True, let b :: Int -> Int
                             b x = x -> True
  Nothing -> False

f x = case x of
  Just _ -> x where x = True
  Nothing -> False

---

(module
  (function_declaration
    (variable_identifier)
    (variable_identifier)
    (function_body
      (case_expression (variable_identifier)
        (alternative
          (constructor_pattern (constructor_identifier) (variable_identifier))
          (case_guard_pattern
            (guard
              (infix_operator_application
                (variable_identifier) (variable_operator (variable_symbol)) (integer)))
            (guard
              (constructor_identifier))
            (guard
              (let_statement
                (type_signature
                  (variable_identifier)
                  (annotation)
                  (function_type
                    (type (type_constructor_identifier))
                    (type (type_constructor_identifier))))
                  (function_declaration
                    (variable_identifier)
                    (variable_identifier)
                    (function_body (variable_identifier)))))
            (constructor_identifier)))
        (alternative
          (constructor_identifier) (constructor_identifier)))))
  (function_declaration
    (variable_identifier)
    (variable_identifier)
    (function_body
      (case_expression
        (variable_identifier)
        (alternative
          (constructor_pattern (constructor_identifier) (wildcard))
          (variable_identifier) (where (function_declaration (variable_identifier) (function_body (constructor_identifier)))))
        (alternative
          (constructor_identifier)
          (constructor_identifier))))))

=================================================
Function Declarations With Guards
=================================================

f x | x < 10, x > 2 = True
    | otherwise = False

---

(module
  (function_declaration
    (variable_identifier)
    (variable_identifier)
    (function_guard_pattern
      (guard
        (infix_operator_application (variable_identifier) (variable_operator (variable_symbol)) (integer)))
      (guard
        (infix_operator_application (variable_identifier) (variable_operator (variable_symbol)) (integer)))
      (constructor_identifier))
    (function_guard_pattern
      (guard (variable_identifier))
      (constructor_identifier))))

=================================================
Function Declarations With Do
=================================================

f x = do
  let z = x
  y <- a
  pure y

---

(module
  (function_declaration
    (variable_identifier)
    (variable_identifier)
    (function_body
      (do
        (let_statement
          (function_declaration
            (variable_identifier)
            (function_body (variable_identifier))))
        (bind_pattern
          (variable_identifier)
          (variable_identifier))
        (function_application (variable_identifier) (variable_identifier))))))

=================================================
Function Declarations With Field Update
=================================================

f y@Example = y { a = 1, b = 2 }
f y@(Example { a = a', b = b' }) = y { a = a' + 1, b = b' ++ " !" }

---

(module
  (function_declaration
    (variable_identifier)
    (as_pattern (variable_identifier) (constructor_identifier))
    (function_body
      (labeled_update
        (variable_identifier)
        (field_bind (variable_identifier) (integer))
        (field_bind (variable_identifier) (integer)))))
  (function_declaration
    (variable_identifier)
    (as_pattern
      (variable_identifier)
      (parenthesized_pattern
        (labeled_pattern
          (constructor_identifier)
          (field_pattern (variable_identifier) (variable_identifier))
          (field_pattern (variable_identifier) (variable_identifier)))))
    (function_body
      (labeled_update
        (variable_identifier)
        (field_bind
          (variable_identifier)
          (infix_operator_application
            (variable_identifier)
            (variable_operator (variable_symbol))
            (integer)))
        (field_bind
          (variable_identifier)
          (infix_operator_application
            (variable_identifier)
            (variable_operator (variable_symbol))
            (string)))))))
