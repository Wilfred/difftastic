============================================
Object destructuring assignments
============================================

{a, b} = object
let {a, b, ...c} = object
const {a, b: {c, d}} = object

---

(program
  (expression_statement (assignment
    (object_pattern
      (shorthand_property_name)
      (shorthand_property_name))
    (variable_name)))
  (lexical_declaration (variable_declarator
    (object_pattern
      (shorthand_property_name)
      (shorthand_property_name)
      (spread_element (variable_name)))
    (variable_name)))
  (lexical_declaration (variable_declarator
    (object_pattern
      (shorthand_property_name)
      (pair
        (property_name)
        (object
          (shorthand_property_name)
          (shorthand_property_name))))
    (variable_name))))

============================================
Object destructuring parameters
============================================

function a ({b, c}, {d}) {}

---

(program
  (function (variable_name)
    (formal_parameters
      (object_pattern (shorthand_property_name) (shorthand_property_name))
      (object_pattern (shorthand_property_name)))
    (statement_block)))

============================================
Array destructuring assignments
============================================

[a, b] = array;
[a, b, ...c] = array

---

(program
  (expression_statement (assignment
    (array_pattern
      (variable_name)
      (variable_name))
    (variable_name)))
  (expression_statement (assignment
    (array_pattern
      (variable_name)
      (variable_name)
      (spread_element (variable_name)))
    (variable_name))))

================================================
Object destructuring patterns w/ default values
================================================

function a({b = true}, [c, d = false]) {}

---

(program
  (function (variable_name)
    (formal_parameters
      (object_pattern (assignment_pattern (shorthand_property_name) (true)))
      (array_pattern (variable_name) (assignment (variable_name) (false))))
    (statement_block)))
