============================================
Block comments
============================================

/*
 * Block comments
 */

/* Comment with asterisks **/

----

(source_file
  (block_comment)
  (block_comment))

============================================
Nested block comments
============================================

/* /* double nested */ */

// ---

/*/*/* triple nested */*/*/

// ---

/****
  /****
    nested with extra stars
  ****/
****/

// ---

----

(source_file
  (block_comment)
  (line_comment)
  (block_comment)
  (line_comment)
  (block_comment)
  (line_comment))

============================================
Line comments
============================================

// Comment

----

(source_file
  (line_comment))

============================================
Macro invocation
============================================

println!();
println!("format {} arguments", "some");
vec![1, 2, 3];
vec![0; 100];
vec!();

----

(source_file
  (macro_invocation (identifier) (token_tree))
  (macro_invocation (identifier) (token_tree
    (string_literal) (string_literal)))
  (macro_invocation (identifier) (token_tree
    (number_literal) (number_literal) (number_literal)))
  (macro_invocation (identifier) (token_tree
    (number_literal) (number_literal)))
  (macro_invocation (identifier) (token_tree)))

============================================
Macro definition
============================================

macro_rules! say_hello {
    () => (
        println!("Hello!");
    )
}

macro_rules! four {
    () => {1 + 3};
}

macro_rules! foo {
    (x => $e:expr) => (println!("mode X: {}", $e));
    (y => $e:expr) => (println!("mode Y: {}", $e))
}

macro_rules! o_O {
    (
      $($x:expr; [ $( $y:expr ),* ]);*
    ) => {
      $($($x + $e),*),*
    }
}

----

(source_file
  (macro_definition (identifier)
    (macro_rule
      (token_tree_pattern)
      (token_tree (identifier) (token_tree (string_literal)))))
  (macro_definition (identifier)
    (macro_rule
      (token_tree_pattern)
      (token_tree (number_literal) (number_literal))))
  (macro_definition (identifier)
    (macro_rule
      (token_tree_pattern (identifier) (token_binding_pattern (metavariable) (fragment_specifier)))
      (token_tree (identifier) (token_tree (string_literal) (metavariable))))
    (macro_rule
      (token_tree_pattern
        (identifier)
        (token_binding_pattern (metavariable) (fragment_specifier)))
      (token_tree (identifier) (token_tree (string_literal) (metavariable)))))
  (macro_definition (identifier)
    (macro_rule
      (token_tree_pattern (token_repetition_pattern
        (token_binding_pattern (metavariable) (fragment_specifier))
        (token_tree_pattern (token_repetition_pattern
          (token_binding_pattern (metavariable) (fragment_specifier))))))
      (token_tree (token_repetition (token_repetition (metavariable) (metavariable)))))))

=====================================
Greek letters in identifiers
=====================================

const σ1 : Σ = 0;
const ψ_2 : Ψ = 1;

---

(source_file
  (const_item (identifier) (type_identifier) (number_literal))
  (const_item (identifier) (type_identifier) (number_literal)))
