===============================================
Trivial "Hello World" test
===============================================

<?php echo "Hello World"?>

---

(program (echo_statement (string)))

===============================================
Simple POST Method test
===============================================

<?php
echo $_POST['a']; ?>

---

(program (echo_statement
    (subscript_expression
      (variable_name (name))
      (string))))

===============================================
GET and POST Method combined
===============================================

<?php
error_reporting(0);
echo "post-a=({$_POST['a']}) get-b=({$_GET['b']}) get-c=({$_GET['c']})"?>

---

(program (expression_statement
    (function_call_expression
      (qualified_name (name))
      (arguments (integer))))
  (echo_statement (string)))

===============================================
Two variables in POST data
===============================================

<?php
error_reporting(0);
echo "{$_POST['a']} {$_POST['b']}" ?>

---

(program (expression_statement
    (function_call_expression
      (qualified_name (name))
      (arguments (integer))))
  (echo_statement (string)))

===============================================
Three variables in POST data
===============================================

<?php
error_reporting(0);
echo "{$_POST['a']} {$_POST['b']} {$_POST['c']}"?>

---

(program (expression_statement
    (function_call_expression
      (qualified_name (name))
      (arguments (integer))))
  (echo_statement (string)))

===============================================
Add 3 variables together and print result
===============================================

<?php $a=1; $b=2; $c=3; $d=$a+$b+$c; echo $d?>

---

(program (expression_statement (assignment_expression
    (variable_name (name)) (integer)))
  (expression_statement (assignment_expression
    (variable_name (name)) (integer)))
  (expression_statement (assignment_expression
    (variable_name (name)) (integer)))
  (expression_statement (assignment_expression
    (variable_name (name))
    (binary_expression
      (binary_expression
        (variable_name (name)) (variable_name (name)))
      (variable_name (name)))))
  (echo_statement (variable_name (name))))

===============================================
Multiply 3 variables and print result
===============================================

<?php $a=2; $b=4; $c=8; $d=$a*$b*$c; echo $d?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (binary_expression (binary_expression (variable_name (name)) (variable_name (name))) (variable_name (name)))))
  (echo_statement (variable_name (name))))

===============================================
Divide 3 variables and print result
===============================================

<?php $a=27; $b=3; $c=3; $d=$a/$b/$c; echo $d?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (binary_expression (binary_expression (variable_name (name)) (variable_name (name))) (variable_name (name)))))
  (echo_statement (variable_name (name))))

===============================================
Subtract 3 variables and print result
===============================================

<?php $a=27; $b=7; $c=10; $d=$a-$b-$c; echo $d?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (binary_expression (binary_expression (variable_name (name)) (variable_name (name))) (variable_name (name)))))
  (echo_statement (variable_name (name))))

===============================================
Testing | and & operators
===============================================

<?php $a=8; $b=4; $c=8; echo $a|$b&$c?>

---

(program (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (expression_statement (assignment_expression (variable_name (name)) (integer)))
  (echo_statement (binary_expression (variable_name (name)) (binary_expression (variable_name (name)) (variable_name (name))))))

===============================================
Testing $argc and $argv handling (GET)
===============================================

<?php
$argc = $_SERVER['argc'];
$argv = $_SERVER['argv'];

for ($i=0; $i<$argc; $i++) {
	echo "$i: ".$argv[$i]."\n";
}

?>

---

(program (expression_statement (assignment_expression
		(variable_name (name))
		(subscript_expression (variable_name (name)) (string))))
	(expression_statement (assignment_expression
		(variable_name (name))
		(subscript_expression (variable_name (name)) (string))))
	(for_statement
		(assignment_expression (variable_name (name)) (integer))
		(binary_expression (variable_name (name)) (variable_name (name)))
		(update_expression (variable_name (name)))
		(compound_statement
			(echo_statement
				(binary_expression
					(binary_expression
						(string)
						(subscript_expression (variable_name (name)) (variable_name (name))))
					(string))))))

===============================================
Testing $argc and $argv handling (cli)
===============================================

<?php
$argc = $_SERVER['argc'];
$argv = $_SERVER['argv'];

for ($i=1; $i<$argc; $i++) {
	echo ($i-1).": ".$argv[$i]."\n";
}

?>

---

(program (expression_statement
		(assignment_expression
			(variable_name (name))
			(subscript_expression (variable_name (name)) (string))))
	(expression_statement
		(assignment_expression
			(variable_name (name))
			(subscript_expression (variable_name (name)) (string))))
	(for_statement
		(assignment_expression (variable_name (name)) (integer))
		(binary_expression (variable_name (name)) (variable_name (name)))
		(update_expression (variable_name (name)))
		(compound_statement
			(echo_statement
				(binary_expression (binary_expression (binary_expression (parenthesized_expression (binary_expression (variable_name (name)) (integer))) (string)) (subscript_expression (variable_name (name)) (variable_name (name)))) (string))))))

===============================================
POST Method test and arrays
===============================================

<?php
var_dump($_POST['a']);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))))

===============================================
POST Method test and arrays - 2
===============================================

<?php
var_dump($_POST['a']);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))))

===============================================
POST Method test and arrays - 3
===============================================

<?php
var_dump($_POST['a']);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))))

===============================================
POST Method test and arrays - 4
===============================================

<?php
var_dump($_POST['a']);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))))

===============================================
POST Method test and arrays - 5
===============================================

<?php
var_dump($_POST['a']);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))))

===============================================
POST Method test and arrays - 6
===============================================

<?php
var_dump($_POST['a']);
var_dump($_POST['b']);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))))

===============================================
POST Method test and arrays - 7
===============================================

<?php
var_dump($_POST['a']);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))))

===============================================
POST Method test and arrays - 8
===============================================

<?php
var_dump($_POST['a']);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (subscript_expression (variable_name (name)) (string))))))

===============================================
Cookies test#1
===============================================

<?php
var_dump($_COOKIE);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

===============================================
Cookies test#2
===============================================

<?php
var_dump($_COOKIE);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

===============================================
Handling of max_input_nesting_level being reached
===============================================

<?php
var_dump($_POST, $php_errormsg);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name)) (variable_name (name))))))

===============================================
RFC1867 character quotting
===============================================

<?php
var_dump($_POST);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

===============================================
Bug#55504 (Content-Type header is not parsed correctly on HTTP POST request)
===============================================

<?php
var_dump($_POST);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

===============================================
Bug#55504 (Content-Type header is not parsed correctly on HTTP POST request)
===============================================

<?php
var_dump($_POST);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

===============================================
Bug#18792 (no form variables after multipart/form-data)
===============================================

<?php
var_dump($_POST);
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))

===============================================
Bug #20539 (PHP CLI Segmentation Fault)
===============================================

<?php
	print "good :)\n";
	$filename = __DIR__ . '/sess_' . session_id();
	var_dump(file_exists($filename));
	@unlink($filename);
?>

---

(program (expression_statement (print_intrinsic (string))) (expression_statement (assignment_expression (variable_name (name)) (binary_expression (binary_expression (qualified_name (name)) (string)) (function_call_expression (qualified_name (name)) (arguments))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))))) (expression_statement (unary_op_expression (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))))))

===============================================
Bug #29971 (variables_order behaviour)
===============================================

<?php
var_dump($_ENV,$_SERVER);
var_dump(ini_get("variables_order"));
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (variable_name (name)) (variable_name (name))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))))

===============================================
Req #54514 (Get php binary path during script execution)
===============================================

<?php
if(realpath(getenv('TEST_PHP_EXECUTABLE')) === realpath(PHP_BINARY)) {
	echo "done";
} else {
	var_dump(getenv('TEST_PHP_EXECUTABLE'));
	var_dump(PHP_BINARY);
}

---

(program (if_statement (binary_expression (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string))))) (function_call_expression (qualified_name (name)) (arguments (qualified_name (name))))) (compound_statement (echo_statement (string))) (else_clause (compound_statement (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (qualified_name (name)))))))))

===============================================
Bug #67988 (htmlspecialchars() does not respect default_charset specified by ini_set)
===============================================

<?php
ini_set('default_charset', 'cp1252');

var_dump(ini_get('default_charset'));
var_dump(ini_get('internal_encoding'));
var_dump(ini_get('input_encoding'));
var_dump(ini_get('output_encoding'));

var_dump(htmlentities("\xA3", ENT_HTML5));
var_dump(htmlentities("\xA3", ENT_HTML5, 'cp1252'));

var_dump(bin2hex(html_entity_decode("&pound;", ENT_HTML5)));
var_dump(bin2hex(html_entity_decode("&pound;", ENT_HTML5, 'cp1252')));

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string) (string)))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string) (qualified_name (name))))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string) (qualified_name (name)) (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string) (qualified_name (name))))))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string) (qualified_name (name)) (string)))))))))

===============================================
enable_post_data_reading: using multiple input streams
===============================================

<?php
echo "Test\n";

$f1 = fopen("php://input", "r");
$f2 = fopen("php://input", "r");

while (!feof($f1) && !feof($f2)) {
	echo fgetc($f1), fgetc($f2);
}

?>

Done

---

(program (echo_statement (string)) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string) (string))))) (expression_statement (assignment_expression (variable_name (name)) (function_call_expression (qualified_name (name)) (arguments (string) (string))))) (while_statement (binary_expression (unary_op_expression (function_call_expression (qualified_name (name)) (arguments (variable_name (name))))) (unary_op_expression (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))))) (compound_statement (echo_statement (sequence_expression (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))) (function_call_expression (qualified_name (name)) (arguments (variable_name (name)))))))) (text))

===============================================
PHP encoding setting test
===============================================

<?php
var_dump(ini_get('default_charset'));
var_dump(ini_get('input_encoding'));
var_dump(ini_get('internal_encoding'));
var_dump(ini_get('output_encoding'));

var_dump(ini_set('default_charset', 'ISO-8859-1'));
var_dump(ini_get('default_charset'));
var_dump(ini_get('input_encoding'));
var_dump(ini_get('internal_encoding'));
var_dump(ini_get('output_encoding'));

var_dump(ini_set('input_encoding', 'EUC-JP'));
var_dump(ini_set('internal_encoding', 'EUC-JP'));
var_dump(ini_set('output_encoding', 'EUC-JP'));
var_dump(ini_get('input_encoding'));
var_dump(ini_get('internal_encoding'));
var_dump(ini_get('output_encoding'));


---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string) (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string) (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string) (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string) (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))) (expression_statement (function_call_expression (qualified_name (name)) (arguments (function_call_expression (qualified_name (name)) (arguments (string)))))))

===============================================
Test header_register_callback
===============================================

<?php
header_register_callback(function() { echo "sent";});
?>

---

(program (expression_statement (function_call_expression (qualified_name (name)) (arguments (anonymous_function_creation_expression (formal_parameters) (compound_statement (echo_statement (string))))))))

===============================================
Req #44164 (Handle "Content-Length" HTTP header when zlib.output_compression active)
===============================================

<?php
header("Content-length: 200");
echo str_repeat("a", 200);

---

 (program (expression_statement (function_call_expression (qualified_name (name)) (arguments (string)))) (echo_statement (function_call_expression (qualified_name (name)) (arguments (string) (integer)))))

===============================================
Req #60524 (Specify temporary directory)
===============================================

<?php echo sys_get_temp_dir(); ?>

---

(program (echo_statement (function_call_expression (qualified_name (name)) (arguments))))
===============================================
Req #60524 (Specify temporary directory)
===============================================

<?php echo sys_get_temp_dir(); ?>

---

(program (echo_statement (function_call_expression (qualified_name (name)) (arguments))))
