=====================================
Using directives
=====================================

using A;
using B.C;
using global::E.F;
using G = H.I;
using static J.K;

---

(compilation_unit
  (using_directive
    (identifier_name))
  (using_directive
    (qualified_name (identifier_name) (identifier_name)))
  (using_directive
    (qualified_name
      (alias_qualified_name (identifier_name))
      (identifier_name)))
  (using_directive
    (name_equals (identifier_name))
    (qualified_name (identifier_name) (identifier_name)))
  (using_directive
    (qualified_name (identifier_name) (identifier_name))))

=====================================
Nested using directives
=====================================

namespace Foo {
  using A;
}

---

(compilation_unit
  (namespace_declaration
    (identifier_name)
    (using_directive
      (identifier_name))))

=====================================
Comments
=====================================

// I'm a single-line comment

/*
 *  I'm a block comment: a * b / c
 */

---

(compilation_unit (comment) (comment))

=====================================
Namespaces
=====================================

namespace A {
  namespace B.C.D {
  }

  namespace E.F {
  }
}

---

(compilation_unit
  (namespace_declaration
    (identifier_name)
    (namespace_declaration
      (qualified_name (qualified_name (identifier_name) (identifier_name)) (identifier_name)))
    (namespace_declaration
      (qualified_name (identifier_name) (identifier_name)))))

=====================================
Interfaces
=====================================

public interface IFoo {
}

---

(compilation_unit
  (interface_declaration
    (modifier)
    (identifier_name)
    (class_body)))

=====================================
Externs
=====================================

extern alias A;

---

(compilation_unit
  (extern_alias_directive
    (identifier_name)))


=====================================
Delegates
=====================================

public delegate int Global(ref char a = '\n');

delegate void A(params int [] test);

class Z {
  delegate void Zed();
}

---

(compilation_unit
  (delegate_declaration
    (modifier)
    (predefined_type)
    (identifier_name)
    (parameter_list
      (parameter
        (parameter_modifier)
        (predefined_type)
        (identifier_name)
        (equals_value_clause (character_literal (escape_sequence))))))
  (delegate_declaration (void_keyword) (identifier_name)
    (parameter_list (parameter_array (array_type (predefined_type) (rank_specifier)) (identifier_name))))
  (class_declaration (identifier_name) (class_body
    (delegate_declaration (void_keyword) (identifier_name) (parameter_list)))))
