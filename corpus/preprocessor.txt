===================================
If and endif directives
===================================

string a = 
#if WIN32
  "Win32"
#endif
  ;

---

(compilation_unit
  (field_declaration
    (variable_declaration
     (predefined_type)
     (variable_declarator
      (identifier)
      (equals_value_clause
        (preprocessor_directive)
        (string_literal))))
  (preprocessor_directive)))

===================================
If and elif directives
===================================

string a = 
#if WIN32
  "Win32"
#elif MACOS
  "MacOS"
#endif
  ;

---

(compilation_unit
  (field_declaration
    (variable_declaration
     (predefined_type)
     (variable_declarator
      (identifier)
      (equals_value_clause
        (preprocessor_directive)
        (string_literal))))
  (preprocessor_directive)))

===================================
If and else directives
===================================

string a = 
#if WIN32
  "Win32"
#else
  "Unknown"
#endif
  ;

---

(compilation_unit
  (field_declaration
    (variable_declaration
     (predefined_type)
     (variable_declarator
      (identifier)
      (equals_value_clause
        (preprocessor_directive)
        (string_literal))))
  (preprocessor_directive)))

===================================
If, elif and else directives
===================================

string a = 
#if WIN32
  "Win32"
#elif MACOS
  "MacOS"
#else
  "Unknown"
#endif
  ;

---

(compilation_unit
  (field_declaration
    (variable_declaration
     (predefined_type)
     (variable_declarator
      (identifier)
      (equals_value_clause
        (preprocessor_directive)
        (string_literal))))
  (preprocessor_directive)))

===================================
If and error directives
===================================

string a = 
#if WIN32
  "Win32"
#else
#error Compilation will now stop.
#endif
  ;

---

(compilation_unit
  (field_declaration
    (variable_declaration
     (predefined_type)
     (variable_declarator
      (identifier)
      (equals_value_clause
        (preprocessor_directive)
        (string_literal))))
  (preprocessor_directive)))

===========================
Region directives
===========================

#region Here, there, everywhere

// something fast

#endregion

---

(compilation_unit
  (preprocessor_directive)
  (comment)
  (preprocessor_directive))

===================================
Define and undefine directives
===================================

#define SOMETHING
#undef BAD

class A {}

---

(compilation_unit
  (preprocessor_directive)
  (preprocessor_directive)
  (class_declaration (identifier) (declaration_list)))

===================================
Warning and error directives
===================================

class Of1879 {
#warning This class is bad.
#error Okay, just stop.
}

---

(compilation_unit
  (class_declaration (identifier)
    (declaration_list
      (preprocessor_directive)
      (preprocessor_directive))))

===================================
Line directives
===================================

class Of1879 {
  void AMethod() {
#line 2001 "A Space"
#line hidden
#line default
  }
}

---

(compilation_unit
  (class_declaration (identifier)
    (declaration_list
      (method_declaration (void_keyword) (identifier) (parameter_list)
        (block
          (preprocessor_directive)
          (preprocessor_directive)
          (preprocessor_directive))))))
  