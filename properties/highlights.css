@import "./injections.css";

type_identifier { highlight: 'type'; }
primitive_type { highlight: 'type.builtin'; }
field_identifier { highlight: 'property'; }

line_comment, block_comment {
  highlight: 'comment';
}

identifier,
call_expression > identifier,
call_expression > scoped_identifier > identifier:nth-child(2) {
  &[text='^[A-Z]'] {
    highlight: 'constructor';
  }
}

identifier {
  &[text='^[A-Z][A-Z\\d_]+$'] {
    highlight: 'constant';
  }
}

[token="("],
[token=")"],
[token="["],
[token="]"] {
  highlight: 'punctuation.bracket';
}

type_arguments,
type_parameters {
  & > [token="<"],
  & > [token=">"] {
    highlight: 'punctuation.bracket';
  }
}

[token='::'],
[token='.'],
[token=';'] {
  highlight: 'punctuation.delimiter';
}

macro_invocation > identifier,
macro_invocation > [token="!"],
macro_definition > identifier,
call_expression > identifier,
call_expression > field_expression > field_identifier,
call_expression > scoped_identifier > identifier:nth-child(2),
generic_function > identifier,
generic_function > field_expression > field_identifier,
generic_function > scoped_identifier > identifier,
function_item > identifier,
function_signature_item > identifier {
  highlight: 'function';
}


self {
  highlight: 'variable.builtin';
}

use_wildcard > identifier:nth-child(0),
use_wildcard > scoped_identifier > identifier:nth-child(2),
scoped_type_identifier > identifier:nth-child(0),
scoped_type_identifier > scoped_identifier:nth-child(0) > identifier,
scoped_identifier > identifier:nth-child(0),
scoped_identifier > scoped_identifier:nth-child(0) > identifier,
use_declaration > identifier,
use_declaration > scoped_identifier > identifier,
use_list > identifier,
use_list > scoped_identifier > identifier,
meta_item > identifier {
  &[text="^[A-Z]"] {
    highlight: 'type';
  }
}

lifetime > identifier {
  highlight: 'label';
}


[token="break"],
[token="const"],
[token="continue"],
[token="crate"],
[token="default"],
[token="dyn"],
[token="else"],
[token="enum"],
[token="extern"],
[token="fn"],
[token="for"],
[token="if"],
[token="impl"],
[token="in"],
[token="let"],
[token="let"],
[token="loop"],
[token="macro_rules!"],
[token="match"],
[token="mod"],
[token="move"],
[token="pub"],
[token="ref"],
[token="return"],
[token="static"],
[token="struct"],
[token="trait"],
[token="type"],
[token="union"],
[token="unsafe"],
[token="use"],
[token="where"],
[token="while"],
mutable_specifier,
use_list > self,
scoped_use_list > self,
scoped_identifier > self,
crate,
super {
  highlight: 'keyword';
}


char_literal, string_literal, raw_string_literal {
  highlight: 'string';
}

boolean_literal, integer_literal, float_literal {
  highlight: 'constant.builtin';
}

escape_sequence {
  highlight: 'escape';
}

attribute_item, inner_attribute_item {
  highlight: 'attribute';
}


[token="as"],
[token="*"],
[token="&"],
[token="'"] {
  highlight: 'operator';
}
