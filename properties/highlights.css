@schema "tree-sitter-highlight-schema";

/* Keywords */

"begin",
"break",
"case",
"class",
"def",
"do",
"else",
"elsif",
"end",
"ensure",
"for",
"if",
"in",
"module",
"rescue",
"retry",
"return",
"then",
"unless",
"until",
"when",
"while",
"yield" {
  scope: 'keyword';
}

/* Identifiers */

constant {
  scope: 'constructor';

  &:text('^[A-Z_]+$') {
    scope: 'constant';
  }
}

superclass > constant {
  scope: 'constructor';
}

identifier:text('^__(FILE|LINE|ENCODING)__$') {
  scope: 'constant.builtin';
}

identifier {
  scope: 'variable';
}

self {
  scope: 'variable.builtin';
}

method > identifier,
singleton_method > identifier:nth-child(3),
setter > identifier,
call > identifier:nth-child(2) {
  scope: 'function';
}

method_call > identifier:nth-child(0) {
  &:text('^require$') {
    scope: 'function.builtin';
  }

  scope: 'function';
}

keyword_parameter > identifier:nth-child(0) {
  scope: 'string.special';
}

class_variable, instance_variable {
  scope: 'property';
}

/* Literals */

symbol {
  scope: 'string.special';
}

bare_symbol {
  scope: 'string.special';
}

comment {
  scope: 'comment';
}

regex {
  scope: 'string.special';
}

integer {
  scope: 'number';
}

string,
bare_string,
subshell,
heredoc_beginning,
heredoc_body {
  scope: 'string';
}

escape_sequence {
  scope: 'escape';
}

interpolation {
  scope: 'embedded';

  & > "#{",
  & > "}" {
    scope: 'punctuation.special';
  }
}

nil, true, false {
  scope: 'constant.builtin';
}

/* Delimiters */

",",
".",
"%w(",
"%i(",
"(",
")" {
  scope: 'punctuation';
}
