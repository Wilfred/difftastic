@schema "tree-sitter-highlight-schema";

identifier {
  highlight: 'variable';
}

call_expression > identifier,
function_declaration > identifier,
method_declaration > field_identifier,
call_expression > selector_expression > field_identifier {
  highlight: 'function';
}

type_identifier {
  highlight: 'type';
}

field_identifier {
  highlight: 'property';
}

/* Operators */

[token="--"],
[token="-"],
[token="-="],
[token=":="],
[token="!"],
[token="!="],
[token="..."],
[token="*"],
[token="*"],
[token="*="],
[token="/"],
[token="/="],
[token="&"],
[token="&&"],
[token="&="],
[token="%"],
[token="%="],
[token="^"],
[token="^="],
[token="+"],
[token="++"],
[token="+="],
[token="<-"],
[token="<"],
[token="<<"],
[token="<<="],
[token="<="],
[token="="],
[token="=="],
[token=">"],
[token=">="],
[token=">>"],
[token=">>="],
[token="|"],
[token="|="],
[token="||"] {
  highlight: 'operator';
}

/* Keywords */

[token="break"],
[token="case"],
[token="chan"],
[token="const"],
[token="continue"],
[token="default"],
[token="defer"],
[token="else"],
[token="fallthrough"],
[token="for"],
[token="func"],
[token="go"],
[token="goto"],
[token="if"],
[token="import"],
[token="interface"],
[token="map"],
[token="package"],
[token="range"],
[token="return"],
[token="select"],
[token="struct"],
[token="switch"],
[token="type"],
[token="var"] {
  highlight: 'keyword';
}

interpreted_string_literal, raw_string_literal, rune_literal {
  highlight: 'string';
}

escape_sequence {
  highlight: 'escape';
}

int_literal, float_literal, imaginary_literal {
  highlight: 'number';
}

true, false, nil {
  highlight: 'constant.builtin';
}

comment {
  highlight: 'comment';
}
