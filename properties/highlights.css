@import "./injections.css";

/* Properties */

property_identifier {
  highlight: 'property';
}

/* Functions */

identifier,
call_expression > identifier {
  &[text='^require$'] {
    highlight: 'function.builtin';
  }
}

function,
generator_function,
function_declaration,
generator_function_declaration,
call_expression {
  & > identifier {
    highlight: 'function';
  }
}

method_definition,
call_expression > member_expression {
  & > property_identifier {
    highlight: 'function';
  }
}

call_expression > super {
  highlight: 'function.builtin';
}

/* Locals */

function,
arrow_function,
generator_function,
method_definition,
statement_block {
  local-scope: true;
  local-scope-inherit: true;
}

formal_parameters {
  & > identifier,
  & array_pattern > identifier,
  & object_pattern > shorthand_property_identifier,
  & object_pattern > pair > identifier {
    highlight: 'variable.parameter';
    local-definition: true;
  }
}

arrow_function > .parameter {
  highlight: 'variable.parameter';
  local-definition: true;
}

variable_declarator {
  & > identifier,
  & array_pattern > identifier,
  & object_pattern > shorthand_property_identifier,
  & object_pattern > pair > identifier {
    local-definition: true;
  }
}

identifier, shorthand_property_identifier {
  highlight: 'variable';
  local-reference: true;

  &[text='^(global|module|exports|__filename|__dirname|window|event|document|performance|screen|navigator|console)$'] {
    highlight-nonlocal: 'variable.builtin';
  }
}

/* Constructors */

identifier,
shorthand_property_identifier,
call_expression > identifier
{
  &[text="^[A-Z]"] {
    highlight: 'constructor';
  }
}

/* Constants */

identifier,
property_identifier,
shorthand_property_identifier {
  &[text="^[\\$A-Z_]{2,}+$"] {
    highlight: 'constant';
  }
}

/* Literals */

number {
  highlight: 'number';
}

string, template_string {
  highlight: 'string';
}

regex {
  highlight: 'string.special';
}

escape_sequence {
  highlight: 'escape';
}

undefined, null,
true, false {
  highlight: 'constant.builtin';
}

comment,
hash_bang_line {
  highlight: 'comment';
}

[token="("], [token=")"],
[token="{"], [token="}"],
[token="["], [token="]"] {
  highlight: 'punctuation.bracket';
}

jsx_expression {
  & > [token="{"],
  & > [token="}"] {
    highlight: 'punctuation.special';
  }
}

template_substitution {
  & > [token="${"],
  & > [token="}"] {
    highlight: 'punctuation.special';
  }

  highlight: 'embedded';
}

/* Keywords */

[token="get"],
[token="set"] {
  highlight: 'keyword';
}

[token="as"],
[token="async"],
[token="await"],
[token="break"],
[token="case"],
[token="catch"],
[token="class"],
[token="const"],
[token="continue"],
[token="debugger"],
[token="default"],
[token="delete"],
[token="do"],
[token="else"],
[token="export"],
[token="extends"],
[token="finally"],
[token="for"],
[token="from"],
[token="function"],
[token="if"],
[token="import"],
[token="in"],
[token="instanceof"],
[token="let"],
[token="new"],
[token="of"],
[token="return"],
[token="static"],
[token="switch"],
[token="throw"],
[token="try"],
[token="typeof"],
[token="var"],
[token="while"],
[token="yield"] {
  highlight: 'keyword';
}

/* Punctuation */

[token=","],
[token=";"],
[token="."] {
  highlight: 'punctuation.delimiter';
}

[token="=>"],
[token="="],
[token="+="],
[token="-="],
[token="*="],
[token="/="],
[token="%="],
[token="<<="],
[token=">>="],
[token=">>>="],
[token="&="],
[token="^="],
[token="|="],
[token="!"],
[token="+"],
[token="-"],
[token="*"],
[token="/"],
[token="%"],
[token="=="],
[token="==="],
[token="!="],
[token="!=="],
[token=">="],
[token="<="],
[token=">"],
[token="<"],
[token=":"],
[token="?"],
[token="&&"],
[token="||"],
[token="&"],
[token="~"],
[token="^"],
[token=">>"],
[token=">>>"],
[token="<<"],
[token="|"],
[token="++"],
[token="--"],
[token="..."] {
  highlight: 'operator';
}

/* JSX Elements */

jsx_opening_element, jsx_closing_element, jsx_self_closing_element {
  & > identifier {
    highlight: 'tag';
  }
}

jsx_attribute > property_identifier {
  highlight: 'attribute';
}
